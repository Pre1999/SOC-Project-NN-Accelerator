// nios_system_mm_interconnect_0.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 17.0 595

`timescale 1 ps / 1 ps
module nios_system_mm_interconnect_0 (
		input  wire        clk_0_clk_clk,                                                          //                                                   clk_0_clk.clk
		input  wire        video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset,             //        video_pixel_buffer_dma_0_reset_reset_bridge_in_reset.reset
		input  wire [28:0] nios2_qsys_0_data_master_address,                                       //                                    nios2_qsys_0_data_master.address
		output wire        nios2_qsys_0_data_master_waitrequest,                                   //                                                            .waitrequest
		input  wire [3:0]  nios2_qsys_0_data_master_byteenable,                                    //                                                            .byteenable
		input  wire        nios2_qsys_0_data_master_read,                                          //                                                            .read
		output wire [31:0] nios2_qsys_0_data_master_readdata,                                      //                                                            .readdata
		output wire        nios2_qsys_0_data_master_readdatavalid,                                 //                                                            .readdatavalid
		input  wire        nios2_qsys_0_data_master_write,                                         //                                                            .write
		input  wire [31:0] nios2_qsys_0_data_master_writedata,                                     //                                                            .writedata
		input  wire        nios2_qsys_0_data_master_debugaccess,                                   //                                                            .debugaccess
		input  wire [28:0] nios2_qsys_0_instruction_master_address,                                //                             nios2_qsys_0_instruction_master.address
		output wire        nios2_qsys_0_instruction_master_waitrequest,                            //                                                            .waitrequest
		input  wire        nios2_qsys_0_instruction_master_read,                                   //                                                            .read
		output wire [31:0] nios2_qsys_0_instruction_master_readdata,                               //                                                            .readdata
		output wire        nios2_qsys_0_instruction_master_readdatavalid,                          //                                                            .readdatavalid
		input  wire [31:0] video_pixel_buffer_dma_0_avalon_pixel_dma_master_address,               //            video_pixel_buffer_dma_0_avalon_pixel_dma_master.address
		output wire        video_pixel_buffer_dma_0_avalon_pixel_dma_master_waitrequest,           //                                                            .waitrequest
		input  wire        video_pixel_buffer_dma_0_avalon_pixel_dma_master_read,                  //                                                            .read
		output wire [15:0] video_pixel_buffer_dma_0_avalon_pixel_dma_master_readdata,              //                                                            .readdata
		output wire        video_pixel_buffer_dma_0_avalon_pixel_dma_master_readdatavalid,         //                                                            .readdatavalid
		input  wire        video_pixel_buffer_dma_0_avalon_pixel_dma_master_lock,                  //                                                            .lock
		output wire [22:0] generic_tristate_controller_0_uas_address,                              //                           generic_tristate_controller_0_uas.address
		output wire        generic_tristate_controller_0_uas_write,                                //                                                            .write
		output wire        generic_tristate_controller_0_uas_read,                                 //                                                            .read
		input  wire [7:0]  generic_tristate_controller_0_uas_readdata,                             //                                                            .readdata
		output wire [7:0]  generic_tristate_controller_0_uas_writedata,                            //                                                            .writedata
		output wire [0:0]  generic_tristate_controller_0_uas_burstcount,                           //                                                            .burstcount
		output wire [0:0]  generic_tristate_controller_0_uas_byteenable,                           //                                                            .byteenable
		input  wire        generic_tristate_controller_0_uas_readdatavalid,                        //                                                            .readdatavalid
		input  wire        generic_tristate_controller_0_uas_waitrequest,                          //                                                            .waitrequest
		output wire        generic_tristate_controller_0_uas_lock,                                 //                                                            .lock
		output wire        generic_tristate_controller_0_uas_debugaccess,                          //                                                            .debugaccess
		output wire [2:0]  gleds_s1_address,                                                       //                                                    gleds_s1.address
		output wire        gleds_s1_write,                                                         //                                                            .write
		input  wire [31:0] gleds_s1_readdata,                                                      //                                                            .readdata
		output wire [31:0] gleds_s1_writedata,                                                     //                                                            .writedata
		output wire        gleds_s1_chipselect,                                                    //                                                            .chipselect
		output wire [0:0]  jtag_uart_0_avalon_jtag_slave_address,                                  //                               jtag_uart_0_avalon_jtag_slave.address
		output wire        jtag_uart_0_avalon_jtag_slave_write,                                    //                                                            .write
		output wire        jtag_uart_0_avalon_jtag_slave_read,                                     //                                                            .read
		input  wire [31:0] jtag_uart_0_avalon_jtag_slave_readdata,                                 //                                                            .readdata
		output wire [31:0] jtag_uart_0_avalon_jtag_slave_writedata,                                //                                                            .writedata
		input  wire        jtag_uart_0_avalon_jtag_slave_waitrequest,                              //                                                            .waitrequest
		output wire        jtag_uart_0_avalon_jtag_slave_chipselect,                               //                                                            .chipselect
		output wire [24:0] new_sdram_controller_0_s1_address,                                      //                                   new_sdram_controller_0_s1.address
		output wire        new_sdram_controller_0_s1_write,                                        //                                                            .write
		output wire        new_sdram_controller_0_s1_read,                                         //                                                            .read
		input  wire [31:0] new_sdram_controller_0_s1_readdata,                                     //                                                            .readdata
		output wire [31:0] new_sdram_controller_0_s1_writedata,                                    //                                                            .writedata
		output wire [3:0]  new_sdram_controller_0_s1_byteenable,                                   //                                                            .byteenable
		input  wire        new_sdram_controller_0_s1_readdatavalid,                                //                                                            .readdatavalid
		input  wire        new_sdram_controller_0_s1_waitrequest,                                  //                                                            .waitrequest
		output wire        new_sdram_controller_0_s1_chipselect,                                   //                                                            .chipselect
		output wire [8:0]  nios2_qsys_0_jtag_debug_module_address,                                 //                              nios2_qsys_0_jtag_debug_module.address
		output wire        nios2_qsys_0_jtag_debug_module_write,                                   //                                                            .write
		output wire        nios2_qsys_0_jtag_debug_module_read,                                    //                                                            .read
		input  wire [31:0] nios2_qsys_0_jtag_debug_module_readdata,                                //                                                            .readdata
		output wire [31:0] nios2_qsys_0_jtag_debug_module_writedata,                               //                                                            .writedata
		output wire [3:0]  nios2_qsys_0_jtag_debug_module_byteenable,                              //                                                            .byteenable
		input  wire        nios2_qsys_0_jtag_debug_module_waitrequest,                             //                                                            .waitrequest
		output wire        nios2_qsys_0_jtag_debug_module_debugaccess,                             //                                                            .debugaccess
		output wire [3:0]  performance_counter_0_control_slave_address,                            //                         performance_counter_0_control_slave.address
		output wire        performance_counter_0_control_slave_write,                              //                                                            .write
		input  wire [31:0] performance_counter_0_control_slave_readdata,                           //                                                            .readdata
		output wire [31:0] performance_counter_0_control_slave_writedata,                          //                                                            .writedata
		output wire        performance_counter_0_control_slave_begintransfer,                      //                                                            .begintransfer
		output wire [2:0]  rleds_s1_address,                                                       //                                                    rleds_s1.address
		output wire        rleds_s1_write,                                                         //                                                            .write
		input  wire [31:0] rleds_s1_readdata,                                                      //                                                            .readdata
		output wire [31:0] rleds_s1_writedata,                                                     //                                                            .writedata
		output wire        rleds_s1_chipselect,                                                    //                                                            .chipselect
		output wire [19:0] sram_0_avalon_sram_slave_address,                                       //                                    sram_0_avalon_sram_slave.address
		output wire        sram_0_avalon_sram_slave_write,                                         //                                                            .write
		output wire        sram_0_avalon_sram_slave_read,                                          //                                                            .read
		input  wire [15:0] sram_0_avalon_sram_slave_readdata,                                      //                                                            .readdata
		output wire [15:0] sram_0_avalon_sram_slave_writedata,                                     //                                                            .writedata
		output wire [1:0]  sram_0_avalon_sram_slave_byteenable,                                    //                                                            .byteenable
		input  wire        sram_0_avalon_sram_slave_readdatavalid,                                 //                                                            .readdatavalid
		output wire [1:0]  switches_s1_address,                                                    //                                                 switches_s1.address
		input  wire [31:0] switches_s1_readdata,                                                   //                                                            .readdata
		output wire [12:0] video_character_buffer_with_dma_0_avalon_char_buffer_slave_address,     //  video_character_buffer_with_dma_0_avalon_char_buffer_slave.address
		output wire        video_character_buffer_with_dma_0_avalon_char_buffer_slave_write,       //                                                            .write
		output wire        video_character_buffer_with_dma_0_avalon_char_buffer_slave_read,        //                                                            .read
		input  wire [7:0]  video_character_buffer_with_dma_0_avalon_char_buffer_slave_readdata,    //                                                            .readdata
		output wire [7:0]  video_character_buffer_with_dma_0_avalon_char_buffer_slave_writedata,   //                                                            .writedata
		output wire [0:0]  video_character_buffer_with_dma_0_avalon_char_buffer_slave_byteenable,  //                                                            .byteenable
		input  wire        video_character_buffer_with_dma_0_avalon_char_buffer_slave_waitrequest, //                                                            .waitrequest
		output wire        video_character_buffer_with_dma_0_avalon_char_buffer_slave_chipselect,  //                                                            .chipselect
		output wire [0:0]  video_character_buffer_with_dma_0_avalon_char_control_slave_address,    // video_character_buffer_with_dma_0_avalon_char_control_slave.address
		output wire        video_character_buffer_with_dma_0_avalon_char_control_slave_write,      //                                                            .write
		output wire        video_character_buffer_with_dma_0_avalon_char_control_slave_read,       //                                                            .read
		input  wire [31:0] video_character_buffer_with_dma_0_avalon_char_control_slave_readdata,   //                                                            .readdata
		output wire [31:0] video_character_buffer_with_dma_0_avalon_char_control_slave_writedata,  //                                                            .writedata
		output wire [3:0]  video_character_buffer_with_dma_0_avalon_char_control_slave_byteenable, //                                                            .byteenable
		output wire        video_character_buffer_with_dma_0_avalon_char_control_slave_chipselect, //                                                            .chipselect
		output wire [1:0]  video_pixel_buffer_dma_0_avalon_control_slave_address,                  //               video_pixel_buffer_dma_0_avalon_control_slave.address
		output wire        video_pixel_buffer_dma_0_avalon_control_slave_write,                    //                                                            .write
		output wire        video_pixel_buffer_dma_0_avalon_control_slave_read,                     //                                                            .read
		input  wire [31:0] video_pixel_buffer_dma_0_avalon_control_slave_readdata,                 //                                                            .readdata
		output wire [31:0] video_pixel_buffer_dma_0_avalon_control_slave_writedata,                //                                                            .writedata
		output wire [3:0]  video_pixel_buffer_dma_0_avalon_control_slave_byteenable                //                                                            .byteenable
	);

	wire          video_pixel_buffer_dma_0_avalon_pixel_dma_master_translator_avalon_universal_master_0_waitrequest;                          // video_pixel_buffer_dma_0_avalon_pixel_dma_master_agent:av_waitrequest -> video_pixel_buffer_dma_0_avalon_pixel_dma_master_translator:uav_waitrequest
	wire   [15:0] video_pixel_buffer_dma_0_avalon_pixel_dma_master_translator_avalon_universal_master_0_readdata;                             // video_pixel_buffer_dma_0_avalon_pixel_dma_master_agent:av_readdata -> video_pixel_buffer_dma_0_avalon_pixel_dma_master_translator:uav_readdata
	wire          video_pixel_buffer_dma_0_avalon_pixel_dma_master_translator_avalon_universal_master_0_debugaccess;                          // video_pixel_buffer_dma_0_avalon_pixel_dma_master_translator:uav_debugaccess -> video_pixel_buffer_dma_0_avalon_pixel_dma_master_agent:av_debugaccess
	wire   [31:0] video_pixel_buffer_dma_0_avalon_pixel_dma_master_translator_avalon_universal_master_0_address;                              // video_pixel_buffer_dma_0_avalon_pixel_dma_master_translator:uav_address -> video_pixel_buffer_dma_0_avalon_pixel_dma_master_agent:av_address
	wire          video_pixel_buffer_dma_0_avalon_pixel_dma_master_translator_avalon_universal_master_0_read;                                 // video_pixel_buffer_dma_0_avalon_pixel_dma_master_translator:uav_read -> video_pixel_buffer_dma_0_avalon_pixel_dma_master_agent:av_read
	wire    [1:0] video_pixel_buffer_dma_0_avalon_pixel_dma_master_translator_avalon_universal_master_0_byteenable;                           // video_pixel_buffer_dma_0_avalon_pixel_dma_master_translator:uav_byteenable -> video_pixel_buffer_dma_0_avalon_pixel_dma_master_agent:av_byteenable
	wire          video_pixel_buffer_dma_0_avalon_pixel_dma_master_translator_avalon_universal_master_0_readdatavalid;                        // video_pixel_buffer_dma_0_avalon_pixel_dma_master_agent:av_readdatavalid -> video_pixel_buffer_dma_0_avalon_pixel_dma_master_translator:uav_readdatavalid
	wire          video_pixel_buffer_dma_0_avalon_pixel_dma_master_translator_avalon_universal_master_0_lock;                                 // video_pixel_buffer_dma_0_avalon_pixel_dma_master_translator:uav_lock -> video_pixel_buffer_dma_0_avalon_pixel_dma_master_agent:av_lock
	wire          video_pixel_buffer_dma_0_avalon_pixel_dma_master_translator_avalon_universal_master_0_write;                                // video_pixel_buffer_dma_0_avalon_pixel_dma_master_translator:uav_write -> video_pixel_buffer_dma_0_avalon_pixel_dma_master_agent:av_write
	wire   [15:0] video_pixel_buffer_dma_0_avalon_pixel_dma_master_translator_avalon_universal_master_0_writedata;                            // video_pixel_buffer_dma_0_avalon_pixel_dma_master_translator:uav_writedata -> video_pixel_buffer_dma_0_avalon_pixel_dma_master_agent:av_writedata
	wire    [1:0] video_pixel_buffer_dma_0_avalon_pixel_dma_master_translator_avalon_universal_master_0_burstcount;                           // video_pixel_buffer_dma_0_avalon_pixel_dma_master_translator:uav_burstcount -> video_pixel_buffer_dma_0_avalon_pixel_dma_master_agent:av_burstcount
	wire          rsp_mux_src_valid;                                                                                                          // rsp_mux:src_valid -> video_pixel_buffer_dma_0_avalon_pixel_dma_master_agent:rp_valid
	wire   [91:0] rsp_mux_src_data;                                                                                                           // rsp_mux:src_data -> video_pixel_buffer_dma_0_avalon_pixel_dma_master_agent:rp_data
	wire          rsp_mux_src_ready;                                                                                                          // video_pixel_buffer_dma_0_avalon_pixel_dma_master_agent:rp_ready -> rsp_mux:src_ready
	wire   [11:0] rsp_mux_src_channel;                                                                                                        // rsp_mux:src_channel -> video_pixel_buffer_dma_0_avalon_pixel_dma_master_agent:rp_channel
	wire          rsp_mux_src_startofpacket;                                                                                                  // rsp_mux:src_startofpacket -> video_pixel_buffer_dma_0_avalon_pixel_dma_master_agent:rp_startofpacket
	wire          rsp_mux_src_endofpacket;                                                                                                    // rsp_mux:src_endofpacket -> video_pixel_buffer_dma_0_avalon_pixel_dma_master_agent:rp_endofpacket
	wire          nios2_qsys_0_data_master_translator_avalon_universal_master_0_waitrequest;                                                  // nios2_qsys_0_data_master_agent:av_waitrequest -> nios2_qsys_0_data_master_translator:uav_waitrequest
	wire   [31:0] nios2_qsys_0_data_master_translator_avalon_universal_master_0_readdata;                                                     // nios2_qsys_0_data_master_agent:av_readdata -> nios2_qsys_0_data_master_translator:uav_readdata
	wire          nios2_qsys_0_data_master_translator_avalon_universal_master_0_debugaccess;                                                  // nios2_qsys_0_data_master_translator:uav_debugaccess -> nios2_qsys_0_data_master_agent:av_debugaccess
	wire   [31:0] nios2_qsys_0_data_master_translator_avalon_universal_master_0_address;                                                      // nios2_qsys_0_data_master_translator:uav_address -> nios2_qsys_0_data_master_agent:av_address
	wire          nios2_qsys_0_data_master_translator_avalon_universal_master_0_read;                                                         // nios2_qsys_0_data_master_translator:uav_read -> nios2_qsys_0_data_master_agent:av_read
	wire    [3:0] nios2_qsys_0_data_master_translator_avalon_universal_master_0_byteenable;                                                   // nios2_qsys_0_data_master_translator:uav_byteenable -> nios2_qsys_0_data_master_agent:av_byteenable
	wire          nios2_qsys_0_data_master_translator_avalon_universal_master_0_readdatavalid;                                                // nios2_qsys_0_data_master_agent:av_readdatavalid -> nios2_qsys_0_data_master_translator:uav_readdatavalid
	wire          nios2_qsys_0_data_master_translator_avalon_universal_master_0_lock;                                                         // nios2_qsys_0_data_master_translator:uav_lock -> nios2_qsys_0_data_master_agent:av_lock
	wire          nios2_qsys_0_data_master_translator_avalon_universal_master_0_write;                                                        // nios2_qsys_0_data_master_translator:uav_write -> nios2_qsys_0_data_master_agent:av_write
	wire   [31:0] nios2_qsys_0_data_master_translator_avalon_universal_master_0_writedata;                                                    // nios2_qsys_0_data_master_translator:uav_writedata -> nios2_qsys_0_data_master_agent:av_writedata
	wire    [2:0] nios2_qsys_0_data_master_translator_avalon_universal_master_0_burstcount;                                                   // nios2_qsys_0_data_master_translator:uav_burstcount -> nios2_qsys_0_data_master_agent:av_burstcount
	wire          nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_waitrequest;                                           // nios2_qsys_0_instruction_master_agent:av_waitrequest -> nios2_qsys_0_instruction_master_translator:uav_waitrequest
	wire   [31:0] nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_readdata;                                              // nios2_qsys_0_instruction_master_agent:av_readdata -> nios2_qsys_0_instruction_master_translator:uav_readdata
	wire          nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_debugaccess;                                           // nios2_qsys_0_instruction_master_translator:uav_debugaccess -> nios2_qsys_0_instruction_master_agent:av_debugaccess
	wire   [31:0] nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_address;                                               // nios2_qsys_0_instruction_master_translator:uav_address -> nios2_qsys_0_instruction_master_agent:av_address
	wire          nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_read;                                                  // nios2_qsys_0_instruction_master_translator:uav_read -> nios2_qsys_0_instruction_master_agent:av_read
	wire    [3:0] nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_byteenable;                                            // nios2_qsys_0_instruction_master_translator:uav_byteenable -> nios2_qsys_0_instruction_master_agent:av_byteenable
	wire          nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_readdatavalid;                                         // nios2_qsys_0_instruction_master_agent:av_readdatavalid -> nios2_qsys_0_instruction_master_translator:uav_readdatavalid
	wire          nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_lock;                                                  // nios2_qsys_0_instruction_master_translator:uav_lock -> nios2_qsys_0_instruction_master_agent:av_lock
	wire          nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_write;                                                 // nios2_qsys_0_instruction_master_translator:uav_write -> nios2_qsys_0_instruction_master_agent:av_write
	wire   [31:0] nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_writedata;                                             // nios2_qsys_0_instruction_master_translator:uav_writedata -> nios2_qsys_0_instruction_master_agent:av_writedata
	wire    [2:0] nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_burstcount;                                            // nios2_qsys_0_instruction_master_translator:uav_burstcount -> nios2_qsys_0_instruction_master_agent:av_burstcount
	wire   [15:0] sram_0_avalon_sram_slave_agent_m0_readdata;                                                                                 // sram_0_avalon_sram_slave_translator:uav_readdata -> sram_0_avalon_sram_slave_agent:m0_readdata
	wire          sram_0_avalon_sram_slave_agent_m0_waitrequest;                                                                              // sram_0_avalon_sram_slave_translator:uav_waitrequest -> sram_0_avalon_sram_slave_agent:m0_waitrequest
	wire          sram_0_avalon_sram_slave_agent_m0_debugaccess;                                                                              // sram_0_avalon_sram_slave_agent:m0_debugaccess -> sram_0_avalon_sram_slave_translator:uav_debugaccess
	wire   [31:0] sram_0_avalon_sram_slave_agent_m0_address;                                                                                  // sram_0_avalon_sram_slave_agent:m0_address -> sram_0_avalon_sram_slave_translator:uav_address
	wire    [1:0] sram_0_avalon_sram_slave_agent_m0_byteenable;                                                                               // sram_0_avalon_sram_slave_agent:m0_byteenable -> sram_0_avalon_sram_slave_translator:uav_byteenable
	wire          sram_0_avalon_sram_slave_agent_m0_read;                                                                                     // sram_0_avalon_sram_slave_agent:m0_read -> sram_0_avalon_sram_slave_translator:uav_read
	wire          sram_0_avalon_sram_slave_agent_m0_readdatavalid;                                                                            // sram_0_avalon_sram_slave_translator:uav_readdatavalid -> sram_0_avalon_sram_slave_agent:m0_readdatavalid
	wire          sram_0_avalon_sram_slave_agent_m0_lock;                                                                                     // sram_0_avalon_sram_slave_agent:m0_lock -> sram_0_avalon_sram_slave_translator:uav_lock
	wire   [15:0] sram_0_avalon_sram_slave_agent_m0_writedata;                                                                                // sram_0_avalon_sram_slave_agent:m0_writedata -> sram_0_avalon_sram_slave_translator:uav_writedata
	wire          sram_0_avalon_sram_slave_agent_m0_write;                                                                                    // sram_0_avalon_sram_slave_agent:m0_write -> sram_0_avalon_sram_slave_translator:uav_write
	wire    [1:0] sram_0_avalon_sram_slave_agent_m0_burstcount;                                                                               // sram_0_avalon_sram_slave_agent:m0_burstcount -> sram_0_avalon_sram_slave_translator:uav_burstcount
	wire          sram_0_avalon_sram_slave_agent_rf_source_valid;                                                                             // sram_0_avalon_sram_slave_agent:rf_source_valid -> sram_0_avalon_sram_slave_agent_rsp_fifo:in_valid
	wire   [92:0] sram_0_avalon_sram_slave_agent_rf_source_data;                                                                              // sram_0_avalon_sram_slave_agent:rf_source_data -> sram_0_avalon_sram_slave_agent_rsp_fifo:in_data
	wire          sram_0_avalon_sram_slave_agent_rf_source_ready;                                                                             // sram_0_avalon_sram_slave_agent_rsp_fifo:in_ready -> sram_0_avalon_sram_slave_agent:rf_source_ready
	wire          sram_0_avalon_sram_slave_agent_rf_source_startofpacket;                                                                     // sram_0_avalon_sram_slave_agent:rf_source_startofpacket -> sram_0_avalon_sram_slave_agent_rsp_fifo:in_startofpacket
	wire          sram_0_avalon_sram_slave_agent_rf_source_endofpacket;                                                                       // sram_0_avalon_sram_slave_agent:rf_source_endofpacket -> sram_0_avalon_sram_slave_agent_rsp_fifo:in_endofpacket
	wire          sram_0_avalon_sram_slave_agent_rsp_fifo_out_valid;                                                                          // sram_0_avalon_sram_slave_agent_rsp_fifo:out_valid -> sram_0_avalon_sram_slave_agent:rf_sink_valid
	wire   [92:0] sram_0_avalon_sram_slave_agent_rsp_fifo_out_data;                                                                           // sram_0_avalon_sram_slave_agent_rsp_fifo:out_data -> sram_0_avalon_sram_slave_agent:rf_sink_data
	wire          sram_0_avalon_sram_slave_agent_rsp_fifo_out_ready;                                                                          // sram_0_avalon_sram_slave_agent:rf_sink_ready -> sram_0_avalon_sram_slave_agent_rsp_fifo:out_ready
	wire          sram_0_avalon_sram_slave_agent_rsp_fifo_out_startofpacket;                                                                  // sram_0_avalon_sram_slave_agent_rsp_fifo:out_startofpacket -> sram_0_avalon_sram_slave_agent:rf_sink_startofpacket
	wire          sram_0_avalon_sram_slave_agent_rsp_fifo_out_endofpacket;                                                                    // sram_0_avalon_sram_slave_agent_rsp_fifo:out_endofpacket -> sram_0_avalon_sram_slave_agent:rf_sink_endofpacket
	wire          sram_0_avalon_sram_slave_agent_rdata_fifo_src_valid;                                                                        // sram_0_avalon_sram_slave_agent:rdata_fifo_src_valid -> sram_0_avalon_sram_slave_agent_rdata_fifo:in_valid
	wire   [17:0] sram_0_avalon_sram_slave_agent_rdata_fifo_src_data;                                                                         // sram_0_avalon_sram_slave_agent:rdata_fifo_src_data -> sram_0_avalon_sram_slave_agent_rdata_fifo:in_data
	wire          sram_0_avalon_sram_slave_agent_rdata_fifo_src_ready;                                                                        // sram_0_avalon_sram_slave_agent_rdata_fifo:in_ready -> sram_0_avalon_sram_slave_agent:rdata_fifo_src_ready
	wire    [7:0] video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_m0_readdata;                                               // video_character_buffer_with_dma_0_avalon_char_buffer_slave_translator:uav_readdata -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:m0_readdata
	wire          video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_m0_waitrequest;                                            // video_character_buffer_with_dma_0_avalon_char_buffer_slave_translator:uav_waitrequest -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:m0_waitrequest
	wire          video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_m0_debugaccess;                                            // video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:m0_debugaccess -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_translator:uav_debugaccess
	wire   [31:0] video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_m0_address;                                                // video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:m0_address -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_translator:uav_address
	wire    [0:0] video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_m0_byteenable;                                             // video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:m0_byteenable -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_translator:uav_byteenable
	wire          video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_m0_read;                                                   // video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:m0_read -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_translator:uav_read
	wire          video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_m0_readdatavalid;                                          // video_character_buffer_with_dma_0_avalon_char_buffer_slave_translator:uav_readdatavalid -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:m0_readdatavalid
	wire          video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_m0_lock;                                                   // video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:m0_lock -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_translator:uav_lock
	wire    [7:0] video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_m0_writedata;                                              // video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:m0_writedata -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_translator:uav_writedata
	wire          video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_m0_write;                                                  // video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:m0_write -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_translator:uav_write
	wire    [0:0] video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_m0_burstcount;                                             // video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:m0_burstcount -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_translator:uav_burstcount
	wire          video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rf_source_valid;                                           // video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:rf_source_valid -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rsp_fifo:in_valid
	wire   [83:0] video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rf_source_data;                                            // video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:rf_source_data -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rsp_fifo:in_data
	wire          video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rf_source_ready;                                           // video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rsp_fifo:in_ready -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:rf_source_ready
	wire          video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rf_source_startofpacket;                                   // video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:rf_source_startofpacket -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rsp_fifo:in_startofpacket
	wire          video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rf_source_endofpacket;                                     // video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:rf_source_endofpacket -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rsp_fifo:in_endofpacket
	wire          video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rsp_fifo_out_valid;                                        // video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rsp_fifo:out_valid -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:rf_sink_valid
	wire   [83:0] video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rsp_fifo_out_data;                                         // video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rsp_fifo:out_data -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:rf_sink_data
	wire          video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rsp_fifo_out_ready;                                        // video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:rf_sink_ready -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rsp_fifo:out_ready
	wire          video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rsp_fifo_out_startofpacket;                                // video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rsp_fifo:out_startofpacket -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:rf_sink_startofpacket
	wire          video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rsp_fifo_out_endofpacket;                                  // video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rsp_fifo:out_endofpacket -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:rf_sink_endofpacket
	wire   [31:0] video_character_buffer_with_dma_0_avalon_char_control_slave_agent_m0_readdata;                                              // video_character_buffer_with_dma_0_avalon_char_control_slave_translator:uav_readdata -> video_character_buffer_with_dma_0_avalon_char_control_slave_agent:m0_readdata
	wire          video_character_buffer_with_dma_0_avalon_char_control_slave_agent_m0_waitrequest;                                           // video_character_buffer_with_dma_0_avalon_char_control_slave_translator:uav_waitrequest -> video_character_buffer_with_dma_0_avalon_char_control_slave_agent:m0_waitrequest
	wire          video_character_buffer_with_dma_0_avalon_char_control_slave_agent_m0_debugaccess;                                           // video_character_buffer_with_dma_0_avalon_char_control_slave_agent:m0_debugaccess -> video_character_buffer_with_dma_0_avalon_char_control_slave_translator:uav_debugaccess
	wire   [31:0] video_character_buffer_with_dma_0_avalon_char_control_slave_agent_m0_address;                                               // video_character_buffer_with_dma_0_avalon_char_control_slave_agent:m0_address -> video_character_buffer_with_dma_0_avalon_char_control_slave_translator:uav_address
	wire    [3:0] video_character_buffer_with_dma_0_avalon_char_control_slave_agent_m0_byteenable;                                            // video_character_buffer_with_dma_0_avalon_char_control_slave_agent:m0_byteenable -> video_character_buffer_with_dma_0_avalon_char_control_slave_translator:uav_byteenable
	wire          video_character_buffer_with_dma_0_avalon_char_control_slave_agent_m0_read;                                                  // video_character_buffer_with_dma_0_avalon_char_control_slave_agent:m0_read -> video_character_buffer_with_dma_0_avalon_char_control_slave_translator:uav_read
	wire          video_character_buffer_with_dma_0_avalon_char_control_slave_agent_m0_readdatavalid;                                         // video_character_buffer_with_dma_0_avalon_char_control_slave_translator:uav_readdatavalid -> video_character_buffer_with_dma_0_avalon_char_control_slave_agent:m0_readdatavalid
	wire          video_character_buffer_with_dma_0_avalon_char_control_slave_agent_m0_lock;                                                  // video_character_buffer_with_dma_0_avalon_char_control_slave_agent:m0_lock -> video_character_buffer_with_dma_0_avalon_char_control_slave_translator:uav_lock
	wire   [31:0] video_character_buffer_with_dma_0_avalon_char_control_slave_agent_m0_writedata;                                             // video_character_buffer_with_dma_0_avalon_char_control_slave_agent:m0_writedata -> video_character_buffer_with_dma_0_avalon_char_control_slave_translator:uav_writedata
	wire          video_character_buffer_with_dma_0_avalon_char_control_slave_agent_m0_write;                                                 // video_character_buffer_with_dma_0_avalon_char_control_slave_agent:m0_write -> video_character_buffer_with_dma_0_avalon_char_control_slave_translator:uav_write
	wire    [2:0] video_character_buffer_with_dma_0_avalon_char_control_slave_agent_m0_burstcount;                                            // video_character_buffer_with_dma_0_avalon_char_control_slave_agent:m0_burstcount -> video_character_buffer_with_dma_0_avalon_char_control_slave_translator:uav_burstcount
	wire          video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rf_source_valid;                                          // video_character_buffer_with_dma_0_avalon_char_control_slave_agent:rf_source_valid -> video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rsp_fifo:in_valid
	wire  [110:0] video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rf_source_data;                                           // video_character_buffer_with_dma_0_avalon_char_control_slave_agent:rf_source_data -> video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rsp_fifo:in_data
	wire          video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rf_source_ready;                                          // video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rsp_fifo:in_ready -> video_character_buffer_with_dma_0_avalon_char_control_slave_agent:rf_source_ready
	wire          video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rf_source_startofpacket;                                  // video_character_buffer_with_dma_0_avalon_char_control_slave_agent:rf_source_startofpacket -> video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rsp_fifo:in_startofpacket
	wire          video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rf_source_endofpacket;                                    // video_character_buffer_with_dma_0_avalon_char_control_slave_agent:rf_source_endofpacket -> video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rsp_fifo:in_endofpacket
	wire          video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rsp_fifo_out_valid;                                       // video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rsp_fifo:out_valid -> video_character_buffer_with_dma_0_avalon_char_control_slave_agent:rf_sink_valid
	wire  [110:0] video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rsp_fifo_out_data;                                        // video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rsp_fifo:out_data -> video_character_buffer_with_dma_0_avalon_char_control_slave_agent:rf_sink_data
	wire          video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rsp_fifo_out_ready;                                       // video_character_buffer_with_dma_0_avalon_char_control_slave_agent:rf_sink_ready -> video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rsp_fifo:out_ready
	wire          video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rsp_fifo_out_startofpacket;                               // video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rsp_fifo:out_startofpacket -> video_character_buffer_with_dma_0_avalon_char_control_slave_agent:rf_sink_startofpacket
	wire          video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rsp_fifo_out_endofpacket;                                 // video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rsp_fifo:out_endofpacket -> video_character_buffer_with_dma_0_avalon_char_control_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_002_src_valid;                                                                                                      // cmd_mux_002:src_valid -> video_character_buffer_with_dma_0_avalon_char_control_slave_agent:cp_valid
	wire  [109:0] cmd_mux_002_src_data;                                                                                                       // cmd_mux_002:src_data -> video_character_buffer_with_dma_0_avalon_char_control_slave_agent:cp_data
	wire          cmd_mux_002_src_ready;                                                                                                      // video_character_buffer_with_dma_0_avalon_char_control_slave_agent:cp_ready -> cmd_mux_002:src_ready
	wire   [11:0] cmd_mux_002_src_channel;                                                                                                    // cmd_mux_002:src_channel -> video_character_buffer_with_dma_0_avalon_char_control_slave_agent:cp_channel
	wire          cmd_mux_002_src_startofpacket;                                                                                              // cmd_mux_002:src_startofpacket -> video_character_buffer_with_dma_0_avalon_char_control_slave_agent:cp_startofpacket
	wire          cmd_mux_002_src_endofpacket;                                                                                                // cmd_mux_002:src_endofpacket -> video_character_buffer_with_dma_0_avalon_char_control_slave_agent:cp_endofpacket
	wire   [31:0] video_pixel_buffer_dma_0_avalon_control_slave_agent_m0_readdata;                                                            // video_pixel_buffer_dma_0_avalon_control_slave_translator:uav_readdata -> video_pixel_buffer_dma_0_avalon_control_slave_agent:m0_readdata
	wire          video_pixel_buffer_dma_0_avalon_control_slave_agent_m0_waitrequest;                                                         // video_pixel_buffer_dma_0_avalon_control_slave_translator:uav_waitrequest -> video_pixel_buffer_dma_0_avalon_control_slave_agent:m0_waitrequest
	wire          video_pixel_buffer_dma_0_avalon_control_slave_agent_m0_debugaccess;                                                         // video_pixel_buffer_dma_0_avalon_control_slave_agent:m0_debugaccess -> video_pixel_buffer_dma_0_avalon_control_slave_translator:uav_debugaccess
	wire   [31:0] video_pixel_buffer_dma_0_avalon_control_slave_agent_m0_address;                                                             // video_pixel_buffer_dma_0_avalon_control_slave_agent:m0_address -> video_pixel_buffer_dma_0_avalon_control_slave_translator:uav_address
	wire    [3:0] video_pixel_buffer_dma_0_avalon_control_slave_agent_m0_byteenable;                                                          // video_pixel_buffer_dma_0_avalon_control_slave_agent:m0_byteenable -> video_pixel_buffer_dma_0_avalon_control_slave_translator:uav_byteenable
	wire          video_pixel_buffer_dma_0_avalon_control_slave_agent_m0_read;                                                                // video_pixel_buffer_dma_0_avalon_control_slave_agent:m0_read -> video_pixel_buffer_dma_0_avalon_control_slave_translator:uav_read
	wire          video_pixel_buffer_dma_0_avalon_control_slave_agent_m0_readdatavalid;                                                       // video_pixel_buffer_dma_0_avalon_control_slave_translator:uav_readdatavalid -> video_pixel_buffer_dma_0_avalon_control_slave_agent:m0_readdatavalid
	wire          video_pixel_buffer_dma_0_avalon_control_slave_agent_m0_lock;                                                                // video_pixel_buffer_dma_0_avalon_control_slave_agent:m0_lock -> video_pixel_buffer_dma_0_avalon_control_slave_translator:uav_lock
	wire   [31:0] video_pixel_buffer_dma_0_avalon_control_slave_agent_m0_writedata;                                                           // video_pixel_buffer_dma_0_avalon_control_slave_agent:m0_writedata -> video_pixel_buffer_dma_0_avalon_control_slave_translator:uav_writedata
	wire          video_pixel_buffer_dma_0_avalon_control_slave_agent_m0_write;                                                               // video_pixel_buffer_dma_0_avalon_control_slave_agent:m0_write -> video_pixel_buffer_dma_0_avalon_control_slave_translator:uav_write
	wire    [2:0] video_pixel_buffer_dma_0_avalon_control_slave_agent_m0_burstcount;                                                          // video_pixel_buffer_dma_0_avalon_control_slave_agent:m0_burstcount -> video_pixel_buffer_dma_0_avalon_control_slave_translator:uav_burstcount
	wire          video_pixel_buffer_dma_0_avalon_control_slave_agent_rf_source_valid;                                                        // video_pixel_buffer_dma_0_avalon_control_slave_agent:rf_source_valid -> video_pixel_buffer_dma_0_avalon_control_slave_agent_rsp_fifo:in_valid
	wire  [110:0] video_pixel_buffer_dma_0_avalon_control_slave_agent_rf_source_data;                                                         // video_pixel_buffer_dma_0_avalon_control_slave_agent:rf_source_data -> video_pixel_buffer_dma_0_avalon_control_slave_agent_rsp_fifo:in_data
	wire          video_pixel_buffer_dma_0_avalon_control_slave_agent_rf_source_ready;                                                        // video_pixel_buffer_dma_0_avalon_control_slave_agent_rsp_fifo:in_ready -> video_pixel_buffer_dma_0_avalon_control_slave_agent:rf_source_ready
	wire          video_pixel_buffer_dma_0_avalon_control_slave_agent_rf_source_startofpacket;                                                // video_pixel_buffer_dma_0_avalon_control_slave_agent:rf_source_startofpacket -> video_pixel_buffer_dma_0_avalon_control_slave_agent_rsp_fifo:in_startofpacket
	wire          video_pixel_buffer_dma_0_avalon_control_slave_agent_rf_source_endofpacket;                                                  // video_pixel_buffer_dma_0_avalon_control_slave_agent:rf_source_endofpacket -> video_pixel_buffer_dma_0_avalon_control_slave_agent_rsp_fifo:in_endofpacket
	wire          video_pixel_buffer_dma_0_avalon_control_slave_agent_rsp_fifo_out_valid;                                                     // video_pixel_buffer_dma_0_avalon_control_slave_agent_rsp_fifo:out_valid -> video_pixel_buffer_dma_0_avalon_control_slave_agent:rf_sink_valid
	wire  [110:0] video_pixel_buffer_dma_0_avalon_control_slave_agent_rsp_fifo_out_data;                                                      // video_pixel_buffer_dma_0_avalon_control_slave_agent_rsp_fifo:out_data -> video_pixel_buffer_dma_0_avalon_control_slave_agent:rf_sink_data
	wire          video_pixel_buffer_dma_0_avalon_control_slave_agent_rsp_fifo_out_ready;                                                     // video_pixel_buffer_dma_0_avalon_control_slave_agent:rf_sink_ready -> video_pixel_buffer_dma_0_avalon_control_slave_agent_rsp_fifo:out_ready
	wire          video_pixel_buffer_dma_0_avalon_control_slave_agent_rsp_fifo_out_startofpacket;                                             // video_pixel_buffer_dma_0_avalon_control_slave_agent_rsp_fifo:out_startofpacket -> video_pixel_buffer_dma_0_avalon_control_slave_agent:rf_sink_startofpacket
	wire          video_pixel_buffer_dma_0_avalon_control_slave_agent_rsp_fifo_out_endofpacket;                                               // video_pixel_buffer_dma_0_avalon_control_slave_agent_rsp_fifo:out_endofpacket -> video_pixel_buffer_dma_0_avalon_control_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_003_src_valid;                                                                                                      // cmd_mux_003:src_valid -> video_pixel_buffer_dma_0_avalon_control_slave_agent:cp_valid
	wire  [109:0] cmd_mux_003_src_data;                                                                                                       // cmd_mux_003:src_data -> video_pixel_buffer_dma_0_avalon_control_slave_agent:cp_data
	wire          cmd_mux_003_src_ready;                                                                                                      // video_pixel_buffer_dma_0_avalon_control_slave_agent:cp_ready -> cmd_mux_003:src_ready
	wire   [11:0] cmd_mux_003_src_channel;                                                                                                    // cmd_mux_003:src_channel -> video_pixel_buffer_dma_0_avalon_control_slave_agent:cp_channel
	wire          cmd_mux_003_src_startofpacket;                                                                                              // cmd_mux_003:src_startofpacket -> video_pixel_buffer_dma_0_avalon_control_slave_agent:cp_startofpacket
	wire          cmd_mux_003_src_endofpacket;                                                                                                // cmd_mux_003:src_endofpacket -> video_pixel_buffer_dma_0_avalon_control_slave_agent:cp_endofpacket
	wire   [31:0] jtag_uart_0_avalon_jtag_slave_agent_m0_readdata;                                                                            // jtag_uart_0_avalon_jtag_slave_translator:uav_readdata -> jtag_uart_0_avalon_jtag_slave_agent:m0_readdata
	wire          jtag_uart_0_avalon_jtag_slave_agent_m0_waitrequest;                                                                         // jtag_uart_0_avalon_jtag_slave_translator:uav_waitrequest -> jtag_uart_0_avalon_jtag_slave_agent:m0_waitrequest
	wire          jtag_uart_0_avalon_jtag_slave_agent_m0_debugaccess;                                                                         // jtag_uart_0_avalon_jtag_slave_agent:m0_debugaccess -> jtag_uart_0_avalon_jtag_slave_translator:uav_debugaccess
	wire   [31:0] jtag_uart_0_avalon_jtag_slave_agent_m0_address;                                                                             // jtag_uart_0_avalon_jtag_slave_agent:m0_address -> jtag_uart_0_avalon_jtag_slave_translator:uav_address
	wire    [3:0] jtag_uart_0_avalon_jtag_slave_agent_m0_byteenable;                                                                          // jtag_uart_0_avalon_jtag_slave_agent:m0_byteenable -> jtag_uart_0_avalon_jtag_slave_translator:uav_byteenable
	wire          jtag_uart_0_avalon_jtag_slave_agent_m0_read;                                                                                // jtag_uart_0_avalon_jtag_slave_agent:m0_read -> jtag_uart_0_avalon_jtag_slave_translator:uav_read
	wire          jtag_uart_0_avalon_jtag_slave_agent_m0_readdatavalid;                                                                       // jtag_uart_0_avalon_jtag_slave_translator:uav_readdatavalid -> jtag_uart_0_avalon_jtag_slave_agent:m0_readdatavalid
	wire          jtag_uart_0_avalon_jtag_slave_agent_m0_lock;                                                                                // jtag_uart_0_avalon_jtag_slave_agent:m0_lock -> jtag_uart_0_avalon_jtag_slave_translator:uav_lock
	wire   [31:0] jtag_uart_0_avalon_jtag_slave_agent_m0_writedata;                                                                           // jtag_uart_0_avalon_jtag_slave_agent:m0_writedata -> jtag_uart_0_avalon_jtag_slave_translator:uav_writedata
	wire          jtag_uart_0_avalon_jtag_slave_agent_m0_write;                                                                               // jtag_uart_0_avalon_jtag_slave_agent:m0_write -> jtag_uart_0_avalon_jtag_slave_translator:uav_write
	wire    [2:0] jtag_uart_0_avalon_jtag_slave_agent_m0_burstcount;                                                                          // jtag_uart_0_avalon_jtag_slave_agent:m0_burstcount -> jtag_uart_0_avalon_jtag_slave_translator:uav_burstcount
	wire          jtag_uart_0_avalon_jtag_slave_agent_rf_source_valid;                                                                        // jtag_uart_0_avalon_jtag_slave_agent:rf_source_valid -> jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:in_valid
	wire  [110:0] jtag_uart_0_avalon_jtag_slave_agent_rf_source_data;                                                                         // jtag_uart_0_avalon_jtag_slave_agent:rf_source_data -> jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:in_data
	wire          jtag_uart_0_avalon_jtag_slave_agent_rf_source_ready;                                                                        // jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:in_ready -> jtag_uart_0_avalon_jtag_slave_agent:rf_source_ready
	wire          jtag_uart_0_avalon_jtag_slave_agent_rf_source_startofpacket;                                                                // jtag_uart_0_avalon_jtag_slave_agent:rf_source_startofpacket -> jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:in_startofpacket
	wire          jtag_uart_0_avalon_jtag_slave_agent_rf_source_endofpacket;                                                                  // jtag_uart_0_avalon_jtag_slave_agent:rf_source_endofpacket -> jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:in_endofpacket
	wire          jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_valid;                                                                     // jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:out_valid -> jtag_uart_0_avalon_jtag_slave_agent:rf_sink_valid
	wire  [110:0] jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_data;                                                                      // jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:out_data -> jtag_uart_0_avalon_jtag_slave_agent:rf_sink_data
	wire          jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_ready;                                                                     // jtag_uart_0_avalon_jtag_slave_agent:rf_sink_ready -> jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:out_ready
	wire          jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket;                                                             // jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:out_startofpacket -> jtag_uart_0_avalon_jtag_slave_agent:rf_sink_startofpacket
	wire          jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket;                                                               // jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:out_endofpacket -> jtag_uart_0_avalon_jtag_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_004_src_valid;                                                                                                      // cmd_mux_004:src_valid -> jtag_uart_0_avalon_jtag_slave_agent:cp_valid
	wire  [109:0] cmd_mux_004_src_data;                                                                                                       // cmd_mux_004:src_data -> jtag_uart_0_avalon_jtag_slave_agent:cp_data
	wire          cmd_mux_004_src_ready;                                                                                                      // jtag_uart_0_avalon_jtag_slave_agent:cp_ready -> cmd_mux_004:src_ready
	wire   [11:0] cmd_mux_004_src_channel;                                                                                                    // cmd_mux_004:src_channel -> jtag_uart_0_avalon_jtag_slave_agent:cp_channel
	wire          cmd_mux_004_src_startofpacket;                                                                                              // cmd_mux_004:src_startofpacket -> jtag_uart_0_avalon_jtag_slave_agent:cp_startofpacket
	wire          cmd_mux_004_src_endofpacket;                                                                                                // cmd_mux_004:src_endofpacket -> jtag_uart_0_avalon_jtag_slave_agent:cp_endofpacket
	wire   [31:0] performance_counter_0_control_slave_agent_m0_readdata;                                                                      // performance_counter_0_control_slave_translator:uav_readdata -> performance_counter_0_control_slave_agent:m0_readdata
	wire          performance_counter_0_control_slave_agent_m0_waitrequest;                                                                   // performance_counter_0_control_slave_translator:uav_waitrequest -> performance_counter_0_control_slave_agent:m0_waitrequest
	wire          performance_counter_0_control_slave_agent_m0_debugaccess;                                                                   // performance_counter_0_control_slave_agent:m0_debugaccess -> performance_counter_0_control_slave_translator:uav_debugaccess
	wire   [31:0] performance_counter_0_control_slave_agent_m0_address;                                                                       // performance_counter_0_control_slave_agent:m0_address -> performance_counter_0_control_slave_translator:uav_address
	wire    [3:0] performance_counter_0_control_slave_agent_m0_byteenable;                                                                    // performance_counter_0_control_slave_agent:m0_byteenable -> performance_counter_0_control_slave_translator:uav_byteenable
	wire          performance_counter_0_control_slave_agent_m0_read;                                                                          // performance_counter_0_control_slave_agent:m0_read -> performance_counter_0_control_slave_translator:uav_read
	wire          performance_counter_0_control_slave_agent_m0_readdatavalid;                                                                 // performance_counter_0_control_slave_translator:uav_readdatavalid -> performance_counter_0_control_slave_agent:m0_readdatavalid
	wire          performance_counter_0_control_slave_agent_m0_lock;                                                                          // performance_counter_0_control_slave_agent:m0_lock -> performance_counter_0_control_slave_translator:uav_lock
	wire   [31:0] performance_counter_0_control_slave_agent_m0_writedata;                                                                     // performance_counter_0_control_slave_agent:m0_writedata -> performance_counter_0_control_slave_translator:uav_writedata
	wire          performance_counter_0_control_slave_agent_m0_write;                                                                         // performance_counter_0_control_slave_agent:m0_write -> performance_counter_0_control_slave_translator:uav_write
	wire    [2:0] performance_counter_0_control_slave_agent_m0_burstcount;                                                                    // performance_counter_0_control_slave_agent:m0_burstcount -> performance_counter_0_control_slave_translator:uav_burstcount
	wire          performance_counter_0_control_slave_agent_rf_source_valid;                                                                  // performance_counter_0_control_slave_agent:rf_source_valid -> performance_counter_0_control_slave_agent_rsp_fifo:in_valid
	wire  [110:0] performance_counter_0_control_slave_agent_rf_source_data;                                                                   // performance_counter_0_control_slave_agent:rf_source_data -> performance_counter_0_control_slave_agent_rsp_fifo:in_data
	wire          performance_counter_0_control_slave_agent_rf_source_ready;                                                                  // performance_counter_0_control_slave_agent_rsp_fifo:in_ready -> performance_counter_0_control_slave_agent:rf_source_ready
	wire          performance_counter_0_control_slave_agent_rf_source_startofpacket;                                                          // performance_counter_0_control_slave_agent:rf_source_startofpacket -> performance_counter_0_control_slave_agent_rsp_fifo:in_startofpacket
	wire          performance_counter_0_control_slave_agent_rf_source_endofpacket;                                                            // performance_counter_0_control_slave_agent:rf_source_endofpacket -> performance_counter_0_control_slave_agent_rsp_fifo:in_endofpacket
	wire          performance_counter_0_control_slave_agent_rsp_fifo_out_valid;                                                               // performance_counter_0_control_slave_agent_rsp_fifo:out_valid -> performance_counter_0_control_slave_agent:rf_sink_valid
	wire  [110:0] performance_counter_0_control_slave_agent_rsp_fifo_out_data;                                                                // performance_counter_0_control_slave_agent_rsp_fifo:out_data -> performance_counter_0_control_slave_agent:rf_sink_data
	wire          performance_counter_0_control_slave_agent_rsp_fifo_out_ready;                                                               // performance_counter_0_control_slave_agent:rf_sink_ready -> performance_counter_0_control_slave_agent_rsp_fifo:out_ready
	wire          performance_counter_0_control_slave_agent_rsp_fifo_out_startofpacket;                                                       // performance_counter_0_control_slave_agent_rsp_fifo:out_startofpacket -> performance_counter_0_control_slave_agent:rf_sink_startofpacket
	wire          performance_counter_0_control_slave_agent_rsp_fifo_out_endofpacket;                                                         // performance_counter_0_control_slave_agent_rsp_fifo:out_endofpacket -> performance_counter_0_control_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_005_src_valid;                                                                                                      // cmd_mux_005:src_valid -> performance_counter_0_control_slave_agent:cp_valid
	wire  [109:0] cmd_mux_005_src_data;                                                                                                       // cmd_mux_005:src_data -> performance_counter_0_control_slave_agent:cp_data
	wire          cmd_mux_005_src_ready;                                                                                                      // performance_counter_0_control_slave_agent:cp_ready -> cmd_mux_005:src_ready
	wire   [11:0] cmd_mux_005_src_channel;                                                                                                    // cmd_mux_005:src_channel -> performance_counter_0_control_slave_agent:cp_channel
	wire          cmd_mux_005_src_startofpacket;                                                                                              // cmd_mux_005:src_startofpacket -> performance_counter_0_control_slave_agent:cp_startofpacket
	wire          cmd_mux_005_src_endofpacket;                                                                                                // cmd_mux_005:src_endofpacket -> performance_counter_0_control_slave_agent:cp_endofpacket
	wire   [31:0] nios2_qsys_0_jtag_debug_module_agent_m0_readdata;                                                                           // nios2_qsys_0_jtag_debug_module_translator:uav_readdata -> nios2_qsys_0_jtag_debug_module_agent:m0_readdata
	wire          nios2_qsys_0_jtag_debug_module_agent_m0_waitrequest;                                                                        // nios2_qsys_0_jtag_debug_module_translator:uav_waitrequest -> nios2_qsys_0_jtag_debug_module_agent:m0_waitrequest
	wire          nios2_qsys_0_jtag_debug_module_agent_m0_debugaccess;                                                                        // nios2_qsys_0_jtag_debug_module_agent:m0_debugaccess -> nios2_qsys_0_jtag_debug_module_translator:uav_debugaccess
	wire   [31:0] nios2_qsys_0_jtag_debug_module_agent_m0_address;                                                                            // nios2_qsys_0_jtag_debug_module_agent:m0_address -> nios2_qsys_0_jtag_debug_module_translator:uav_address
	wire    [3:0] nios2_qsys_0_jtag_debug_module_agent_m0_byteenable;                                                                         // nios2_qsys_0_jtag_debug_module_agent:m0_byteenable -> nios2_qsys_0_jtag_debug_module_translator:uav_byteenable
	wire          nios2_qsys_0_jtag_debug_module_agent_m0_read;                                                                               // nios2_qsys_0_jtag_debug_module_agent:m0_read -> nios2_qsys_0_jtag_debug_module_translator:uav_read
	wire          nios2_qsys_0_jtag_debug_module_agent_m0_readdatavalid;                                                                      // nios2_qsys_0_jtag_debug_module_translator:uav_readdatavalid -> nios2_qsys_0_jtag_debug_module_agent:m0_readdatavalid
	wire          nios2_qsys_0_jtag_debug_module_agent_m0_lock;                                                                               // nios2_qsys_0_jtag_debug_module_agent:m0_lock -> nios2_qsys_0_jtag_debug_module_translator:uav_lock
	wire   [31:0] nios2_qsys_0_jtag_debug_module_agent_m0_writedata;                                                                          // nios2_qsys_0_jtag_debug_module_agent:m0_writedata -> nios2_qsys_0_jtag_debug_module_translator:uav_writedata
	wire          nios2_qsys_0_jtag_debug_module_agent_m0_write;                                                                              // nios2_qsys_0_jtag_debug_module_agent:m0_write -> nios2_qsys_0_jtag_debug_module_translator:uav_write
	wire    [2:0] nios2_qsys_0_jtag_debug_module_agent_m0_burstcount;                                                                         // nios2_qsys_0_jtag_debug_module_agent:m0_burstcount -> nios2_qsys_0_jtag_debug_module_translator:uav_burstcount
	wire          nios2_qsys_0_jtag_debug_module_agent_rf_source_valid;                                                                       // nios2_qsys_0_jtag_debug_module_agent:rf_source_valid -> nios2_qsys_0_jtag_debug_module_agent_rsp_fifo:in_valid
	wire  [110:0] nios2_qsys_0_jtag_debug_module_agent_rf_source_data;                                                                        // nios2_qsys_0_jtag_debug_module_agent:rf_source_data -> nios2_qsys_0_jtag_debug_module_agent_rsp_fifo:in_data
	wire          nios2_qsys_0_jtag_debug_module_agent_rf_source_ready;                                                                       // nios2_qsys_0_jtag_debug_module_agent_rsp_fifo:in_ready -> nios2_qsys_0_jtag_debug_module_agent:rf_source_ready
	wire          nios2_qsys_0_jtag_debug_module_agent_rf_source_startofpacket;                                                               // nios2_qsys_0_jtag_debug_module_agent:rf_source_startofpacket -> nios2_qsys_0_jtag_debug_module_agent_rsp_fifo:in_startofpacket
	wire          nios2_qsys_0_jtag_debug_module_agent_rf_source_endofpacket;                                                                 // nios2_qsys_0_jtag_debug_module_agent:rf_source_endofpacket -> nios2_qsys_0_jtag_debug_module_agent_rsp_fifo:in_endofpacket
	wire          nios2_qsys_0_jtag_debug_module_agent_rsp_fifo_out_valid;                                                                    // nios2_qsys_0_jtag_debug_module_agent_rsp_fifo:out_valid -> nios2_qsys_0_jtag_debug_module_agent:rf_sink_valid
	wire  [110:0] nios2_qsys_0_jtag_debug_module_agent_rsp_fifo_out_data;                                                                     // nios2_qsys_0_jtag_debug_module_agent_rsp_fifo:out_data -> nios2_qsys_0_jtag_debug_module_agent:rf_sink_data
	wire          nios2_qsys_0_jtag_debug_module_agent_rsp_fifo_out_ready;                                                                    // nios2_qsys_0_jtag_debug_module_agent:rf_sink_ready -> nios2_qsys_0_jtag_debug_module_agent_rsp_fifo:out_ready
	wire          nios2_qsys_0_jtag_debug_module_agent_rsp_fifo_out_startofpacket;                                                            // nios2_qsys_0_jtag_debug_module_agent_rsp_fifo:out_startofpacket -> nios2_qsys_0_jtag_debug_module_agent:rf_sink_startofpacket
	wire          nios2_qsys_0_jtag_debug_module_agent_rsp_fifo_out_endofpacket;                                                              // nios2_qsys_0_jtag_debug_module_agent_rsp_fifo:out_endofpacket -> nios2_qsys_0_jtag_debug_module_agent:rf_sink_endofpacket
	wire          cmd_mux_006_src_valid;                                                                                                      // cmd_mux_006:src_valid -> nios2_qsys_0_jtag_debug_module_agent:cp_valid
	wire  [109:0] cmd_mux_006_src_data;                                                                                                       // cmd_mux_006:src_data -> nios2_qsys_0_jtag_debug_module_agent:cp_data
	wire          cmd_mux_006_src_ready;                                                                                                      // nios2_qsys_0_jtag_debug_module_agent:cp_ready -> cmd_mux_006:src_ready
	wire   [11:0] cmd_mux_006_src_channel;                                                                                                    // cmd_mux_006:src_channel -> nios2_qsys_0_jtag_debug_module_agent:cp_channel
	wire          cmd_mux_006_src_startofpacket;                                                                                              // cmd_mux_006:src_startofpacket -> nios2_qsys_0_jtag_debug_module_agent:cp_startofpacket
	wire          cmd_mux_006_src_endofpacket;                                                                                                // cmd_mux_006:src_endofpacket -> nios2_qsys_0_jtag_debug_module_agent:cp_endofpacket
	wire   [31:0] new_sdram_controller_0_s1_agent_m0_readdata;                                                                                // new_sdram_controller_0_s1_translator:uav_readdata -> new_sdram_controller_0_s1_agent:m0_readdata
	wire          new_sdram_controller_0_s1_agent_m0_waitrequest;                                                                             // new_sdram_controller_0_s1_translator:uav_waitrequest -> new_sdram_controller_0_s1_agent:m0_waitrequest
	wire          new_sdram_controller_0_s1_agent_m0_debugaccess;                                                                             // new_sdram_controller_0_s1_agent:m0_debugaccess -> new_sdram_controller_0_s1_translator:uav_debugaccess
	wire   [31:0] new_sdram_controller_0_s1_agent_m0_address;                                                                                 // new_sdram_controller_0_s1_agent:m0_address -> new_sdram_controller_0_s1_translator:uav_address
	wire    [3:0] new_sdram_controller_0_s1_agent_m0_byteenable;                                                                              // new_sdram_controller_0_s1_agent:m0_byteenable -> new_sdram_controller_0_s1_translator:uav_byteenable
	wire          new_sdram_controller_0_s1_agent_m0_read;                                                                                    // new_sdram_controller_0_s1_agent:m0_read -> new_sdram_controller_0_s1_translator:uav_read
	wire          new_sdram_controller_0_s1_agent_m0_readdatavalid;                                                                           // new_sdram_controller_0_s1_translator:uav_readdatavalid -> new_sdram_controller_0_s1_agent:m0_readdatavalid
	wire          new_sdram_controller_0_s1_agent_m0_lock;                                                                                    // new_sdram_controller_0_s1_agent:m0_lock -> new_sdram_controller_0_s1_translator:uav_lock
	wire   [31:0] new_sdram_controller_0_s1_agent_m0_writedata;                                                                               // new_sdram_controller_0_s1_agent:m0_writedata -> new_sdram_controller_0_s1_translator:uav_writedata
	wire          new_sdram_controller_0_s1_agent_m0_write;                                                                                   // new_sdram_controller_0_s1_agent:m0_write -> new_sdram_controller_0_s1_translator:uav_write
	wire    [2:0] new_sdram_controller_0_s1_agent_m0_burstcount;                                                                              // new_sdram_controller_0_s1_agent:m0_burstcount -> new_sdram_controller_0_s1_translator:uav_burstcount
	wire          new_sdram_controller_0_s1_agent_rf_source_valid;                                                                            // new_sdram_controller_0_s1_agent:rf_source_valid -> new_sdram_controller_0_s1_agent_rsp_fifo:in_valid
	wire  [110:0] new_sdram_controller_0_s1_agent_rf_source_data;                                                                             // new_sdram_controller_0_s1_agent:rf_source_data -> new_sdram_controller_0_s1_agent_rsp_fifo:in_data
	wire          new_sdram_controller_0_s1_agent_rf_source_ready;                                                                            // new_sdram_controller_0_s1_agent_rsp_fifo:in_ready -> new_sdram_controller_0_s1_agent:rf_source_ready
	wire          new_sdram_controller_0_s1_agent_rf_source_startofpacket;                                                                    // new_sdram_controller_0_s1_agent:rf_source_startofpacket -> new_sdram_controller_0_s1_agent_rsp_fifo:in_startofpacket
	wire          new_sdram_controller_0_s1_agent_rf_source_endofpacket;                                                                      // new_sdram_controller_0_s1_agent:rf_source_endofpacket -> new_sdram_controller_0_s1_agent_rsp_fifo:in_endofpacket
	wire          new_sdram_controller_0_s1_agent_rsp_fifo_out_valid;                                                                         // new_sdram_controller_0_s1_agent_rsp_fifo:out_valid -> new_sdram_controller_0_s1_agent:rf_sink_valid
	wire  [110:0] new_sdram_controller_0_s1_agent_rsp_fifo_out_data;                                                                          // new_sdram_controller_0_s1_agent_rsp_fifo:out_data -> new_sdram_controller_0_s1_agent:rf_sink_data
	wire          new_sdram_controller_0_s1_agent_rsp_fifo_out_ready;                                                                         // new_sdram_controller_0_s1_agent:rf_sink_ready -> new_sdram_controller_0_s1_agent_rsp_fifo:out_ready
	wire          new_sdram_controller_0_s1_agent_rsp_fifo_out_startofpacket;                                                                 // new_sdram_controller_0_s1_agent_rsp_fifo:out_startofpacket -> new_sdram_controller_0_s1_agent:rf_sink_startofpacket
	wire          new_sdram_controller_0_s1_agent_rsp_fifo_out_endofpacket;                                                                   // new_sdram_controller_0_s1_agent_rsp_fifo:out_endofpacket -> new_sdram_controller_0_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_007_src_valid;                                                                                                      // cmd_mux_007:src_valid -> new_sdram_controller_0_s1_agent:cp_valid
	wire  [109:0] cmd_mux_007_src_data;                                                                                                       // cmd_mux_007:src_data -> new_sdram_controller_0_s1_agent:cp_data
	wire          cmd_mux_007_src_ready;                                                                                                      // new_sdram_controller_0_s1_agent:cp_ready -> cmd_mux_007:src_ready
	wire   [11:0] cmd_mux_007_src_channel;                                                                                                    // cmd_mux_007:src_channel -> new_sdram_controller_0_s1_agent:cp_channel
	wire          cmd_mux_007_src_startofpacket;                                                                                              // cmd_mux_007:src_startofpacket -> new_sdram_controller_0_s1_agent:cp_startofpacket
	wire          cmd_mux_007_src_endofpacket;                                                                                                // cmd_mux_007:src_endofpacket -> new_sdram_controller_0_s1_agent:cp_endofpacket
	wire   [31:0] rleds_s1_agent_m0_readdata;                                                                                                 // rleds_s1_translator:uav_readdata -> rleds_s1_agent:m0_readdata
	wire          rleds_s1_agent_m0_waitrequest;                                                                                              // rleds_s1_translator:uav_waitrequest -> rleds_s1_agent:m0_waitrequest
	wire          rleds_s1_agent_m0_debugaccess;                                                                                              // rleds_s1_agent:m0_debugaccess -> rleds_s1_translator:uav_debugaccess
	wire   [31:0] rleds_s1_agent_m0_address;                                                                                                  // rleds_s1_agent:m0_address -> rleds_s1_translator:uav_address
	wire    [3:0] rleds_s1_agent_m0_byteenable;                                                                                               // rleds_s1_agent:m0_byteenable -> rleds_s1_translator:uav_byteenable
	wire          rleds_s1_agent_m0_read;                                                                                                     // rleds_s1_agent:m0_read -> rleds_s1_translator:uav_read
	wire          rleds_s1_agent_m0_readdatavalid;                                                                                            // rleds_s1_translator:uav_readdatavalid -> rleds_s1_agent:m0_readdatavalid
	wire          rleds_s1_agent_m0_lock;                                                                                                     // rleds_s1_agent:m0_lock -> rleds_s1_translator:uav_lock
	wire   [31:0] rleds_s1_agent_m0_writedata;                                                                                                // rleds_s1_agent:m0_writedata -> rleds_s1_translator:uav_writedata
	wire          rleds_s1_agent_m0_write;                                                                                                    // rleds_s1_agent:m0_write -> rleds_s1_translator:uav_write
	wire    [2:0] rleds_s1_agent_m0_burstcount;                                                                                               // rleds_s1_agent:m0_burstcount -> rleds_s1_translator:uav_burstcount
	wire          rleds_s1_agent_rf_source_valid;                                                                                             // rleds_s1_agent:rf_source_valid -> rleds_s1_agent_rsp_fifo:in_valid
	wire  [110:0] rleds_s1_agent_rf_source_data;                                                                                              // rleds_s1_agent:rf_source_data -> rleds_s1_agent_rsp_fifo:in_data
	wire          rleds_s1_agent_rf_source_ready;                                                                                             // rleds_s1_agent_rsp_fifo:in_ready -> rleds_s1_agent:rf_source_ready
	wire          rleds_s1_agent_rf_source_startofpacket;                                                                                     // rleds_s1_agent:rf_source_startofpacket -> rleds_s1_agent_rsp_fifo:in_startofpacket
	wire          rleds_s1_agent_rf_source_endofpacket;                                                                                       // rleds_s1_agent:rf_source_endofpacket -> rleds_s1_agent_rsp_fifo:in_endofpacket
	wire          rleds_s1_agent_rsp_fifo_out_valid;                                                                                          // rleds_s1_agent_rsp_fifo:out_valid -> rleds_s1_agent:rf_sink_valid
	wire  [110:0] rleds_s1_agent_rsp_fifo_out_data;                                                                                           // rleds_s1_agent_rsp_fifo:out_data -> rleds_s1_agent:rf_sink_data
	wire          rleds_s1_agent_rsp_fifo_out_ready;                                                                                          // rleds_s1_agent:rf_sink_ready -> rleds_s1_agent_rsp_fifo:out_ready
	wire          rleds_s1_agent_rsp_fifo_out_startofpacket;                                                                                  // rleds_s1_agent_rsp_fifo:out_startofpacket -> rleds_s1_agent:rf_sink_startofpacket
	wire          rleds_s1_agent_rsp_fifo_out_endofpacket;                                                                                    // rleds_s1_agent_rsp_fifo:out_endofpacket -> rleds_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_008_src_valid;                                                                                                      // cmd_mux_008:src_valid -> rleds_s1_agent:cp_valid
	wire  [109:0] cmd_mux_008_src_data;                                                                                                       // cmd_mux_008:src_data -> rleds_s1_agent:cp_data
	wire          cmd_mux_008_src_ready;                                                                                                      // rleds_s1_agent:cp_ready -> cmd_mux_008:src_ready
	wire   [11:0] cmd_mux_008_src_channel;                                                                                                    // cmd_mux_008:src_channel -> rleds_s1_agent:cp_channel
	wire          cmd_mux_008_src_startofpacket;                                                                                              // cmd_mux_008:src_startofpacket -> rleds_s1_agent:cp_startofpacket
	wire          cmd_mux_008_src_endofpacket;                                                                                                // cmd_mux_008:src_endofpacket -> rleds_s1_agent:cp_endofpacket
	wire   [31:0] gleds_s1_agent_m0_readdata;                                                                                                 // gleds_s1_translator:uav_readdata -> gleds_s1_agent:m0_readdata
	wire          gleds_s1_agent_m0_waitrequest;                                                                                              // gleds_s1_translator:uav_waitrequest -> gleds_s1_agent:m0_waitrequest
	wire          gleds_s1_agent_m0_debugaccess;                                                                                              // gleds_s1_agent:m0_debugaccess -> gleds_s1_translator:uav_debugaccess
	wire   [31:0] gleds_s1_agent_m0_address;                                                                                                  // gleds_s1_agent:m0_address -> gleds_s1_translator:uav_address
	wire    [3:0] gleds_s1_agent_m0_byteenable;                                                                                               // gleds_s1_agent:m0_byteenable -> gleds_s1_translator:uav_byteenable
	wire          gleds_s1_agent_m0_read;                                                                                                     // gleds_s1_agent:m0_read -> gleds_s1_translator:uav_read
	wire          gleds_s1_agent_m0_readdatavalid;                                                                                            // gleds_s1_translator:uav_readdatavalid -> gleds_s1_agent:m0_readdatavalid
	wire          gleds_s1_agent_m0_lock;                                                                                                     // gleds_s1_agent:m0_lock -> gleds_s1_translator:uav_lock
	wire   [31:0] gleds_s1_agent_m0_writedata;                                                                                                // gleds_s1_agent:m0_writedata -> gleds_s1_translator:uav_writedata
	wire          gleds_s1_agent_m0_write;                                                                                                    // gleds_s1_agent:m0_write -> gleds_s1_translator:uav_write
	wire    [2:0] gleds_s1_agent_m0_burstcount;                                                                                               // gleds_s1_agent:m0_burstcount -> gleds_s1_translator:uav_burstcount
	wire          gleds_s1_agent_rf_source_valid;                                                                                             // gleds_s1_agent:rf_source_valid -> gleds_s1_agent_rsp_fifo:in_valid
	wire  [110:0] gleds_s1_agent_rf_source_data;                                                                                              // gleds_s1_agent:rf_source_data -> gleds_s1_agent_rsp_fifo:in_data
	wire          gleds_s1_agent_rf_source_ready;                                                                                             // gleds_s1_agent_rsp_fifo:in_ready -> gleds_s1_agent:rf_source_ready
	wire          gleds_s1_agent_rf_source_startofpacket;                                                                                     // gleds_s1_agent:rf_source_startofpacket -> gleds_s1_agent_rsp_fifo:in_startofpacket
	wire          gleds_s1_agent_rf_source_endofpacket;                                                                                       // gleds_s1_agent:rf_source_endofpacket -> gleds_s1_agent_rsp_fifo:in_endofpacket
	wire          gleds_s1_agent_rsp_fifo_out_valid;                                                                                          // gleds_s1_agent_rsp_fifo:out_valid -> gleds_s1_agent:rf_sink_valid
	wire  [110:0] gleds_s1_agent_rsp_fifo_out_data;                                                                                           // gleds_s1_agent_rsp_fifo:out_data -> gleds_s1_agent:rf_sink_data
	wire          gleds_s1_agent_rsp_fifo_out_ready;                                                                                          // gleds_s1_agent:rf_sink_ready -> gleds_s1_agent_rsp_fifo:out_ready
	wire          gleds_s1_agent_rsp_fifo_out_startofpacket;                                                                                  // gleds_s1_agent_rsp_fifo:out_startofpacket -> gleds_s1_agent:rf_sink_startofpacket
	wire          gleds_s1_agent_rsp_fifo_out_endofpacket;                                                                                    // gleds_s1_agent_rsp_fifo:out_endofpacket -> gleds_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_009_src_valid;                                                                                                      // cmd_mux_009:src_valid -> gleds_s1_agent:cp_valid
	wire  [109:0] cmd_mux_009_src_data;                                                                                                       // cmd_mux_009:src_data -> gleds_s1_agent:cp_data
	wire          cmd_mux_009_src_ready;                                                                                                      // gleds_s1_agent:cp_ready -> cmd_mux_009:src_ready
	wire   [11:0] cmd_mux_009_src_channel;                                                                                                    // cmd_mux_009:src_channel -> gleds_s1_agent:cp_channel
	wire          cmd_mux_009_src_startofpacket;                                                                                              // cmd_mux_009:src_startofpacket -> gleds_s1_agent:cp_startofpacket
	wire          cmd_mux_009_src_endofpacket;                                                                                                // cmd_mux_009:src_endofpacket -> gleds_s1_agent:cp_endofpacket
	wire   [31:0] switches_s1_agent_m0_readdata;                                                                                              // switches_s1_translator:uav_readdata -> switches_s1_agent:m0_readdata
	wire          switches_s1_agent_m0_waitrequest;                                                                                           // switches_s1_translator:uav_waitrequest -> switches_s1_agent:m0_waitrequest
	wire          switches_s1_agent_m0_debugaccess;                                                                                           // switches_s1_agent:m0_debugaccess -> switches_s1_translator:uav_debugaccess
	wire   [31:0] switches_s1_agent_m0_address;                                                                                               // switches_s1_agent:m0_address -> switches_s1_translator:uav_address
	wire    [3:0] switches_s1_agent_m0_byteenable;                                                                                            // switches_s1_agent:m0_byteenable -> switches_s1_translator:uav_byteenable
	wire          switches_s1_agent_m0_read;                                                                                                  // switches_s1_agent:m0_read -> switches_s1_translator:uav_read
	wire          switches_s1_agent_m0_readdatavalid;                                                                                         // switches_s1_translator:uav_readdatavalid -> switches_s1_agent:m0_readdatavalid
	wire          switches_s1_agent_m0_lock;                                                                                                  // switches_s1_agent:m0_lock -> switches_s1_translator:uav_lock
	wire   [31:0] switches_s1_agent_m0_writedata;                                                                                             // switches_s1_agent:m0_writedata -> switches_s1_translator:uav_writedata
	wire          switches_s1_agent_m0_write;                                                                                                 // switches_s1_agent:m0_write -> switches_s1_translator:uav_write
	wire    [2:0] switches_s1_agent_m0_burstcount;                                                                                            // switches_s1_agent:m0_burstcount -> switches_s1_translator:uav_burstcount
	wire          switches_s1_agent_rf_source_valid;                                                                                          // switches_s1_agent:rf_source_valid -> switches_s1_agent_rsp_fifo:in_valid
	wire  [110:0] switches_s1_agent_rf_source_data;                                                                                           // switches_s1_agent:rf_source_data -> switches_s1_agent_rsp_fifo:in_data
	wire          switches_s1_agent_rf_source_ready;                                                                                          // switches_s1_agent_rsp_fifo:in_ready -> switches_s1_agent:rf_source_ready
	wire          switches_s1_agent_rf_source_startofpacket;                                                                                  // switches_s1_agent:rf_source_startofpacket -> switches_s1_agent_rsp_fifo:in_startofpacket
	wire          switches_s1_agent_rf_source_endofpacket;                                                                                    // switches_s1_agent:rf_source_endofpacket -> switches_s1_agent_rsp_fifo:in_endofpacket
	wire          switches_s1_agent_rsp_fifo_out_valid;                                                                                       // switches_s1_agent_rsp_fifo:out_valid -> switches_s1_agent:rf_sink_valid
	wire  [110:0] switches_s1_agent_rsp_fifo_out_data;                                                                                        // switches_s1_agent_rsp_fifo:out_data -> switches_s1_agent:rf_sink_data
	wire          switches_s1_agent_rsp_fifo_out_ready;                                                                                       // switches_s1_agent:rf_sink_ready -> switches_s1_agent_rsp_fifo:out_ready
	wire          switches_s1_agent_rsp_fifo_out_startofpacket;                                                                               // switches_s1_agent_rsp_fifo:out_startofpacket -> switches_s1_agent:rf_sink_startofpacket
	wire          switches_s1_agent_rsp_fifo_out_endofpacket;                                                                                 // switches_s1_agent_rsp_fifo:out_endofpacket -> switches_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_010_src_valid;                                                                                                      // cmd_mux_010:src_valid -> switches_s1_agent:cp_valid
	wire  [109:0] cmd_mux_010_src_data;                                                                                                       // cmd_mux_010:src_data -> switches_s1_agent:cp_data
	wire          cmd_mux_010_src_ready;                                                                                                      // switches_s1_agent:cp_ready -> cmd_mux_010:src_ready
	wire   [11:0] cmd_mux_010_src_channel;                                                                                                    // cmd_mux_010:src_channel -> switches_s1_agent:cp_channel
	wire          cmd_mux_010_src_startofpacket;                                                                                              // cmd_mux_010:src_startofpacket -> switches_s1_agent:cp_startofpacket
	wire          cmd_mux_010_src_endofpacket;                                                                                                // cmd_mux_010:src_endofpacket -> switches_s1_agent:cp_endofpacket
	wire    [7:0] generic_tristate_controller_0_uas_agent_m0_readdata;                                                                        // generic_tristate_controller_0_uas_translator:uav_readdata -> generic_tristate_controller_0_uas_agent:m0_readdata
	wire          generic_tristate_controller_0_uas_agent_m0_waitrequest;                                                                     // generic_tristate_controller_0_uas_translator:uav_waitrequest -> generic_tristate_controller_0_uas_agent:m0_waitrequest
	wire          generic_tristate_controller_0_uas_agent_m0_debugaccess;                                                                     // generic_tristate_controller_0_uas_agent:m0_debugaccess -> generic_tristate_controller_0_uas_translator:uav_debugaccess
	wire   [31:0] generic_tristate_controller_0_uas_agent_m0_address;                                                                         // generic_tristate_controller_0_uas_agent:m0_address -> generic_tristate_controller_0_uas_translator:uav_address
	wire    [0:0] generic_tristate_controller_0_uas_agent_m0_byteenable;                                                                      // generic_tristate_controller_0_uas_agent:m0_byteenable -> generic_tristate_controller_0_uas_translator:uav_byteenable
	wire          generic_tristate_controller_0_uas_agent_m0_read;                                                                            // generic_tristate_controller_0_uas_agent:m0_read -> generic_tristate_controller_0_uas_translator:uav_read
	wire          generic_tristate_controller_0_uas_agent_m0_readdatavalid;                                                                   // generic_tristate_controller_0_uas_translator:uav_readdatavalid -> generic_tristate_controller_0_uas_agent:m0_readdatavalid
	wire          generic_tristate_controller_0_uas_agent_m0_lock;                                                                            // generic_tristate_controller_0_uas_agent:m0_lock -> generic_tristate_controller_0_uas_translator:uav_lock
	wire    [7:0] generic_tristate_controller_0_uas_agent_m0_writedata;                                                                       // generic_tristate_controller_0_uas_agent:m0_writedata -> generic_tristate_controller_0_uas_translator:uav_writedata
	wire          generic_tristate_controller_0_uas_agent_m0_write;                                                                           // generic_tristate_controller_0_uas_agent:m0_write -> generic_tristate_controller_0_uas_translator:uav_write
	wire    [0:0] generic_tristate_controller_0_uas_agent_m0_burstcount;                                                                      // generic_tristate_controller_0_uas_agent:m0_burstcount -> generic_tristate_controller_0_uas_translator:uav_burstcount
	wire          generic_tristate_controller_0_uas_agent_rf_source_valid;                                                                    // generic_tristate_controller_0_uas_agent:rf_source_valid -> generic_tristate_controller_0_uas_agent_rsp_fifo:in_valid
	wire   [83:0] generic_tristate_controller_0_uas_agent_rf_source_data;                                                                     // generic_tristate_controller_0_uas_agent:rf_source_data -> generic_tristate_controller_0_uas_agent_rsp_fifo:in_data
	wire          generic_tristate_controller_0_uas_agent_rf_source_ready;                                                                    // generic_tristate_controller_0_uas_agent_rsp_fifo:in_ready -> generic_tristate_controller_0_uas_agent:rf_source_ready
	wire          generic_tristate_controller_0_uas_agent_rf_source_startofpacket;                                                            // generic_tristate_controller_0_uas_agent:rf_source_startofpacket -> generic_tristate_controller_0_uas_agent_rsp_fifo:in_startofpacket
	wire          generic_tristate_controller_0_uas_agent_rf_source_endofpacket;                                                              // generic_tristate_controller_0_uas_agent:rf_source_endofpacket -> generic_tristate_controller_0_uas_agent_rsp_fifo:in_endofpacket
	wire          generic_tristate_controller_0_uas_agent_rsp_fifo_out_valid;                                                                 // generic_tristate_controller_0_uas_agent_rsp_fifo:out_valid -> generic_tristate_controller_0_uas_agent:rf_sink_valid
	wire   [83:0] generic_tristate_controller_0_uas_agent_rsp_fifo_out_data;                                                                  // generic_tristate_controller_0_uas_agent_rsp_fifo:out_data -> generic_tristate_controller_0_uas_agent:rf_sink_data
	wire          generic_tristate_controller_0_uas_agent_rsp_fifo_out_ready;                                                                 // generic_tristate_controller_0_uas_agent:rf_sink_ready -> generic_tristate_controller_0_uas_agent_rsp_fifo:out_ready
	wire          generic_tristate_controller_0_uas_agent_rsp_fifo_out_startofpacket;                                                         // generic_tristate_controller_0_uas_agent_rsp_fifo:out_startofpacket -> generic_tristate_controller_0_uas_agent:rf_sink_startofpacket
	wire          generic_tristate_controller_0_uas_agent_rsp_fifo_out_endofpacket;                                                           // generic_tristate_controller_0_uas_agent_rsp_fifo:out_endofpacket -> generic_tristate_controller_0_uas_agent:rf_sink_endofpacket
	wire          generic_tristate_controller_0_uas_agent_rdata_fifo_src_valid;                                                               // generic_tristate_controller_0_uas_agent:rdata_fifo_src_valid -> generic_tristate_controller_0_uas_agent_rdata_fifo:in_valid
	wire    [9:0] generic_tristate_controller_0_uas_agent_rdata_fifo_src_data;                                                                // generic_tristate_controller_0_uas_agent:rdata_fifo_src_data -> generic_tristate_controller_0_uas_agent_rdata_fifo:in_data
	wire          generic_tristate_controller_0_uas_agent_rdata_fifo_src_ready;                                                               // generic_tristate_controller_0_uas_agent_rdata_fifo:in_ready -> generic_tristate_controller_0_uas_agent:rdata_fifo_src_ready
	wire          video_pixel_buffer_dma_0_avalon_pixel_dma_master_agent_cp_valid;                                                            // video_pixel_buffer_dma_0_avalon_pixel_dma_master_agent:cp_valid -> router:sink_valid
	wire   [91:0] video_pixel_buffer_dma_0_avalon_pixel_dma_master_agent_cp_data;                                                             // video_pixel_buffer_dma_0_avalon_pixel_dma_master_agent:cp_data -> router:sink_data
	wire          video_pixel_buffer_dma_0_avalon_pixel_dma_master_agent_cp_ready;                                                            // router:sink_ready -> video_pixel_buffer_dma_0_avalon_pixel_dma_master_agent:cp_ready
	wire          video_pixel_buffer_dma_0_avalon_pixel_dma_master_agent_cp_startofpacket;                                                    // video_pixel_buffer_dma_0_avalon_pixel_dma_master_agent:cp_startofpacket -> router:sink_startofpacket
	wire          video_pixel_buffer_dma_0_avalon_pixel_dma_master_agent_cp_endofpacket;                                                      // video_pixel_buffer_dma_0_avalon_pixel_dma_master_agent:cp_endofpacket -> router:sink_endofpacket
	wire          router_src_valid;                                                                                                           // router:src_valid -> cmd_demux:sink_valid
	wire   [91:0] router_src_data;                                                                                                            // router:src_data -> cmd_demux:sink_data
	wire          router_src_ready;                                                                                                           // cmd_demux:sink_ready -> router:src_ready
	wire   [11:0] router_src_channel;                                                                                                         // router:src_channel -> cmd_demux:sink_channel
	wire          router_src_startofpacket;                                                                                                   // router:src_startofpacket -> cmd_demux:sink_startofpacket
	wire          router_src_endofpacket;                                                                                                     // router:src_endofpacket -> cmd_demux:sink_endofpacket
	wire          nios2_qsys_0_data_master_agent_cp_valid;                                                                                    // nios2_qsys_0_data_master_agent:cp_valid -> router_001:sink_valid
	wire  [109:0] nios2_qsys_0_data_master_agent_cp_data;                                                                                     // nios2_qsys_0_data_master_agent:cp_data -> router_001:sink_data
	wire          nios2_qsys_0_data_master_agent_cp_ready;                                                                                    // router_001:sink_ready -> nios2_qsys_0_data_master_agent:cp_ready
	wire          nios2_qsys_0_data_master_agent_cp_startofpacket;                                                                            // nios2_qsys_0_data_master_agent:cp_startofpacket -> router_001:sink_startofpacket
	wire          nios2_qsys_0_data_master_agent_cp_endofpacket;                                                                              // nios2_qsys_0_data_master_agent:cp_endofpacket -> router_001:sink_endofpacket
	wire          nios2_qsys_0_instruction_master_agent_cp_valid;                                                                             // nios2_qsys_0_instruction_master_agent:cp_valid -> router_002:sink_valid
	wire  [109:0] nios2_qsys_0_instruction_master_agent_cp_data;                                                                              // nios2_qsys_0_instruction_master_agent:cp_data -> router_002:sink_data
	wire          nios2_qsys_0_instruction_master_agent_cp_ready;                                                                             // router_002:sink_ready -> nios2_qsys_0_instruction_master_agent:cp_ready
	wire          nios2_qsys_0_instruction_master_agent_cp_startofpacket;                                                                     // nios2_qsys_0_instruction_master_agent:cp_startofpacket -> router_002:sink_startofpacket
	wire          nios2_qsys_0_instruction_master_agent_cp_endofpacket;                                                                       // nios2_qsys_0_instruction_master_agent:cp_endofpacket -> router_002:sink_endofpacket
	wire          sram_0_avalon_sram_slave_agent_rp_valid;                                                                                    // sram_0_avalon_sram_slave_agent:rp_valid -> router_003:sink_valid
	wire   [91:0] sram_0_avalon_sram_slave_agent_rp_data;                                                                                     // sram_0_avalon_sram_slave_agent:rp_data -> router_003:sink_data
	wire          sram_0_avalon_sram_slave_agent_rp_ready;                                                                                    // router_003:sink_ready -> sram_0_avalon_sram_slave_agent:rp_ready
	wire          sram_0_avalon_sram_slave_agent_rp_startofpacket;                                                                            // sram_0_avalon_sram_slave_agent:rp_startofpacket -> router_003:sink_startofpacket
	wire          sram_0_avalon_sram_slave_agent_rp_endofpacket;                                                                              // sram_0_avalon_sram_slave_agent:rp_endofpacket -> router_003:sink_endofpacket
	wire          router_003_src_valid;                                                                                                       // router_003:src_valid -> rsp_demux:sink_valid
	wire   [91:0] router_003_src_data;                                                                                                        // router_003:src_data -> rsp_demux:sink_data
	wire          router_003_src_ready;                                                                                                       // rsp_demux:sink_ready -> router_003:src_ready
	wire   [11:0] router_003_src_channel;                                                                                                     // router_003:src_channel -> rsp_demux:sink_channel
	wire          router_003_src_startofpacket;                                                                                               // router_003:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_003_src_endofpacket;                                                                                                 // router_003:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rp_valid;                                                  // video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:rp_valid -> router_004:sink_valid
	wire   [82:0] video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rp_data;                                                   // video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:rp_data -> router_004:sink_data
	wire          video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rp_ready;                                                  // router_004:sink_ready -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:rp_ready
	wire          video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rp_startofpacket;                                          // video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:rp_startofpacket -> router_004:sink_startofpacket
	wire          video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rp_endofpacket;                                            // video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:rp_endofpacket -> router_004:sink_endofpacket
	wire          router_004_src_valid;                                                                                                       // router_004:src_valid -> rsp_demux_001:sink_valid
	wire   [82:0] router_004_src_data;                                                                                                        // router_004:src_data -> rsp_demux_001:sink_data
	wire          router_004_src_ready;                                                                                                       // rsp_demux_001:sink_ready -> router_004:src_ready
	wire   [11:0] router_004_src_channel;                                                                                                     // router_004:src_channel -> rsp_demux_001:sink_channel
	wire          router_004_src_startofpacket;                                                                                               // router_004:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          router_004_src_endofpacket;                                                                                                 // router_004:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rp_valid;                                                 // video_character_buffer_with_dma_0_avalon_char_control_slave_agent:rp_valid -> router_005:sink_valid
	wire  [109:0] video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rp_data;                                                  // video_character_buffer_with_dma_0_avalon_char_control_slave_agent:rp_data -> router_005:sink_data
	wire          video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rp_ready;                                                 // router_005:sink_ready -> video_character_buffer_with_dma_0_avalon_char_control_slave_agent:rp_ready
	wire          video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rp_startofpacket;                                         // video_character_buffer_with_dma_0_avalon_char_control_slave_agent:rp_startofpacket -> router_005:sink_startofpacket
	wire          video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rp_endofpacket;                                           // video_character_buffer_with_dma_0_avalon_char_control_slave_agent:rp_endofpacket -> router_005:sink_endofpacket
	wire          router_005_src_valid;                                                                                                       // router_005:src_valid -> rsp_demux_002:sink_valid
	wire  [109:0] router_005_src_data;                                                                                                        // router_005:src_data -> rsp_demux_002:sink_data
	wire          router_005_src_ready;                                                                                                       // rsp_demux_002:sink_ready -> router_005:src_ready
	wire   [11:0] router_005_src_channel;                                                                                                     // router_005:src_channel -> rsp_demux_002:sink_channel
	wire          router_005_src_startofpacket;                                                                                               // router_005:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire          router_005_src_endofpacket;                                                                                                 // router_005:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          video_pixel_buffer_dma_0_avalon_control_slave_agent_rp_valid;                                                               // video_pixel_buffer_dma_0_avalon_control_slave_agent:rp_valid -> router_006:sink_valid
	wire  [109:0] video_pixel_buffer_dma_0_avalon_control_slave_agent_rp_data;                                                                // video_pixel_buffer_dma_0_avalon_control_slave_agent:rp_data -> router_006:sink_data
	wire          video_pixel_buffer_dma_0_avalon_control_slave_agent_rp_ready;                                                               // router_006:sink_ready -> video_pixel_buffer_dma_0_avalon_control_slave_agent:rp_ready
	wire          video_pixel_buffer_dma_0_avalon_control_slave_agent_rp_startofpacket;                                                       // video_pixel_buffer_dma_0_avalon_control_slave_agent:rp_startofpacket -> router_006:sink_startofpacket
	wire          video_pixel_buffer_dma_0_avalon_control_slave_agent_rp_endofpacket;                                                         // video_pixel_buffer_dma_0_avalon_control_slave_agent:rp_endofpacket -> router_006:sink_endofpacket
	wire          router_006_src_valid;                                                                                                       // router_006:src_valid -> rsp_demux_003:sink_valid
	wire  [109:0] router_006_src_data;                                                                                                        // router_006:src_data -> rsp_demux_003:sink_data
	wire          router_006_src_ready;                                                                                                       // rsp_demux_003:sink_ready -> router_006:src_ready
	wire   [11:0] router_006_src_channel;                                                                                                     // router_006:src_channel -> rsp_demux_003:sink_channel
	wire          router_006_src_startofpacket;                                                                                               // router_006:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire          router_006_src_endofpacket;                                                                                                 // router_006:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire          jtag_uart_0_avalon_jtag_slave_agent_rp_valid;                                                                               // jtag_uart_0_avalon_jtag_slave_agent:rp_valid -> router_007:sink_valid
	wire  [109:0] jtag_uart_0_avalon_jtag_slave_agent_rp_data;                                                                                // jtag_uart_0_avalon_jtag_slave_agent:rp_data -> router_007:sink_data
	wire          jtag_uart_0_avalon_jtag_slave_agent_rp_ready;                                                                               // router_007:sink_ready -> jtag_uart_0_avalon_jtag_slave_agent:rp_ready
	wire          jtag_uart_0_avalon_jtag_slave_agent_rp_startofpacket;                                                                       // jtag_uart_0_avalon_jtag_slave_agent:rp_startofpacket -> router_007:sink_startofpacket
	wire          jtag_uart_0_avalon_jtag_slave_agent_rp_endofpacket;                                                                         // jtag_uart_0_avalon_jtag_slave_agent:rp_endofpacket -> router_007:sink_endofpacket
	wire          router_007_src_valid;                                                                                                       // router_007:src_valid -> rsp_demux_004:sink_valid
	wire  [109:0] router_007_src_data;                                                                                                        // router_007:src_data -> rsp_demux_004:sink_data
	wire          router_007_src_ready;                                                                                                       // rsp_demux_004:sink_ready -> router_007:src_ready
	wire   [11:0] router_007_src_channel;                                                                                                     // router_007:src_channel -> rsp_demux_004:sink_channel
	wire          router_007_src_startofpacket;                                                                                               // router_007:src_startofpacket -> rsp_demux_004:sink_startofpacket
	wire          router_007_src_endofpacket;                                                                                                 // router_007:src_endofpacket -> rsp_demux_004:sink_endofpacket
	wire          performance_counter_0_control_slave_agent_rp_valid;                                                                         // performance_counter_0_control_slave_agent:rp_valid -> router_008:sink_valid
	wire  [109:0] performance_counter_0_control_slave_agent_rp_data;                                                                          // performance_counter_0_control_slave_agent:rp_data -> router_008:sink_data
	wire          performance_counter_0_control_slave_agent_rp_ready;                                                                         // router_008:sink_ready -> performance_counter_0_control_slave_agent:rp_ready
	wire          performance_counter_0_control_slave_agent_rp_startofpacket;                                                                 // performance_counter_0_control_slave_agent:rp_startofpacket -> router_008:sink_startofpacket
	wire          performance_counter_0_control_slave_agent_rp_endofpacket;                                                                   // performance_counter_0_control_slave_agent:rp_endofpacket -> router_008:sink_endofpacket
	wire          router_008_src_valid;                                                                                                       // router_008:src_valid -> rsp_demux_005:sink_valid
	wire  [109:0] router_008_src_data;                                                                                                        // router_008:src_data -> rsp_demux_005:sink_data
	wire          router_008_src_ready;                                                                                                       // rsp_demux_005:sink_ready -> router_008:src_ready
	wire   [11:0] router_008_src_channel;                                                                                                     // router_008:src_channel -> rsp_demux_005:sink_channel
	wire          router_008_src_startofpacket;                                                                                               // router_008:src_startofpacket -> rsp_demux_005:sink_startofpacket
	wire          router_008_src_endofpacket;                                                                                                 // router_008:src_endofpacket -> rsp_demux_005:sink_endofpacket
	wire          nios2_qsys_0_jtag_debug_module_agent_rp_valid;                                                                              // nios2_qsys_0_jtag_debug_module_agent:rp_valid -> router_009:sink_valid
	wire  [109:0] nios2_qsys_0_jtag_debug_module_agent_rp_data;                                                                               // nios2_qsys_0_jtag_debug_module_agent:rp_data -> router_009:sink_data
	wire          nios2_qsys_0_jtag_debug_module_agent_rp_ready;                                                                              // router_009:sink_ready -> nios2_qsys_0_jtag_debug_module_agent:rp_ready
	wire          nios2_qsys_0_jtag_debug_module_agent_rp_startofpacket;                                                                      // nios2_qsys_0_jtag_debug_module_agent:rp_startofpacket -> router_009:sink_startofpacket
	wire          nios2_qsys_0_jtag_debug_module_agent_rp_endofpacket;                                                                        // nios2_qsys_0_jtag_debug_module_agent:rp_endofpacket -> router_009:sink_endofpacket
	wire          router_009_src_valid;                                                                                                       // router_009:src_valid -> rsp_demux_006:sink_valid
	wire  [109:0] router_009_src_data;                                                                                                        // router_009:src_data -> rsp_demux_006:sink_data
	wire          router_009_src_ready;                                                                                                       // rsp_demux_006:sink_ready -> router_009:src_ready
	wire   [11:0] router_009_src_channel;                                                                                                     // router_009:src_channel -> rsp_demux_006:sink_channel
	wire          router_009_src_startofpacket;                                                                                               // router_009:src_startofpacket -> rsp_demux_006:sink_startofpacket
	wire          router_009_src_endofpacket;                                                                                                 // router_009:src_endofpacket -> rsp_demux_006:sink_endofpacket
	wire          new_sdram_controller_0_s1_agent_rp_valid;                                                                                   // new_sdram_controller_0_s1_agent:rp_valid -> router_010:sink_valid
	wire  [109:0] new_sdram_controller_0_s1_agent_rp_data;                                                                                    // new_sdram_controller_0_s1_agent:rp_data -> router_010:sink_data
	wire          new_sdram_controller_0_s1_agent_rp_ready;                                                                                   // router_010:sink_ready -> new_sdram_controller_0_s1_agent:rp_ready
	wire          new_sdram_controller_0_s1_agent_rp_startofpacket;                                                                           // new_sdram_controller_0_s1_agent:rp_startofpacket -> router_010:sink_startofpacket
	wire          new_sdram_controller_0_s1_agent_rp_endofpacket;                                                                             // new_sdram_controller_0_s1_agent:rp_endofpacket -> router_010:sink_endofpacket
	wire          router_010_src_valid;                                                                                                       // router_010:src_valid -> rsp_demux_007:sink_valid
	wire  [109:0] router_010_src_data;                                                                                                        // router_010:src_data -> rsp_demux_007:sink_data
	wire          router_010_src_ready;                                                                                                       // rsp_demux_007:sink_ready -> router_010:src_ready
	wire   [11:0] router_010_src_channel;                                                                                                     // router_010:src_channel -> rsp_demux_007:sink_channel
	wire          router_010_src_startofpacket;                                                                                               // router_010:src_startofpacket -> rsp_demux_007:sink_startofpacket
	wire          router_010_src_endofpacket;                                                                                                 // router_010:src_endofpacket -> rsp_demux_007:sink_endofpacket
	wire          rleds_s1_agent_rp_valid;                                                                                                    // rleds_s1_agent:rp_valid -> router_011:sink_valid
	wire  [109:0] rleds_s1_agent_rp_data;                                                                                                     // rleds_s1_agent:rp_data -> router_011:sink_data
	wire          rleds_s1_agent_rp_ready;                                                                                                    // router_011:sink_ready -> rleds_s1_agent:rp_ready
	wire          rleds_s1_agent_rp_startofpacket;                                                                                            // rleds_s1_agent:rp_startofpacket -> router_011:sink_startofpacket
	wire          rleds_s1_agent_rp_endofpacket;                                                                                              // rleds_s1_agent:rp_endofpacket -> router_011:sink_endofpacket
	wire          router_011_src_valid;                                                                                                       // router_011:src_valid -> rsp_demux_008:sink_valid
	wire  [109:0] router_011_src_data;                                                                                                        // router_011:src_data -> rsp_demux_008:sink_data
	wire          router_011_src_ready;                                                                                                       // rsp_demux_008:sink_ready -> router_011:src_ready
	wire   [11:0] router_011_src_channel;                                                                                                     // router_011:src_channel -> rsp_demux_008:sink_channel
	wire          router_011_src_startofpacket;                                                                                               // router_011:src_startofpacket -> rsp_demux_008:sink_startofpacket
	wire          router_011_src_endofpacket;                                                                                                 // router_011:src_endofpacket -> rsp_demux_008:sink_endofpacket
	wire          gleds_s1_agent_rp_valid;                                                                                                    // gleds_s1_agent:rp_valid -> router_012:sink_valid
	wire  [109:0] gleds_s1_agent_rp_data;                                                                                                     // gleds_s1_agent:rp_data -> router_012:sink_data
	wire          gleds_s1_agent_rp_ready;                                                                                                    // router_012:sink_ready -> gleds_s1_agent:rp_ready
	wire          gleds_s1_agent_rp_startofpacket;                                                                                            // gleds_s1_agent:rp_startofpacket -> router_012:sink_startofpacket
	wire          gleds_s1_agent_rp_endofpacket;                                                                                              // gleds_s1_agent:rp_endofpacket -> router_012:sink_endofpacket
	wire          router_012_src_valid;                                                                                                       // router_012:src_valid -> rsp_demux_009:sink_valid
	wire  [109:0] router_012_src_data;                                                                                                        // router_012:src_data -> rsp_demux_009:sink_data
	wire          router_012_src_ready;                                                                                                       // rsp_demux_009:sink_ready -> router_012:src_ready
	wire   [11:0] router_012_src_channel;                                                                                                     // router_012:src_channel -> rsp_demux_009:sink_channel
	wire          router_012_src_startofpacket;                                                                                               // router_012:src_startofpacket -> rsp_demux_009:sink_startofpacket
	wire          router_012_src_endofpacket;                                                                                                 // router_012:src_endofpacket -> rsp_demux_009:sink_endofpacket
	wire          switches_s1_agent_rp_valid;                                                                                                 // switches_s1_agent:rp_valid -> router_013:sink_valid
	wire  [109:0] switches_s1_agent_rp_data;                                                                                                  // switches_s1_agent:rp_data -> router_013:sink_data
	wire          switches_s1_agent_rp_ready;                                                                                                 // router_013:sink_ready -> switches_s1_agent:rp_ready
	wire          switches_s1_agent_rp_startofpacket;                                                                                         // switches_s1_agent:rp_startofpacket -> router_013:sink_startofpacket
	wire          switches_s1_agent_rp_endofpacket;                                                                                           // switches_s1_agent:rp_endofpacket -> router_013:sink_endofpacket
	wire          router_013_src_valid;                                                                                                       // router_013:src_valid -> rsp_demux_010:sink_valid
	wire  [109:0] router_013_src_data;                                                                                                        // router_013:src_data -> rsp_demux_010:sink_data
	wire          router_013_src_ready;                                                                                                       // rsp_demux_010:sink_ready -> router_013:src_ready
	wire   [11:0] router_013_src_channel;                                                                                                     // router_013:src_channel -> rsp_demux_010:sink_channel
	wire          router_013_src_startofpacket;                                                                                               // router_013:src_startofpacket -> rsp_demux_010:sink_startofpacket
	wire          router_013_src_endofpacket;                                                                                                 // router_013:src_endofpacket -> rsp_demux_010:sink_endofpacket
	wire          generic_tristate_controller_0_uas_agent_rp_valid;                                                                           // generic_tristate_controller_0_uas_agent:rp_valid -> router_014:sink_valid
	wire   [82:0] generic_tristate_controller_0_uas_agent_rp_data;                                                                            // generic_tristate_controller_0_uas_agent:rp_data -> router_014:sink_data
	wire          generic_tristate_controller_0_uas_agent_rp_ready;                                                                           // router_014:sink_ready -> generic_tristate_controller_0_uas_agent:rp_ready
	wire          generic_tristate_controller_0_uas_agent_rp_startofpacket;                                                                   // generic_tristate_controller_0_uas_agent:rp_startofpacket -> router_014:sink_startofpacket
	wire          generic_tristate_controller_0_uas_agent_rp_endofpacket;                                                                     // generic_tristate_controller_0_uas_agent:rp_endofpacket -> router_014:sink_endofpacket
	wire          router_014_src_valid;                                                                                                       // router_014:src_valid -> rsp_demux_011:sink_valid
	wire   [82:0] router_014_src_data;                                                                                                        // router_014:src_data -> rsp_demux_011:sink_data
	wire          router_014_src_ready;                                                                                                       // rsp_demux_011:sink_ready -> router_014:src_ready
	wire   [11:0] router_014_src_channel;                                                                                                     // router_014:src_channel -> rsp_demux_011:sink_channel
	wire          router_014_src_startofpacket;                                                                                               // router_014:src_startofpacket -> rsp_demux_011:sink_startofpacket
	wire          router_014_src_endofpacket;                                                                                                 // router_014:src_endofpacket -> rsp_demux_011:sink_endofpacket
	wire          router_001_src_valid;                                                                                                       // router_001:src_valid -> nios2_qsys_0_data_master_limiter:cmd_sink_valid
	wire  [109:0] router_001_src_data;                                                                                                        // router_001:src_data -> nios2_qsys_0_data_master_limiter:cmd_sink_data
	wire          router_001_src_ready;                                                                                                       // nios2_qsys_0_data_master_limiter:cmd_sink_ready -> router_001:src_ready
	wire   [11:0] router_001_src_channel;                                                                                                     // router_001:src_channel -> nios2_qsys_0_data_master_limiter:cmd_sink_channel
	wire          router_001_src_startofpacket;                                                                                               // router_001:src_startofpacket -> nios2_qsys_0_data_master_limiter:cmd_sink_startofpacket
	wire          router_001_src_endofpacket;                                                                                                 // router_001:src_endofpacket -> nios2_qsys_0_data_master_limiter:cmd_sink_endofpacket
	wire  [109:0] nios2_qsys_0_data_master_limiter_cmd_src_data;                                                                              // nios2_qsys_0_data_master_limiter:cmd_src_data -> cmd_demux_001:sink_data
	wire          nios2_qsys_0_data_master_limiter_cmd_src_ready;                                                                             // cmd_demux_001:sink_ready -> nios2_qsys_0_data_master_limiter:cmd_src_ready
	wire   [11:0] nios2_qsys_0_data_master_limiter_cmd_src_channel;                                                                           // nios2_qsys_0_data_master_limiter:cmd_src_channel -> cmd_demux_001:sink_channel
	wire          nios2_qsys_0_data_master_limiter_cmd_src_startofpacket;                                                                     // nios2_qsys_0_data_master_limiter:cmd_src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          nios2_qsys_0_data_master_limiter_cmd_src_endofpacket;                                                                       // nios2_qsys_0_data_master_limiter:cmd_src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          rsp_mux_001_src_valid;                                                                                                      // rsp_mux_001:src_valid -> nios2_qsys_0_data_master_limiter:rsp_sink_valid
	wire  [109:0] rsp_mux_001_src_data;                                                                                                       // rsp_mux_001:src_data -> nios2_qsys_0_data_master_limiter:rsp_sink_data
	wire          rsp_mux_001_src_ready;                                                                                                      // nios2_qsys_0_data_master_limiter:rsp_sink_ready -> rsp_mux_001:src_ready
	wire   [11:0] rsp_mux_001_src_channel;                                                                                                    // rsp_mux_001:src_channel -> nios2_qsys_0_data_master_limiter:rsp_sink_channel
	wire          rsp_mux_001_src_startofpacket;                                                                                              // rsp_mux_001:src_startofpacket -> nios2_qsys_0_data_master_limiter:rsp_sink_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                                                                                // rsp_mux_001:src_endofpacket -> nios2_qsys_0_data_master_limiter:rsp_sink_endofpacket
	wire          nios2_qsys_0_data_master_limiter_rsp_src_valid;                                                                             // nios2_qsys_0_data_master_limiter:rsp_src_valid -> nios2_qsys_0_data_master_agent:rp_valid
	wire  [109:0] nios2_qsys_0_data_master_limiter_rsp_src_data;                                                                              // nios2_qsys_0_data_master_limiter:rsp_src_data -> nios2_qsys_0_data_master_agent:rp_data
	wire          nios2_qsys_0_data_master_limiter_rsp_src_ready;                                                                             // nios2_qsys_0_data_master_agent:rp_ready -> nios2_qsys_0_data_master_limiter:rsp_src_ready
	wire   [11:0] nios2_qsys_0_data_master_limiter_rsp_src_channel;                                                                           // nios2_qsys_0_data_master_limiter:rsp_src_channel -> nios2_qsys_0_data_master_agent:rp_channel
	wire          nios2_qsys_0_data_master_limiter_rsp_src_startofpacket;                                                                     // nios2_qsys_0_data_master_limiter:rsp_src_startofpacket -> nios2_qsys_0_data_master_agent:rp_startofpacket
	wire          nios2_qsys_0_data_master_limiter_rsp_src_endofpacket;                                                                       // nios2_qsys_0_data_master_limiter:rsp_src_endofpacket -> nios2_qsys_0_data_master_agent:rp_endofpacket
	wire          router_002_src_valid;                                                                                                       // router_002:src_valid -> nios2_qsys_0_instruction_master_limiter:cmd_sink_valid
	wire  [109:0] router_002_src_data;                                                                                                        // router_002:src_data -> nios2_qsys_0_instruction_master_limiter:cmd_sink_data
	wire          router_002_src_ready;                                                                                                       // nios2_qsys_0_instruction_master_limiter:cmd_sink_ready -> router_002:src_ready
	wire   [11:0] router_002_src_channel;                                                                                                     // router_002:src_channel -> nios2_qsys_0_instruction_master_limiter:cmd_sink_channel
	wire          router_002_src_startofpacket;                                                                                               // router_002:src_startofpacket -> nios2_qsys_0_instruction_master_limiter:cmd_sink_startofpacket
	wire          router_002_src_endofpacket;                                                                                                 // router_002:src_endofpacket -> nios2_qsys_0_instruction_master_limiter:cmd_sink_endofpacket
	wire  [109:0] nios2_qsys_0_instruction_master_limiter_cmd_src_data;                                                                       // nios2_qsys_0_instruction_master_limiter:cmd_src_data -> cmd_demux_002:sink_data
	wire          nios2_qsys_0_instruction_master_limiter_cmd_src_ready;                                                                      // cmd_demux_002:sink_ready -> nios2_qsys_0_instruction_master_limiter:cmd_src_ready
	wire   [11:0] nios2_qsys_0_instruction_master_limiter_cmd_src_channel;                                                                    // nios2_qsys_0_instruction_master_limiter:cmd_src_channel -> cmd_demux_002:sink_channel
	wire          nios2_qsys_0_instruction_master_limiter_cmd_src_startofpacket;                                                              // nios2_qsys_0_instruction_master_limiter:cmd_src_startofpacket -> cmd_demux_002:sink_startofpacket
	wire          nios2_qsys_0_instruction_master_limiter_cmd_src_endofpacket;                                                                // nios2_qsys_0_instruction_master_limiter:cmd_src_endofpacket -> cmd_demux_002:sink_endofpacket
	wire          rsp_mux_002_src_valid;                                                                                                      // rsp_mux_002:src_valid -> nios2_qsys_0_instruction_master_limiter:rsp_sink_valid
	wire  [109:0] rsp_mux_002_src_data;                                                                                                       // rsp_mux_002:src_data -> nios2_qsys_0_instruction_master_limiter:rsp_sink_data
	wire          rsp_mux_002_src_ready;                                                                                                      // nios2_qsys_0_instruction_master_limiter:rsp_sink_ready -> rsp_mux_002:src_ready
	wire   [11:0] rsp_mux_002_src_channel;                                                                                                    // rsp_mux_002:src_channel -> nios2_qsys_0_instruction_master_limiter:rsp_sink_channel
	wire          rsp_mux_002_src_startofpacket;                                                                                              // rsp_mux_002:src_startofpacket -> nios2_qsys_0_instruction_master_limiter:rsp_sink_startofpacket
	wire          rsp_mux_002_src_endofpacket;                                                                                                // rsp_mux_002:src_endofpacket -> nios2_qsys_0_instruction_master_limiter:rsp_sink_endofpacket
	wire          nios2_qsys_0_instruction_master_limiter_rsp_src_valid;                                                                      // nios2_qsys_0_instruction_master_limiter:rsp_src_valid -> nios2_qsys_0_instruction_master_agent:rp_valid
	wire  [109:0] nios2_qsys_0_instruction_master_limiter_rsp_src_data;                                                                       // nios2_qsys_0_instruction_master_limiter:rsp_src_data -> nios2_qsys_0_instruction_master_agent:rp_data
	wire          nios2_qsys_0_instruction_master_limiter_rsp_src_ready;                                                                      // nios2_qsys_0_instruction_master_agent:rp_ready -> nios2_qsys_0_instruction_master_limiter:rsp_src_ready
	wire   [11:0] nios2_qsys_0_instruction_master_limiter_rsp_src_channel;                                                                    // nios2_qsys_0_instruction_master_limiter:rsp_src_channel -> nios2_qsys_0_instruction_master_agent:rp_channel
	wire          nios2_qsys_0_instruction_master_limiter_rsp_src_startofpacket;                                                              // nios2_qsys_0_instruction_master_limiter:rsp_src_startofpacket -> nios2_qsys_0_instruction_master_agent:rp_startofpacket
	wire          nios2_qsys_0_instruction_master_limiter_rsp_src_endofpacket;                                                                // nios2_qsys_0_instruction_master_limiter:rsp_src_endofpacket -> nios2_qsys_0_instruction_master_agent:rp_endofpacket
	wire          cmd_mux_src_valid;                                                                                                          // cmd_mux:src_valid -> sram_0_avalon_sram_slave_burst_adapter:sink0_valid
	wire   [91:0] cmd_mux_src_data;                                                                                                           // cmd_mux:src_data -> sram_0_avalon_sram_slave_burst_adapter:sink0_data
	wire          cmd_mux_src_ready;                                                                                                          // sram_0_avalon_sram_slave_burst_adapter:sink0_ready -> cmd_mux:src_ready
	wire   [11:0] cmd_mux_src_channel;                                                                                                        // cmd_mux:src_channel -> sram_0_avalon_sram_slave_burst_adapter:sink0_channel
	wire          cmd_mux_src_startofpacket;                                                                                                  // cmd_mux:src_startofpacket -> sram_0_avalon_sram_slave_burst_adapter:sink0_startofpacket
	wire          cmd_mux_src_endofpacket;                                                                                                    // cmd_mux:src_endofpacket -> sram_0_avalon_sram_slave_burst_adapter:sink0_endofpacket
	wire          sram_0_avalon_sram_slave_burst_adapter_source0_valid;                                                                       // sram_0_avalon_sram_slave_burst_adapter:source0_valid -> sram_0_avalon_sram_slave_agent:cp_valid
	wire   [91:0] sram_0_avalon_sram_slave_burst_adapter_source0_data;                                                                        // sram_0_avalon_sram_slave_burst_adapter:source0_data -> sram_0_avalon_sram_slave_agent:cp_data
	wire          sram_0_avalon_sram_slave_burst_adapter_source0_ready;                                                                       // sram_0_avalon_sram_slave_agent:cp_ready -> sram_0_avalon_sram_slave_burst_adapter:source0_ready
	wire   [11:0] sram_0_avalon_sram_slave_burst_adapter_source0_channel;                                                                     // sram_0_avalon_sram_slave_burst_adapter:source0_channel -> sram_0_avalon_sram_slave_agent:cp_channel
	wire          sram_0_avalon_sram_slave_burst_adapter_source0_startofpacket;                                                               // sram_0_avalon_sram_slave_burst_adapter:source0_startofpacket -> sram_0_avalon_sram_slave_agent:cp_startofpacket
	wire          sram_0_avalon_sram_slave_burst_adapter_source0_endofpacket;                                                                 // sram_0_avalon_sram_slave_burst_adapter:source0_endofpacket -> sram_0_avalon_sram_slave_agent:cp_endofpacket
	wire          cmd_mux_001_src_valid;                                                                                                      // cmd_mux_001:src_valid -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_burst_adapter:sink0_valid
	wire   [82:0] cmd_mux_001_src_data;                                                                                                       // cmd_mux_001:src_data -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_burst_adapter:sink0_data
	wire          cmd_mux_001_src_ready;                                                                                                      // video_character_buffer_with_dma_0_avalon_char_buffer_slave_burst_adapter:sink0_ready -> cmd_mux_001:src_ready
	wire   [11:0] cmd_mux_001_src_channel;                                                                                                    // cmd_mux_001:src_channel -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_burst_adapter:sink0_channel
	wire          cmd_mux_001_src_startofpacket;                                                                                              // cmd_mux_001:src_startofpacket -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_burst_adapter:sink0_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                                                                                // cmd_mux_001:src_endofpacket -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_burst_adapter:sink0_endofpacket
	wire          video_character_buffer_with_dma_0_avalon_char_buffer_slave_burst_adapter_source0_valid;                                     // video_character_buffer_with_dma_0_avalon_char_buffer_slave_burst_adapter:source0_valid -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:cp_valid
	wire   [82:0] video_character_buffer_with_dma_0_avalon_char_buffer_slave_burst_adapter_source0_data;                                      // video_character_buffer_with_dma_0_avalon_char_buffer_slave_burst_adapter:source0_data -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:cp_data
	wire          video_character_buffer_with_dma_0_avalon_char_buffer_slave_burst_adapter_source0_ready;                                     // video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:cp_ready -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_burst_adapter:source0_ready
	wire   [11:0] video_character_buffer_with_dma_0_avalon_char_buffer_slave_burst_adapter_source0_channel;                                   // video_character_buffer_with_dma_0_avalon_char_buffer_slave_burst_adapter:source0_channel -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:cp_channel
	wire          video_character_buffer_with_dma_0_avalon_char_buffer_slave_burst_adapter_source0_startofpacket;                             // video_character_buffer_with_dma_0_avalon_char_buffer_slave_burst_adapter:source0_startofpacket -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:cp_startofpacket
	wire          video_character_buffer_with_dma_0_avalon_char_buffer_slave_burst_adapter_source0_endofpacket;                               // video_character_buffer_with_dma_0_avalon_char_buffer_slave_burst_adapter:source0_endofpacket -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:cp_endofpacket
	wire          cmd_mux_011_src_valid;                                                                                                      // cmd_mux_011:src_valid -> generic_tristate_controller_0_uas_burst_adapter:sink0_valid
	wire   [82:0] cmd_mux_011_src_data;                                                                                                       // cmd_mux_011:src_data -> generic_tristate_controller_0_uas_burst_adapter:sink0_data
	wire          cmd_mux_011_src_ready;                                                                                                      // generic_tristate_controller_0_uas_burst_adapter:sink0_ready -> cmd_mux_011:src_ready
	wire   [11:0] cmd_mux_011_src_channel;                                                                                                    // cmd_mux_011:src_channel -> generic_tristate_controller_0_uas_burst_adapter:sink0_channel
	wire          cmd_mux_011_src_startofpacket;                                                                                              // cmd_mux_011:src_startofpacket -> generic_tristate_controller_0_uas_burst_adapter:sink0_startofpacket
	wire          cmd_mux_011_src_endofpacket;                                                                                                // cmd_mux_011:src_endofpacket -> generic_tristate_controller_0_uas_burst_adapter:sink0_endofpacket
	wire          generic_tristate_controller_0_uas_burst_adapter_source0_valid;                                                              // generic_tristate_controller_0_uas_burst_adapter:source0_valid -> generic_tristate_controller_0_uas_agent:cp_valid
	wire   [82:0] generic_tristate_controller_0_uas_burst_adapter_source0_data;                                                               // generic_tristate_controller_0_uas_burst_adapter:source0_data -> generic_tristate_controller_0_uas_agent:cp_data
	wire          generic_tristate_controller_0_uas_burst_adapter_source0_ready;                                                              // generic_tristate_controller_0_uas_agent:cp_ready -> generic_tristate_controller_0_uas_burst_adapter:source0_ready
	wire   [11:0] generic_tristate_controller_0_uas_burst_adapter_source0_channel;                                                            // generic_tristate_controller_0_uas_burst_adapter:source0_channel -> generic_tristate_controller_0_uas_agent:cp_channel
	wire          generic_tristate_controller_0_uas_burst_adapter_source0_startofpacket;                                                      // generic_tristate_controller_0_uas_burst_adapter:source0_startofpacket -> generic_tristate_controller_0_uas_agent:cp_startofpacket
	wire          generic_tristate_controller_0_uas_burst_adapter_source0_endofpacket;                                                        // generic_tristate_controller_0_uas_burst_adapter:source0_endofpacket -> generic_tristate_controller_0_uas_agent:cp_endofpacket
	wire          cmd_demux_src0_valid;                                                                                                       // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire   [91:0] cmd_demux_src0_data;                                                                                                        // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire          cmd_demux_src0_ready;                                                                                                       // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire   [11:0] cmd_demux_src0_channel;                                                                                                     // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src0_startofpacket;                                                                                               // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire          cmd_demux_src0_endofpacket;                                                                                                 // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_001_src2_valid;                                                                                                   // cmd_demux_001:src2_valid -> cmd_mux_002:sink0_valid
	wire  [109:0] cmd_demux_001_src2_data;                                                                                                    // cmd_demux_001:src2_data -> cmd_mux_002:sink0_data
	wire          cmd_demux_001_src2_ready;                                                                                                   // cmd_mux_002:sink0_ready -> cmd_demux_001:src2_ready
	wire   [11:0] cmd_demux_001_src2_channel;                                                                                                 // cmd_demux_001:src2_channel -> cmd_mux_002:sink0_channel
	wire          cmd_demux_001_src2_startofpacket;                                                                                           // cmd_demux_001:src2_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire          cmd_demux_001_src2_endofpacket;                                                                                             // cmd_demux_001:src2_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          cmd_demux_001_src3_valid;                                                                                                   // cmd_demux_001:src3_valid -> cmd_mux_003:sink0_valid
	wire  [109:0] cmd_demux_001_src3_data;                                                                                                    // cmd_demux_001:src3_data -> cmd_mux_003:sink0_data
	wire          cmd_demux_001_src3_ready;                                                                                                   // cmd_mux_003:sink0_ready -> cmd_demux_001:src3_ready
	wire   [11:0] cmd_demux_001_src3_channel;                                                                                                 // cmd_demux_001:src3_channel -> cmd_mux_003:sink0_channel
	wire          cmd_demux_001_src3_startofpacket;                                                                                           // cmd_demux_001:src3_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire          cmd_demux_001_src3_endofpacket;                                                                                             // cmd_demux_001:src3_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire          cmd_demux_001_src4_valid;                                                                                                   // cmd_demux_001:src4_valid -> cmd_mux_004:sink0_valid
	wire  [109:0] cmd_demux_001_src4_data;                                                                                                    // cmd_demux_001:src4_data -> cmd_mux_004:sink0_data
	wire          cmd_demux_001_src4_ready;                                                                                                   // cmd_mux_004:sink0_ready -> cmd_demux_001:src4_ready
	wire   [11:0] cmd_demux_001_src4_channel;                                                                                                 // cmd_demux_001:src4_channel -> cmd_mux_004:sink0_channel
	wire          cmd_demux_001_src4_startofpacket;                                                                                           // cmd_demux_001:src4_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire          cmd_demux_001_src4_endofpacket;                                                                                             // cmd_demux_001:src4_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire          cmd_demux_001_src5_valid;                                                                                                   // cmd_demux_001:src5_valid -> cmd_mux_005:sink0_valid
	wire  [109:0] cmd_demux_001_src5_data;                                                                                                    // cmd_demux_001:src5_data -> cmd_mux_005:sink0_data
	wire          cmd_demux_001_src5_ready;                                                                                                   // cmd_mux_005:sink0_ready -> cmd_demux_001:src5_ready
	wire   [11:0] cmd_demux_001_src5_channel;                                                                                                 // cmd_demux_001:src5_channel -> cmd_mux_005:sink0_channel
	wire          cmd_demux_001_src5_startofpacket;                                                                                           // cmd_demux_001:src5_startofpacket -> cmd_mux_005:sink0_startofpacket
	wire          cmd_demux_001_src5_endofpacket;                                                                                             // cmd_demux_001:src5_endofpacket -> cmd_mux_005:sink0_endofpacket
	wire          cmd_demux_001_src6_valid;                                                                                                   // cmd_demux_001:src6_valid -> cmd_mux_006:sink0_valid
	wire  [109:0] cmd_demux_001_src6_data;                                                                                                    // cmd_demux_001:src6_data -> cmd_mux_006:sink0_data
	wire          cmd_demux_001_src6_ready;                                                                                                   // cmd_mux_006:sink0_ready -> cmd_demux_001:src6_ready
	wire   [11:0] cmd_demux_001_src6_channel;                                                                                                 // cmd_demux_001:src6_channel -> cmd_mux_006:sink0_channel
	wire          cmd_demux_001_src6_startofpacket;                                                                                           // cmd_demux_001:src6_startofpacket -> cmd_mux_006:sink0_startofpacket
	wire          cmd_demux_001_src6_endofpacket;                                                                                             // cmd_demux_001:src6_endofpacket -> cmd_mux_006:sink0_endofpacket
	wire          cmd_demux_001_src7_valid;                                                                                                   // cmd_demux_001:src7_valid -> cmd_mux_007:sink0_valid
	wire  [109:0] cmd_demux_001_src7_data;                                                                                                    // cmd_demux_001:src7_data -> cmd_mux_007:sink0_data
	wire          cmd_demux_001_src7_ready;                                                                                                   // cmd_mux_007:sink0_ready -> cmd_demux_001:src7_ready
	wire   [11:0] cmd_demux_001_src7_channel;                                                                                                 // cmd_demux_001:src7_channel -> cmd_mux_007:sink0_channel
	wire          cmd_demux_001_src7_startofpacket;                                                                                           // cmd_demux_001:src7_startofpacket -> cmd_mux_007:sink0_startofpacket
	wire          cmd_demux_001_src7_endofpacket;                                                                                             // cmd_demux_001:src7_endofpacket -> cmd_mux_007:sink0_endofpacket
	wire          cmd_demux_001_src8_valid;                                                                                                   // cmd_demux_001:src8_valid -> cmd_mux_008:sink0_valid
	wire  [109:0] cmd_demux_001_src8_data;                                                                                                    // cmd_demux_001:src8_data -> cmd_mux_008:sink0_data
	wire          cmd_demux_001_src8_ready;                                                                                                   // cmd_mux_008:sink0_ready -> cmd_demux_001:src8_ready
	wire   [11:0] cmd_demux_001_src8_channel;                                                                                                 // cmd_demux_001:src8_channel -> cmd_mux_008:sink0_channel
	wire          cmd_demux_001_src8_startofpacket;                                                                                           // cmd_demux_001:src8_startofpacket -> cmd_mux_008:sink0_startofpacket
	wire          cmd_demux_001_src8_endofpacket;                                                                                             // cmd_demux_001:src8_endofpacket -> cmd_mux_008:sink0_endofpacket
	wire          cmd_demux_001_src9_valid;                                                                                                   // cmd_demux_001:src9_valid -> cmd_mux_009:sink0_valid
	wire  [109:0] cmd_demux_001_src9_data;                                                                                                    // cmd_demux_001:src9_data -> cmd_mux_009:sink0_data
	wire          cmd_demux_001_src9_ready;                                                                                                   // cmd_mux_009:sink0_ready -> cmd_demux_001:src9_ready
	wire   [11:0] cmd_demux_001_src9_channel;                                                                                                 // cmd_demux_001:src9_channel -> cmd_mux_009:sink0_channel
	wire          cmd_demux_001_src9_startofpacket;                                                                                           // cmd_demux_001:src9_startofpacket -> cmd_mux_009:sink0_startofpacket
	wire          cmd_demux_001_src9_endofpacket;                                                                                             // cmd_demux_001:src9_endofpacket -> cmd_mux_009:sink0_endofpacket
	wire          cmd_demux_001_src10_valid;                                                                                                  // cmd_demux_001:src10_valid -> cmd_mux_010:sink0_valid
	wire  [109:0] cmd_demux_001_src10_data;                                                                                                   // cmd_demux_001:src10_data -> cmd_mux_010:sink0_data
	wire          cmd_demux_001_src10_ready;                                                                                                  // cmd_mux_010:sink0_ready -> cmd_demux_001:src10_ready
	wire   [11:0] cmd_demux_001_src10_channel;                                                                                                // cmd_demux_001:src10_channel -> cmd_mux_010:sink0_channel
	wire          cmd_demux_001_src10_startofpacket;                                                                                          // cmd_demux_001:src10_startofpacket -> cmd_mux_010:sink0_startofpacket
	wire          cmd_demux_001_src10_endofpacket;                                                                                            // cmd_demux_001:src10_endofpacket -> cmd_mux_010:sink0_endofpacket
	wire          cmd_demux_002_src0_valid;                                                                                                   // cmd_demux_002:src0_valid -> cmd_mux_006:sink1_valid
	wire  [109:0] cmd_demux_002_src0_data;                                                                                                    // cmd_demux_002:src0_data -> cmd_mux_006:sink1_data
	wire          cmd_demux_002_src0_ready;                                                                                                   // cmd_mux_006:sink1_ready -> cmd_demux_002:src0_ready
	wire   [11:0] cmd_demux_002_src0_channel;                                                                                                 // cmd_demux_002:src0_channel -> cmd_mux_006:sink1_channel
	wire          cmd_demux_002_src0_startofpacket;                                                                                           // cmd_demux_002:src0_startofpacket -> cmd_mux_006:sink1_startofpacket
	wire          cmd_demux_002_src0_endofpacket;                                                                                             // cmd_demux_002:src0_endofpacket -> cmd_mux_006:sink1_endofpacket
	wire          cmd_demux_002_src1_valid;                                                                                                   // cmd_demux_002:src1_valid -> cmd_mux_007:sink1_valid
	wire  [109:0] cmd_demux_002_src1_data;                                                                                                    // cmd_demux_002:src1_data -> cmd_mux_007:sink1_data
	wire          cmd_demux_002_src1_ready;                                                                                                   // cmd_mux_007:sink1_ready -> cmd_demux_002:src1_ready
	wire   [11:0] cmd_demux_002_src1_channel;                                                                                                 // cmd_demux_002:src1_channel -> cmd_mux_007:sink1_channel
	wire          cmd_demux_002_src1_startofpacket;                                                                                           // cmd_demux_002:src1_startofpacket -> cmd_mux_007:sink1_startofpacket
	wire          cmd_demux_002_src1_endofpacket;                                                                                             // cmd_demux_002:src1_endofpacket -> cmd_mux_007:sink1_endofpacket
	wire          rsp_demux_src0_valid;                                                                                                       // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire   [91:0] rsp_demux_src0_data;                                                                                                        // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire          rsp_demux_src0_ready;                                                                                                       // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire   [11:0] rsp_demux_src0_channel;                                                                                                     // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src0_startofpacket;                                                                                               // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire          rsp_demux_src0_endofpacket;                                                                                                 // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_002_src0_valid;                                                                                                   // rsp_demux_002:src0_valid -> rsp_mux_001:sink2_valid
	wire  [109:0] rsp_demux_002_src0_data;                                                                                                    // rsp_demux_002:src0_data -> rsp_mux_001:sink2_data
	wire          rsp_demux_002_src0_ready;                                                                                                   // rsp_mux_001:sink2_ready -> rsp_demux_002:src0_ready
	wire   [11:0] rsp_demux_002_src0_channel;                                                                                                 // rsp_demux_002:src0_channel -> rsp_mux_001:sink2_channel
	wire          rsp_demux_002_src0_startofpacket;                                                                                           // rsp_demux_002:src0_startofpacket -> rsp_mux_001:sink2_startofpacket
	wire          rsp_demux_002_src0_endofpacket;                                                                                             // rsp_demux_002:src0_endofpacket -> rsp_mux_001:sink2_endofpacket
	wire          rsp_demux_003_src0_valid;                                                                                                   // rsp_demux_003:src0_valid -> rsp_mux_001:sink3_valid
	wire  [109:0] rsp_demux_003_src0_data;                                                                                                    // rsp_demux_003:src0_data -> rsp_mux_001:sink3_data
	wire          rsp_demux_003_src0_ready;                                                                                                   // rsp_mux_001:sink3_ready -> rsp_demux_003:src0_ready
	wire   [11:0] rsp_demux_003_src0_channel;                                                                                                 // rsp_demux_003:src0_channel -> rsp_mux_001:sink3_channel
	wire          rsp_demux_003_src0_startofpacket;                                                                                           // rsp_demux_003:src0_startofpacket -> rsp_mux_001:sink3_startofpacket
	wire          rsp_demux_003_src0_endofpacket;                                                                                             // rsp_demux_003:src0_endofpacket -> rsp_mux_001:sink3_endofpacket
	wire          rsp_demux_004_src0_valid;                                                                                                   // rsp_demux_004:src0_valid -> rsp_mux_001:sink4_valid
	wire  [109:0] rsp_demux_004_src0_data;                                                                                                    // rsp_demux_004:src0_data -> rsp_mux_001:sink4_data
	wire          rsp_demux_004_src0_ready;                                                                                                   // rsp_mux_001:sink4_ready -> rsp_demux_004:src0_ready
	wire   [11:0] rsp_demux_004_src0_channel;                                                                                                 // rsp_demux_004:src0_channel -> rsp_mux_001:sink4_channel
	wire          rsp_demux_004_src0_startofpacket;                                                                                           // rsp_demux_004:src0_startofpacket -> rsp_mux_001:sink4_startofpacket
	wire          rsp_demux_004_src0_endofpacket;                                                                                             // rsp_demux_004:src0_endofpacket -> rsp_mux_001:sink4_endofpacket
	wire          rsp_demux_005_src0_valid;                                                                                                   // rsp_demux_005:src0_valid -> rsp_mux_001:sink5_valid
	wire  [109:0] rsp_demux_005_src0_data;                                                                                                    // rsp_demux_005:src0_data -> rsp_mux_001:sink5_data
	wire          rsp_demux_005_src0_ready;                                                                                                   // rsp_mux_001:sink5_ready -> rsp_demux_005:src0_ready
	wire   [11:0] rsp_demux_005_src0_channel;                                                                                                 // rsp_demux_005:src0_channel -> rsp_mux_001:sink5_channel
	wire          rsp_demux_005_src0_startofpacket;                                                                                           // rsp_demux_005:src0_startofpacket -> rsp_mux_001:sink5_startofpacket
	wire          rsp_demux_005_src0_endofpacket;                                                                                             // rsp_demux_005:src0_endofpacket -> rsp_mux_001:sink5_endofpacket
	wire          rsp_demux_006_src0_valid;                                                                                                   // rsp_demux_006:src0_valid -> rsp_mux_001:sink6_valid
	wire  [109:0] rsp_demux_006_src0_data;                                                                                                    // rsp_demux_006:src0_data -> rsp_mux_001:sink6_data
	wire          rsp_demux_006_src0_ready;                                                                                                   // rsp_mux_001:sink6_ready -> rsp_demux_006:src0_ready
	wire   [11:0] rsp_demux_006_src0_channel;                                                                                                 // rsp_demux_006:src0_channel -> rsp_mux_001:sink6_channel
	wire          rsp_demux_006_src0_startofpacket;                                                                                           // rsp_demux_006:src0_startofpacket -> rsp_mux_001:sink6_startofpacket
	wire          rsp_demux_006_src0_endofpacket;                                                                                             // rsp_demux_006:src0_endofpacket -> rsp_mux_001:sink6_endofpacket
	wire          rsp_demux_006_src1_valid;                                                                                                   // rsp_demux_006:src1_valid -> rsp_mux_002:sink0_valid
	wire  [109:0] rsp_demux_006_src1_data;                                                                                                    // rsp_demux_006:src1_data -> rsp_mux_002:sink0_data
	wire          rsp_demux_006_src1_ready;                                                                                                   // rsp_mux_002:sink0_ready -> rsp_demux_006:src1_ready
	wire   [11:0] rsp_demux_006_src1_channel;                                                                                                 // rsp_demux_006:src1_channel -> rsp_mux_002:sink0_channel
	wire          rsp_demux_006_src1_startofpacket;                                                                                           // rsp_demux_006:src1_startofpacket -> rsp_mux_002:sink0_startofpacket
	wire          rsp_demux_006_src1_endofpacket;                                                                                             // rsp_demux_006:src1_endofpacket -> rsp_mux_002:sink0_endofpacket
	wire          rsp_demux_007_src0_valid;                                                                                                   // rsp_demux_007:src0_valid -> rsp_mux_001:sink7_valid
	wire  [109:0] rsp_demux_007_src0_data;                                                                                                    // rsp_demux_007:src0_data -> rsp_mux_001:sink7_data
	wire          rsp_demux_007_src0_ready;                                                                                                   // rsp_mux_001:sink7_ready -> rsp_demux_007:src0_ready
	wire   [11:0] rsp_demux_007_src0_channel;                                                                                                 // rsp_demux_007:src0_channel -> rsp_mux_001:sink7_channel
	wire          rsp_demux_007_src0_startofpacket;                                                                                           // rsp_demux_007:src0_startofpacket -> rsp_mux_001:sink7_startofpacket
	wire          rsp_demux_007_src0_endofpacket;                                                                                             // rsp_demux_007:src0_endofpacket -> rsp_mux_001:sink7_endofpacket
	wire          rsp_demux_007_src1_valid;                                                                                                   // rsp_demux_007:src1_valid -> rsp_mux_002:sink1_valid
	wire  [109:0] rsp_demux_007_src1_data;                                                                                                    // rsp_demux_007:src1_data -> rsp_mux_002:sink1_data
	wire          rsp_demux_007_src1_ready;                                                                                                   // rsp_mux_002:sink1_ready -> rsp_demux_007:src1_ready
	wire   [11:0] rsp_demux_007_src1_channel;                                                                                                 // rsp_demux_007:src1_channel -> rsp_mux_002:sink1_channel
	wire          rsp_demux_007_src1_startofpacket;                                                                                           // rsp_demux_007:src1_startofpacket -> rsp_mux_002:sink1_startofpacket
	wire          rsp_demux_007_src1_endofpacket;                                                                                             // rsp_demux_007:src1_endofpacket -> rsp_mux_002:sink1_endofpacket
	wire          rsp_demux_008_src0_valid;                                                                                                   // rsp_demux_008:src0_valid -> rsp_mux_001:sink8_valid
	wire  [109:0] rsp_demux_008_src0_data;                                                                                                    // rsp_demux_008:src0_data -> rsp_mux_001:sink8_data
	wire          rsp_demux_008_src0_ready;                                                                                                   // rsp_mux_001:sink8_ready -> rsp_demux_008:src0_ready
	wire   [11:0] rsp_demux_008_src0_channel;                                                                                                 // rsp_demux_008:src0_channel -> rsp_mux_001:sink8_channel
	wire          rsp_demux_008_src0_startofpacket;                                                                                           // rsp_demux_008:src0_startofpacket -> rsp_mux_001:sink8_startofpacket
	wire          rsp_demux_008_src0_endofpacket;                                                                                             // rsp_demux_008:src0_endofpacket -> rsp_mux_001:sink8_endofpacket
	wire          rsp_demux_009_src0_valid;                                                                                                   // rsp_demux_009:src0_valid -> rsp_mux_001:sink9_valid
	wire  [109:0] rsp_demux_009_src0_data;                                                                                                    // rsp_demux_009:src0_data -> rsp_mux_001:sink9_data
	wire          rsp_demux_009_src0_ready;                                                                                                   // rsp_mux_001:sink9_ready -> rsp_demux_009:src0_ready
	wire   [11:0] rsp_demux_009_src0_channel;                                                                                                 // rsp_demux_009:src0_channel -> rsp_mux_001:sink9_channel
	wire          rsp_demux_009_src0_startofpacket;                                                                                           // rsp_demux_009:src0_startofpacket -> rsp_mux_001:sink9_startofpacket
	wire          rsp_demux_009_src0_endofpacket;                                                                                             // rsp_demux_009:src0_endofpacket -> rsp_mux_001:sink9_endofpacket
	wire          rsp_demux_010_src0_valid;                                                                                                   // rsp_demux_010:src0_valid -> rsp_mux_001:sink10_valid
	wire  [109:0] rsp_demux_010_src0_data;                                                                                                    // rsp_demux_010:src0_data -> rsp_mux_001:sink10_data
	wire          rsp_demux_010_src0_ready;                                                                                                   // rsp_mux_001:sink10_ready -> rsp_demux_010:src0_ready
	wire   [11:0] rsp_demux_010_src0_channel;                                                                                                 // rsp_demux_010:src0_channel -> rsp_mux_001:sink10_channel
	wire          rsp_demux_010_src0_startofpacket;                                                                                           // rsp_demux_010:src0_startofpacket -> rsp_mux_001:sink10_startofpacket
	wire          rsp_demux_010_src0_endofpacket;                                                                                             // rsp_demux_010:src0_endofpacket -> rsp_mux_001:sink10_endofpacket
	wire          cmd_demux_001_src0_valid;                                                                                                   // cmd_demux_001:src0_valid -> nios2_qsys_0_data_master_to_sram_0_avalon_sram_slave_cmd_width_adapter:in_valid
	wire  [109:0] cmd_demux_001_src0_data;                                                                                                    // cmd_demux_001:src0_data -> nios2_qsys_0_data_master_to_sram_0_avalon_sram_slave_cmd_width_adapter:in_data
	wire          cmd_demux_001_src0_ready;                                                                                                   // nios2_qsys_0_data_master_to_sram_0_avalon_sram_slave_cmd_width_adapter:in_ready -> cmd_demux_001:src0_ready
	wire   [11:0] cmd_demux_001_src0_channel;                                                                                                 // cmd_demux_001:src0_channel -> nios2_qsys_0_data_master_to_sram_0_avalon_sram_slave_cmd_width_adapter:in_channel
	wire          cmd_demux_001_src0_startofpacket;                                                                                           // cmd_demux_001:src0_startofpacket -> nios2_qsys_0_data_master_to_sram_0_avalon_sram_slave_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                                                                             // cmd_demux_001:src0_endofpacket -> nios2_qsys_0_data_master_to_sram_0_avalon_sram_slave_cmd_width_adapter:in_endofpacket
	wire          nios2_qsys_0_data_master_to_sram_0_avalon_sram_slave_cmd_width_adapter_src_valid;                                           // nios2_qsys_0_data_master_to_sram_0_avalon_sram_slave_cmd_width_adapter:out_valid -> cmd_mux:sink1_valid
	wire   [91:0] nios2_qsys_0_data_master_to_sram_0_avalon_sram_slave_cmd_width_adapter_src_data;                                            // nios2_qsys_0_data_master_to_sram_0_avalon_sram_slave_cmd_width_adapter:out_data -> cmd_mux:sink1_data
	wire          nios2_qsys_0_data_master_to_sram_0_avalon_sram_slave_cmd_width_adapter_src_ready;                                           // cmd_mux:sink1_ready -> nios2_qsys_0_data_master_to_sram_0_avalon_sram_slave_cmd_width_adapter:out_ready
	wire   [11:0] nios2_qsys_0_data_master_to_sram_0_avalon_sram_slave_cmd_width_adapter_src_channel;                                         // nios2_qsys_0_data_master_to_sram_0_avalon_sram_slave_cmd_width_adapter:out_channel -> cmd_mux:sink1_channel
	wire          nios2_qsys_0_data_master_to_sram_0_avalon_sram_slave_cmd_width_adapter_src_startofpacket;                                   // nios2_qsys_0_data_master_to_sram_0_avalon_sram_slave_cmd_width_adapter:out_startofpacket -> cmd_mux:sink1_startofpacket
	wire          nios2_qsys_0_data_master_to_sram_0_avalon_sram_slave_cmd_width_adapter_src_endofpacket;                                     // nios2_qsys_0_data_master_to_sram_0_avalon_sram_slave_cmd_width_adapter:out_endofpacket -> cmd_mux:sink1_endofpacket
	wire          cmd_demux_001_src1_valid;                                                                                                   // cmd_demux_001:src1_valid -> nios2_qsys_0_data_master_to_video_character_buffer_with_dma_0_avalon_char_buffer_slave_cmd_width_adapter:in_valid
	wire  [109:0] cmd_demux_001_src1_data;                                                                                                    // cmd_demux_001:src1_data -> nios2_qsys_0_data_master_to_video_character_buffer_with_dma_0_avalon_char_buffer_slave_cmd_width_adapter:in_data
	wire          cmd_demux_001_src1_ready;                                                                                                   // nios2_qsys_0_data_master_to_video_character_buffer_with_dma_0_avalon_char_buffer_slave_cmd_width_adapter:in_ready -> cmd_demux_001:src1_ready
	wire   [11:0] cmd_demux_001_src1_channel;                                                                                                 // cmd_demux_001:src1_channel -> nios2_qsys_0_data_master_to_video_character_buffer_with_dma_0_avalon_char_buffer_slave_cmd_width_adapter:in_channel
	wire          cmd_demux_001_src1_startofpacket;                                                                                           // cmd_demux_001:src1_startofpacket -> nios2_qsys_0_data_master_to_video_character_buffer_with_dma_0_avalon_char_buffer_slave_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_001_src1_endofpacket;                                                                                             // cmd_demux_001:src1_endofpacket -> nios2_qsys_0_data_master_to_video_character_buffer_with_dma_0_avalon_char_buffer_slave_cmd_width_adapter:in_endofpacket
	wire          nios2_qsys_0_data_master_to_video_character_buffer_with_dma_0_avalon_char_buffer_slave_cmd_width_adapter_src_valid;         // nios2_qsys_0_data_master_to_video_character_buffer_with_dma_0_avalon_char_buffer_slave_cmd_width_adapter:out_valid -> cmd_mux_001:sink0_valid
	wire   [82:0] nios2_qsys_0_data_master_to_video_character_buffer_with_dma_0_avalon_char_buffer_slave_cmd_width_adapter_src_data;          // nios2_qsys_0_data_master_to_video_character_buffer_with_dma_0_avalon_char_buffer_slave_cmd_width_adapter:out_data -> cmd_mux_001:sink0_data
	wire          nios2_qsys_0_data_master_to_video_character_buffer_with_dma_0_avalon_char_buffer_slave_cmd_width_adapter_src_ready;         // cmd_mux_001:sink0_ready -> nios2_qsys_0_data_master_to_video_character_buffer_with_dma_0_avalon_char_buffer_slave_cmd_width_adapter:out_ready
	wire   [11:0] nios2_qsys_0_data_master_to_video_character_buffer_with_dma_0_avalon_char_buffer_slave_cmd_width_adapter_src_channel;       // nios2_qsys_0_data_master_to_video_character_buffer_with_dma_0_avalon_char_buffer_slave_cmd_width_adapter:out_channel -> cmd_mux_001:sink0_channel
	wire          nios2_qsys_0_data_master_to_video_character_buffer_with_dma_0_avalon_char_buffer_slave_cmd_width_adapter_src_startofpacket; // nios2_qsys_0_data_master_to_video_character_buffer_with_dma_0_avalon_char_buffer_slave_cmd_width_adapter:out_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          nios2_qsys_0_data_master_to_video_character_buffer_with_dma_0_avalon_char_buffer_slave_cmd_width_adapter_src_endofpacket;   // nios2_qsys_0_data_master_to_video_character_buffer_with_dma_0_avalon_char_buffer_slave_cmd_width_adapter:out_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_001_src11_valid;                                                                                                  // cmd_demux_001:src11_valid -> nios2_qsys_0_data_master_to_generic_tristate_controller_0_uas_cmd_width_adapter:in_valid
	wire  [109:0] cmd_demux_001_src11_data;                                                                                                   // cmd_demux_001:src11_data -> nios2_qsys_0_data_master_to_generic_tristate_controller_0_uas_cmd_width_adapter:in_data
	wire          cmd_demux_001_src11_ready;                                                                                                  // nios2_qsys_0_data_master_to_generic_tristate_controller_0_uas_cmd_width_adapter:in_ready -> cmd_demux_001:src11_ready
	wire   [11:0] cmd_demux_001_src11_channel;                                                                                                // cmd_demux_001:src11_channel -> nios2_qsys_0_data_master_to_generic_tristate_controller_0_uas_cmd_width_adapter:in_channel
	wire          cmd_demux_001_src11_startofpacket;                                                                                          // cmd_demux_001:src11_startofpacket -> nios2_qsys_0_data_master_to_generic_tristate_controller_0_uas_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_001_src11_endofpacket;                                                                                            // cmd_demux_001:src11_endofpacket -> nios2_qsys_0_data_master_to_generic_tristate_controller_0_uas_cmd_width_adapter:in_endofpacket
	wire          nios2_qsys_0_data_master_to_generic_tristate_controller_0_uas_cmd_width_adapter_src_valid;                                  // nios2_qsys_0_data_master_to_generic_tristate_controller_0_uas_cmd_width_adapter:out_valid -> cmd_mux_011:sink0_valid
	wire   [82:0] nios2_qsys_0_data_master_to_generic_tristate_controller_0_uas_cmd_width_adapter_src_data;                                   // nios2_qsys_0_data_master_to_generic_tristate_controller_0_uas_cmd_width_adapter:out_data -> cmd_mux_011:sink0_data
	wire          nios2_qsys_0_data_master_to_generic_tristate_controller_0_uas_cmd_width_adapter_src_ready;                                  // cmd_mux_011:sink0_ready -> nios2_qsys_0_data_master_to_generic_tristate_controller_0_uas_cmd_width_adapter:out_ready
	wire   [11:0] nios2_qsys_0_data_master_to_generic_tristate_controller_0_uas_cmd_width_adapter_src_channel;                                // nios2_qsys_0_data_master_to_generic_tristate_controller_0_uas_cmd_width_adapter:out_channel -> cmd_mux_011:sink0_channel
	wire          nios2_qsys_0_data_master_to_generic_tristate_controller_0_uas_cmd_width_adapter_src_startofpacket;                          // nios2_qsys_0_data_master_to_generic_tristate_controller_0_uas_cmd_width_adapter:out_startofpacket -> cmd_mux_011:sink0_startofpacket
	wire          nios2_qsys_0_data_master_to_generic_tristate_controller_0_uas_cmd_width_adapter_src_endofpacket;                            // nios2_qsys_0_data_master_to_generic_tristate_controller_0_uas_cmd_width_adapter:out_endofpacket -> cmd_mux_011:sink0_endofpacket
	wire          rsp_demux_src1_valid;                                                                                                       // rsp_demux:src1_valid -> sram_0_avalon_sram_slave_to_nios2_qsys_0_data_master_rsp_width_adapter:in_valid
	wire   [91:0] rsp_demux_src1_data;                                                                                                        // rsp_demux:src1_data -> sram_0_avalon_sram_slave_to_nios2_qsys_0_data_master_rsp_width_adapter:in_data
	wire          rsp_demux_src1_ready;                                                                                                       // sram_0_avalon_sram_slave_to_nios2_qsys_0_data_master_rsp_width_adapter:in_ready -> rsp_demux:src1_ready
	wire   [11:0] rsp_demux_src1_channel;                                                                                                     // rsp_demux:src1_channel -> sram_0_avalon_sram_slave_to_nios2_qsys_0_data_master_rsp_width_adapter:in_channel
	wire          rsp_demux_src1_startofpacket;                                                                                               // rsp_demux:src1_startofpacket -> sram_0_avalon_sram_slave_to_nios2_qsys_0_data_master_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_src1_endofpacket;                                                                                                 // rsp_demux:src1_endofpacket -> sram_0_avalon_sram_slave_to_nios2_qsys_0_data_master_rsp_width_adapter:in_endofpacket
	wire          sram_0_avalon_sram_slave_to_nios2_qsys_0_data_master_rsp_width_adapter_src_valid;                                           // sram_0_avalon_sram_slave_to_nios2_qsys_0_data_master_rsp_width_adapter:out_valid -> rsp_mux_001:sink0_valid
	wire  [109:0] sram_0_avalon_sram_slave_to_nios2_qsys_0_data_master_rsp_width_adapter_src_data;                                            // sram_0_avalon_sram_slave_to_nios2_qsys_0_data_master_rsp_width_adapter:out_data -> rsp_mux_001:sink0_data
	wire          sram_0_avalon_sram_slave_to_nios2_qsys_0_data_master_rsp_width_adapter_src_ready;                                           // rsp_mux_001:sink0_ready -> sram_0_avalon_sram_slave_to_nios2_qsys_0_data_master_rsp_width_adapter:out_ready
	wire   [11:0] sram_0_avalon_sram_slave_to_nios2_qsys_0_data_master_rsp_width_adapter_src_channel;                                         // sram_0_avalon_sram_slave_to_nios2_qsys_0_data_master_rsp_width_adapter:out_channel -> rsp_mux_001:sink0_channel
	wire          sram_0_avalon_sram_slave_to_nios2_qsys_0_data_master_rsp_width_adapter_src_startofpacket;                                   // sram_0_avalon_sram_slave_to_nios2_qsys_0_data_master_rsp_width_adapter:out_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          sram_0_avalon_sram_slave_to_nios2_qsys_0_data_master_rsp_width_adapter_src_endofpacket;                                     // sram_0_avalon_sram_slave_to_nios2_qsys_0_data_master_rsp_width_adapter:out_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                                                                                   // rsp_demux_001:src0_valid -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_to_nios2_qsys_0_data_master_rsp_width_adapter:in_valid
	wire   [82:0] rsp_demux_001_src0_data;                                                                                                    // rsp_demux_001:src0_data -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_to_nios2_qsys_0_data_master_rsp_width_adapter:in_data
	wire          rsp_demux_001_src0_ready;                                                                                                   // video_character_buffer_with_dma_0_avalon_char_buffer_slave_to_nios2_qsys_0_data_master_rsp_width_adapter:in_ready -> rsp_demux_001:src0_ready
	wire   [11:0] rsp_demux_001_src0_channel;                                                                                                 // rsp_demux_001:src0_channel -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_to_nios2_qsys_0_data_master_rsp_width_adapter:in_channel
	wire          rsp_demux_001_src0_startofpacket;                                                                                           // rsp_demux_001:src0_startofpacket -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_to_nios2_qsys_0_data_master_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                                                                             // rsp_demux_001:src0_endofpacket -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_to_nios2_qsys_0_data_master_rsp_width_adapter:in_endofpacket
	wire          video_character_buffer_with_dma_0_avalon_char_buffer_slave_to_nios2_qsys_0_data_master_rsp_width_adapter_src_valid;         // video_character_buffer_with_dma_0_avalon_char_buffer_slave_to_nios2_qsys_0_data_master_rsp_width_adapter:out_valid -> rsp_mux_001:sink1_valid
	wire  [109:0] video_character_buffer_with_dma_0_avalon_char_buffer_slave_to_nios2_qsys_0_data_master_rsp_width_adapter_src_data;          // video_character_buffer_with_dma_0_avalon_char_buffer_slave_to_nios2_qsys_0_data_master_rsp_width_adapter:out_data -> rsp_mux_001:sink1_data
	wire          video_character_buffer_with_dma_0_avalon_char_buffer_slave_to_nios2_qsys_0_data_master_rsp_width_adapter_src_ready;         // rsp_mux_001:sink1_ready -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_to_nios2_qsys_0_data_master_rsp_width_adapter:out_ready
	wire   [11:0] video_character_buffer_with_dma_0_avalon_char_buffer_slave_to_nios2_qsys_0_data_master_rsp_width_adapter_src_channel;       // video_character_buffer_with_dma_0_avalon_char_buffer_slave_to_nios2_qsys_0_data_master_rsp_width_adapter:out_channel -> rsp_mux_001:sink1_channel
	wire          video_character_buffer_with_dma_0_avalon_char_buffer_slave_to_nios2_qsys_0_data_master_rsp_width_adapter_src_startofpacket; // video_character_buffer_with_dma_0_avalon_char_buffer_slave_to_nios2_qsys_0_data_master_rsp_width_adapter:out_startofpacket -> rsp_mux_001:sink1_startofpacket
	wire          video_character_buffer_with_dma_0_avalon_char_buffer_slave_to_nios2_qsys_0_data_master_rsp_width_adapter_src_endofpacket;   // video_character_buffer_with_dma_0_avalon_char_buffer_slave_to_nios2_qsys_0_data_master_rsp_width_adapter:out_endofpacket -> rsp_mux_001:sink1_endofpacket
	wire          rsp_demux_011_src0_valid;                                                                                                   // rsp_demux_011:src0_valid -> generic_tristate_controller_0_uas_to_nios2_qsys_0_data_master_rsp_width_adapter:in_valid
	wire   [82:0] rsp_demux_011_src0_data;                                                                                                    // rsp_demux_011:src0_data -> generic_tristate_controller_0_uas_to_nios2_qsys_0_data_master_rsp_width_adapter:in_data
	wire          rsp_demux_011_src0_ready;                                                                                                   // generic_tristate_controller_0_uas_to_nios2_qsys_0_data_master_rsp_width_adapter:in_ready -> rsp_demux_011:src0_ready
	wire   [11:0] rsp_demux_011_src0_channel;                                                                                                 // rsp_demux_011:src0_channel -> generic_tristate_controller_0_uas_to_nios2_qsys_0_data_master_rsp_width_adapter:in_channel
	wire          rsp_demux_011_src0_startofpacket;                                                                                           // rsp_demux_011:src0_startofpacket -> generic_tristate_controller_0_uas_to_nios2_qsys_0_data_master_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_011_src0_endofpacket;                                                                                             // rsp_demux_011:src0_endofpacket -> generic_tristate_controller_0_uas_to_nios2_qsys_0_data_master_rsp_width_adapter:in_endofpacket
	wire          generic_tristate_controller_0_uas_to_nios2_qsys_0_data_master_rsp_width_adapter_src_valid;                                  // generic_tristate_controller_0_uas_to_nios2_qsys_0_data_master_rsp_width_adapter:out_valid -> rsp_mux_001:sink11_valid
	wire  [109:0] generic_tristate_controller_0_uas_to_nios2_qsys_0_data_master_rsp_width_adapter_src_data;                                   // generic_tristate_controller_0_uas_to_nios2_qsys_0_data_master_rsp_width_adapter:out_data -> rsp_mux_001:sink11_data
	wire          generic_tristate_controller_0_uas_to_nios2_qsys_0_data_master_rsp_width_adapter_src_ready;                                  // rsp_mux_001:sink11_ready -> generic_tristate_controller_0_uas_to_nios2_qsys_0_data_master_rsp_width_adapter:out_ready
	wire   [11:0] generic_tristate_controller_0_uas_to_nios2_qsys_0_data_master_rsp_width_adapter_src_channel;                                // generic_tristate_controller_0_uas_to_nios2_qsys_0_data_master_rsp_width_adapter:out_channel -> rsp_mux_001:sink11_channel
	wire          generic_tristate_controller_0_uas_to_nios2_qsys_0_data_master_rsp_width_adapter_src_startofpacket;                          // generic_tristate_controller_0_uas_to_nios2_qsys_0_data_master_rsp_width_adapter:out_startofpacket -> rsp_mux_001:sink11_startofpacket
	wire          generic_tristate_controller_0_uas_to_nios2_qsys_0_data_master_rsp_width_adapter_src_endofpacket;                            // generic_tristate_controller_0_uas_to_nios2_qsys_0_data_master_rsp_width_adapter:out_endofpacket -> rsp_mux_001:sink11_endofpacket
	wire   [11:0] nios2_qsys_0_data_master_limiter_cmd_valid_data;                                                                            // nios2_qsys_0_data_master_limiter:cmd_src_valid -> cmd_demux_001:sink_valid
	wire   [11:0] nios2_qsys_0_instruction_master_limiter_cmd_valid_data;                                                                     // nios2_qsys_0_instruction_master_limiter:cmd_src_valid -> cmd_demux_002:sink_valid
	wire          sram_0_avalon_sram_slave_agent_rdata_fifo_out_valid;                                                                        // sram_0_avalon_sram_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter:in_0_valid
	wire   [17:0] sram_0_avalon_sram_slave_agent_rdata_fifo_out_data;                                                                         // sram_0_avalon_sram_slave_agent_rdata_fifo:out_data -> avalon_st_adapter:in_0_data
	wire          sram_0_avalon_sram_slave_agent_rdata_fifo_out_ready;                                                                        // avalon_st_adapter:in_0_ready -> sram_0_avalon_sram_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_out_0_valid;                                                                                              // avalon_st_adapter:out_0_valid -> sram_0_avalon_sram_slave_agent:rdata_fifo_sink_valid
	wire   [17:0] avalon_st_adapter_out_0_data;                                                                                               // avalon_st_adapter:out_0_data -> sram_0_avalon_sram_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_out_0_ready;                                                                                              // sram_0_avalon_sram_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire    [0:0] avalon_st_adapter_out_0_error;                                                                                              // avalon_st_adapter:out_0_error -> sram_0_avalon_sram_slave_agent:rdata_fifo_sink_error
	wire          video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rdata_fifo_src_valid;                                      // video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_001:in_0_valid
	wire    [9:0] video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rdata_fifo_src_data;                                       // video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_001:in_0_data
	wire          video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rdata_fifo_src_ready;                                      // avalon_st_adapter_001:in_0_ready -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_001_out_0_valid;                                                                                          // avalon_st_adapter_001:out_0_valid -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:rdata_fifo_sink_valid
	wire    [9:0] avalon_st_adapter_001_out_0_data;                                                                                           // avalon_st_adapter_001:out_0_data -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_001_out_0_ready;                                                                                          // video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	wire    [0:0] avalon_st_adapter_001_out_0_error;                                                                                          // avalon_st_adapter_001:out_0_error -> video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent:rdata_fifo_sink_error
	wire          video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rdata_fifo_src_valid;                                     // video_character_buffer_with_dma_0_avalon_char_control_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_002:in_0_valid
	wire   [33:0] video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rdata_fifo_src_data;                                      // video_character_buffer_with_dma_0_avalon_char_control_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_002:in_0_data
	wire          video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rdata_fifo_src_ready;                                     // avalon_st_adapter_002:in_0_ready -> video_character_buffer_with_dma_0_avalon_char_control_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_002_out_0_valid;                                                                                          // avalon_st_adapter_002:out_0_valid -> video_character_buffer_with_dma_0_avalon_char_control_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_002_out_0_data;                                                                                           // avalon_st_adapter_002:out_0_data -> video_character_buffer_with_dma_0_avalon_char_control_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_002_out_0_ready;                                                                                          // video_character_buffer_with_dma_0_avalon_char_control_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_002:out_0_ready
	wire    [0:0] avalon_st_adapter_002_out_0_error;                                                                                          // avalon_st_adapter_002:out_0_error -> video_character_buffer_with_dma_0_avalon_char_control_slave_agent:rdata_fifo_sink_error
	wire          video_pixel_buffer_dma_0_avalon_control_slave_agent_rdata_fifo_src_valid;                                                   // video_pixel_buffer_dma_0_avalon_control_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_003:in_0_valid
	wire   [33:0] video_pixel_buffer_dma_0_avalon_control_slave_agent_rdata_fifo_src_data;                                                    // video_pixel_buffer_dma_0_avalon_control_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_003:in_0_data
	wire          video_pixel_buffer_dma_0_avalon_control_slave_agent_rdata_fifo_src_ready;                                                   // avalon_st_adapter_003:in_0_ready -> video_pixel_buffer_dma_0_avalon_control_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_003_out_0_valid;                                                                                          // avalon_st_adapter_003:out_0_valid -> video_pixel_buffer_dma_0_avalon_control_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_003_out_0_data;                                                                                           // avalon_st_adapter_003:out_0_data -> video_pixel_buffer_dma_0_avalon_control_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_003_out_0_ready;                                                                                          // video_pixel_buffer_dma_0_avalon_control_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_003:out_0_ready
	wire    [0:0] avalon_st_adapter_003_out_0_error;                                                                                          // avalon_st_adapter_003:out_0_error -> video_pixel_buffer_dma_0_avalon_control_slave_agent:rdata_fifo_sink_error
	wire          jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_valid;                                                                   // jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_004:in_0_valid
	wire   [33:0] jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_data;                                                                    // jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_004:in_0_data
	wire          jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_ready;                                                                   // avalon_st_adapter_004:in_0_ready -> jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_004_out_0_valid;                                                                                          // avalon_st_adapter_004:out_0_valid -> jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_004_out_0_data;                                                                                           // avalon_st_adapter_004:out_0_data -> jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_004_out_0_ready;                                                                                          // jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_004:out_0_ready
	wire    [0:0] avalon_st_adapter_004_out_0_error;                                                                                          // avalon_st_adapter_004:out_0_error -> jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_sink_error
	wire          performance_counter_0_control_slave_agent_rdata_fifo_src_valid;                                                             // performance_counter_0_control_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_005:in_0_valid
	wire   [33:0] performance_counter_0_control_slave_agent_rdata_fifo_src_data;                                                              // performance_counter_0_control_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_005:in_0_data
	wire          performance_counter_0_control_slave_agent_rdata_fifo_src_ready;                                                             // avalon_st_adapter_005:in_0_ready -> performance_counter_0_control_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_005_out_0_valid;                                                                                          // avalon_st_adapter_005:out_0_valid -> performance_counter_0_control_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_005_out_0_data;                                                                                           // avalon_st_adapter_005:out_0_data -> performance_counter_0_control_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_005_out_0_ready;                                                                                          // performance_counter_0_control_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_005:out_0_ready
	wire    [0:0] avalon_st_adapter_005_out_0_error;                                                                                          // avalon_st_adapter_005:out_0_error -> performance_counter_0_control_slave_agent:rdata_fifo_sink_error
	wire          nios2_qsys_0_jtag_debug_module_agent_rdata_fifo_src_valid;                                                                  // nios2_qsys_0_jtag_debug_module_agent:rdata_fifo_src_valid -> avalon_st_adapter_006:in_0_valid
	wire   [33:0] nios2_qsys_0_jtag_debug_module_agent_rdata_fifo_src_data;                                                                   // nios2_qsys_0_jtag_debug_module_agent:rdata_fifo_src_data -> avalon_st_adapter_006:in_0_data
	wire          nios2_qsys_0_jtag_debug_module_agent_rdata_fifo_src_ready;                                                                  // avalon_st_adapter_006:in_0_ready -> nios2_qsys_0_jtag_debug_module_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_006_out_0_valid;                                                                                          // avalon_st_adapter_006:out_0_valid -> nios2_qsys_0_jtag_debug_module_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_006_out_0_data;                                                                                           // avalon_st_adapter_006:out_0_data -> nios2_qsys_0_jtag_debug_module_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_006_out_0_ready;                                                                                          // nios2_qsys_0_jtag_debug_module_agent:rdata_fifo_sink_ready -> avalon_st_adapter_006:out_0_ready
	wire    [0:0] avalon_st_adapter_006_out_0_error;                                                                                          // avalon_st_adapter_006:out_0_error -> nios2_qsys_0_jtag_debug_module_agent:rdata_fifo_sink_error
	wire          new_sdram_controller_0_s1_agent_rdata_fifo_src_valid;                                                                       // new_sdram_controller_0_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_007:in_0_valid
	wire   [33:0] new_sdram_controller_0_s1_agent_rdata_fifo_src_data;                                                                        // new_sdram_controller_0_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_007:in_0_data
	wire          new_sdram_controller_0_s1_agent_rdata_fifo_src_ready;                                                                       // avalon_st_adapter_007:in_0_ready -> new_sdram_controller_0_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_007_out_0_valid;                                                                                          // avalon_st_adapter_007:out_0_valid -> new_sdram_controller_0_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_007_out_0_data;                                                                                           // avalon_st_adapter_007:out_0_data -> new_sdram_controller_0_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_007_out_0_ready;                                                                                          // new_sdram_controller_0_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_007:out_0_ready
	wire    [0:0] avalon_st_adapter_007_out_0_error;                                                                                          // avalon_st_adapter_007:out_0_error -> new_sdram_controller_0_s1_agent:rdata_fifo_sink_error
	wire          rleds_s1_agent_rdata_fifo_src_valid;                                                                                        // rleds_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_008:in_0_valid
	wire   [33:0] rleds_s1_agent_rdata_fifo_src_data;                                                                                         // rleds_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_008:in_0_data
	wire          rleds_s1_agent_rdata_fifo_src_ready;                                                                                        // avalon_st_adapter_008:in_0_ready -> rleds_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_008_out_0_valid;                                                                                          // avalon_st_adapter_008:out_0_valid -> rleds_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_008_out_0_data;                                                                                           // avalon_st_adapter_008:out_0_data -> rleds_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_008_out_0_ready;                                                                                          // rleds_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_008:out_0_ready
	wire    [0:0] avalon_st_adapter_008_out_0_error;                                                                                          // avalon_st_adapter_008:out_0_error -> rleds_s1_agent:rdata_fifo_sink_error
	wire          gleds_s1_agent_rdata_fifo_src_valid;                                                                                        // gleds_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_009:in_0_valid
	wire   [33:0] gleds_s1_agent_rdata_fifo_src_data;                                                                                         // gleds_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_009:in_0_data
	wire          gleds_s1_agent_rdata_fifo_src_ready;                                                                                        // avalon_st_adapter_009:in_0_ready -> gleds_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_009_out_0_valid;                                                                                          // avalon_st_adapter_009:out_0_valid -> gleds_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_009_out_0_data;                                                                                           // avalon_st_adapter_009:out_0_data -> gleds_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_009_out_0_ready;                                                                                          // gleds_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_009:out_0_ready
	wire    [0:0] avalon_st_adapter_009_out_0_error;                                                                                          // avalon_st_adapter_009:out_0_error -> gleds_s1_agent:rdata_fifo_sink_error
	wire          switches_s1_agent_rdata_fifo_src_valid;                                                                                     // switches_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_010:in_0_valid
	wire   [33:0] switches_s1_agent_rdata_fifo_src_data;                                                                                      // switches_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_010:in_0_data
	wire          switches_s1_agent_rdata_fifo_src_ready;                                                                                     // avalon_st_adapter_010:in_0_ready -> switches_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_010_out_0_valid;                                                                                          // avalon_st_adapter_010:out_0_valid -> switches_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_010_out_0_data;                                                                                           // avalon_st_adapter_010:out_0_data -> switches_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_010_out_0_ready;                                                                                          // switches_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_010:out_0_ready
	wire    [0:0] avalon_st_adapter_010_out_0_error;                                                                                          // avalon_st_adapter_010:out_0_error -> switches_s1_agent:rdata_fifo_sink_error
	wire          generic_tristate_controller_0_uas_agent_rdata_fifo_out_valid;                                                               // generic_tristate_controller_0_uas_agent_rdata_fifo:out_valid -> avalon_st_adapter_011:in_0_valid
	wire    [9:0] generic_tristate_controller_0_uas_agent_rdata_fifo_out_data;                                                                // generic_tristate_controller_0_uas_agent_rdata_fifo:out_data -> avalon_st_adapter_011:in_0_data
	wire          generic_tristate_controller_0_uas_agent_rdata_fifo_out_ready;                                                               // avalon_st_adapter_011:in_0_ready -> generic_tristate_controller_0_uas_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_011_out_0_valid;                                                                                          // avalon_st_adapter_011:out_0_valid -> generic_tristate_controller_0_uas_agent:rdata_fifo_sink_valid
	wire    [9:0] avalon_st_adapter_011_out_0_data;                                                                                           // avalon_st_adapter_011:out_0_data -> generic_tristate_controller_0_uas_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_011_out_0_ready;                                                                                          // generic_tristate_controller_0_uas_agent:rdata_fifo_sink_ready -> avalon_st_adapter_011:out_0_ready
	wire    [0:0] avalon_st_adapter_011_out_0_error;                                                                                          // avalon_st_adapter_011:out_0_error -> generic_tristate_controller_0_uas_agent:rdata_fifo_sink_error

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (16),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (2),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (2),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (2),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) video_pixel_buffer_dma_0_avalon_pixel_dma_master_translator (
		.clk                    (clk_0_clk_clk),                                                                                       //                       clk.clk
		.reset                  (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset),                                          //                     reset.reset
		.uav_address            (video_pixel_buffer_dma_0_avalon_pixel_dma_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (video_pixel_buffer_dma_0_avalon_pixel_dma_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (video_pixel_buffer_dma_0_avalon_pixel_dma_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (video_pixel_buffer_dma_0_avalon_pixel_dma_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (video_pixel_buffer_dma_0_avalon_pixel_dma_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (video_pixel_buffer_dma_0_avalon_pixel_dma_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (video_pixel_buffer_dma_0_avalon_pixel_dma_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (video_pixel_buffer_dma_0_avalon_pixel_dma_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (video_pixel_buffer_dma_0_avalon_pixel_dma_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (video_pixel_buffer_dma_0_avalon_pixel_dma_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (video_pixel_buffer_dma_0_avalon_pixel_dma_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (video_pixel_buffer_dma_0_avalon_pixel_dma_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (video_pixel_buffer_dma_0_avalon_pixel_dma_master_waitrequest),                                        //                          .waitrequest
		.av_read                (video_pixel_buffer_dma_0_avalon_pixel_dma_master_read),                                               //                          .read
		.av_readdata            (video_pixel_buffer_dma_0_avalon_pixel_dma_master_readdata),                                           //                          .readdata
		.av_readdatavalid       (video_pixel_buffer_dma_0_avalon_pixel_dma_master_readdatavalid),                                      //                          .readdatavalid
		.av_lock                (video_pixel_buffer_dma_0_avalon_pixel_dma_master_lock),                                               //                          .lock
		.av_burstcount          (1'b1),                                                                                                //               (terminated)
		.av_byteenable          (2'b11),                                                                                               //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                                                //               (terminated)
		.av_begintransfer       (1'b0),                                                                                                //               (terminated)
		.av_chipselect          (1'b0),                                                                                                //               (terminated)
		.av_write               (1'b0),                                                                                                //               (terminated)
		.av_writedata           (16'b0000000000000000),                                                                                //               (terminated)
		.av_debugaccess         (1'b0),                                                                                                //               (terminated)
		.uav_clken              (),                                                                                                    //               (terminated)
		.av_clken               (1'b1),                                                                                                //               (terminated)
		.uav_response           (2'b00),                                                                                               //               (terminated)
		.av_response            (),                                                                                                    //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                                                //               (terminated)
		.av_writeresponsevalid  ()                                                                                                     //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (29),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) nios2_qsys_0_data_master_translator (
		.clk                    (clk_0_clk_clk),                                                               //                       clk.clk
		.reset                  (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset),                  //                     reset.reset
		.uav_address            (nios2_qsys_0_data_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (nios2_qsys_0_data_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (nios2_qsys_0_data_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (nios2_qsys_0_data_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (nios2_qsys_0_data_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (nios2_qsys_0_data_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (nios2_qsys_0_data_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (nios2_qsys_0_data_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (nios2_qsys_0_data_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (nios2_qsys_0_data_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (nios2_qsys_0_data_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (nios2_qsys_0_data_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (nios2_qsys_0_data_master_waitrequest),                                        //                          .waitrequest
		.av_byteenable          (nios2_qsys_0_data_master_byteenable),                                         //                          .byteenable
		.av_read                (nios2_qsys_0_data_master_read),                                               //                          .read
		.av_readdata            (nios2_qsys_0_data_master_readdata),                                           //                          .readdata
		.av_readdatavalid       (nios2_qsys_0_data_master_readdatavalid),                                      //                          .readdatavalid
		.av_write               (nios2_qsys_0_data_master_write),                                              //                          .write
		.av_writedata           (nios2_qsys_0_data_master_writedata),                                          //                          .writedata
		.av_debugaccess         (nios2_qsys_0_data_master_debugaccess),                                        //                          .debugaccess
		.av_burstcount          (1'b1),                                                                        //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                        //               (terminated)
		.av_begintransfer       (1'b0),                                                                        //               (terminated)
		.av_chipselect          (1'b0),                                                                        //               (terminated)
		.av_lock                (1'b0),                                                                        //               (terminated)
		.uav_clken              (),                                                                            //               (terminated)
		.av_clken               (1'b1),                                                                        //               (terminated)
		.uav_response           (2'b00),                                                                       //               (terminated)
		.av_response            (),                                                                            //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                        //               (terminated)
		.av_writeresponsevalid  ()                                                                             //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (29),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (1),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) nios2_qsys_0_instruction_master_translator (
		.clk                    (clk_0_clk_clk),                                                                      //                       clk.clk
		.reset                  (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset),                         //                     reset.reset
		.uav_address            (nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (nios2_qsys_0_instruction_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (nios2_qsys_0_instruction_master_waitrequest),                                        //                          .waitrequest
		.av_read                (nios2_qsys_0_instruction_master_read),                                               //                          .read
		.av_readdata            (nios2_qsys_0_instruction_master_readdata),                                           //                          .readdata
		.av_readdatavalid       (nios2_qsys_0_instruction_master_readdatavalid),                                      //                          .readdatavalid
		.av_burstcount          (1'b1),                                                                               //               (terminated)
		.av_byteenable          (4'b1111),                                                                            //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                               //               (terminated)
		.av_begintransfer       (1'b0),                                                                               //               (terminated)
		.av_chipselect          (1'b0),                                                                               //               (terminated)
		.av_write               (1'b0),                                                                               //               (terminated)
		.av_writedata           (32'b00000000000000000000000000000000),                                               //               (terminated)
		.av_lock                (1'b0),                                                                               //               (terminated)
		.av_debugaccess         (1'b0),                                                                               //               (terminated)
		.uav_clken              (),                                                                                   //               (terminated)
		.av_clken               (1'b1),                                                                               //               (terminated)
		.uav_response           (2'b00),                                                                              //               (terminated)
		.av_response            (),                                                                                   //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                               //               (terminated)
		.av_writeresponsevalid  ()                                                                                    //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (20),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (16),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (2),
		.UAV_BYTEENABLE_W               (2),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (2),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (2),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sram_0_avalon_sram_slave_translator (
		.clk                    (clk_0_clk_clk),                                              //                      clk.clk
		.reset                  (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (sram_0_avalon_sram_slave_agent_m0_address),                  // avalon_universal_slave_0.address
		.uav_burstcount         (sram_0_avalon_sram_slave_agent_m0_burstcount),               //                         .burstcount
		.uav_read               (sram_0_avalon_sram_slave_agent_m0_read),                     //                         .read
		.uav_write              (sram_0_avalon_sram_slave_agent_m0_write),                    //                         .write
		.uav_waitrequest        (sram_0_avalon_sram_slave_agent_m0_waitrequest),              //                         .waitrequest
		.uav_readdatavalid      (sram_0_avalon_sram_slave_agent_m0_readdatavalid),            //                         .readdatavalid
		.uav_byteenable         (sram_0_avalon_sram_slave_agent_m0_byteenable),               //                         .byteenable
		.uav_readdata           (sram_0_avalon_sram_slave_agent_m0_readdata),                 //                         .readdata
		.uav_writedata          (sram_0_avalon_sram_slave_agent_m0_writedata),                //                         .writedata
		.uav_lock               (sram_0_avalon_sram_slave_agent_m0_lock),                     //                         .lock
		.uav_debugaccess        (sram_0_avalon_sram_slave_agent_m0_debugaccess),              //                         .debugaccess
		.av_address             (sram_0_avalon_sram_slave_address),                           //      avalon_anti_slave_0.address
		.av_write               (sram_0_avalon_sram_slave_write),                             //                         .write
		.av_read                (sram_0_avalon_sram_slave_read),                              //                         .read
		.av_readdata            (sram_0_avalon_sram_slave_readdata),                          //                         .readdata
		.av_writedata           (sram_0_avalon_sram_slave_writedata),                         //                         .writedata
		.av_byteenable          (sram_0_avalon_sram_slave_byteenable),                        //                         .byteenable
		.av_readdatavalid       (sram_0_avalon_sram_slave_readdatavalid),                     //                         .readdatavalid
		.av_begintransfer       (),                                                           //              (terminated)
		.av_beginbursttransfer  (),                                                           //              (terminated)
		.av_burstcount          (),                                                           //              (terminated)
		.av_waitrequest         (1'b0),                                                       //              (terminated)
		.av_writebyteenable     (),                                                           //              (terminated)
		.av_lock                (),                                                           //              (terminated)
		.av_chipselect          (),                                                           //              (terminated)
		.av_clken               (),                                                           //              (terminated)
		.uav_clken              (1'b0),                                                       //              (terminated)
		.av_debugaccess         (),                                                           //              (terminated)
		.av_outputenable        (),                                                           //              (terminated)
		.uav_response           (),                                                           //              (terminated)
		.av_response            (2'b00),                                                      //              (terminated)
		.uav_writeresponsevalid (),                                                           //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (13),
		.AV_DATA_W                      (8),
		.UAV_DATA_W                     (8),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (1),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (1),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (1),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) video_character_buffer_with_dma_0_avalon_char_buffer_slave_translator (
		.clk                    (clk_0_clk_clk),                                                                     //                      clk.clk
		.reset                  (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset),                        //                    reset.reset
		.uav_address            (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_m0_read),          //                         .read
		.uav_write              (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (video_character_buffer_with_dma_0_avalon_char_buffer_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (video_character_buffer_with_dma_0_avalon_char_buffer_slave_write),                  //                         .write
		.av_read                (video_character_buffer_with_dma_0_avalon_char_buffer_slave_read),                   //                         .read
		.av_readdata            (video_character_buffer_with_dma_0_avalon_char_buffer_slave_readdata),               //                         .readdata
		.av_writedata           (video_character_buffer_with_dma_0_avalon_char_buffer_slave_writedata),              //                         .writedata
		.av_byteenable          (video_character_buffer_with_dma_0_avalon_char_buffer_slave_byteenable),             //                         .byteenable
		.av_waitrequest         (video_character_buffer_with_dma_0_avalon_char_buffer_slave_waitrequest),            //                         .waitrequest
		.av_chipselect          (video_character_buffer_with_dma_0_avalon_char_buffer_slave_chipselect),             //                         .chipselect
		.av_begintransfer       (),                                                                                  //              (terminated)
		.av_beginbursttransfer  (),                                                                                  //              (terminated)
		.av_burstcount          (),                                                                                  //              (terminated)
		.av_readdatavalid       (1'b0),                                                                              //              (terminated)
		.av_writebyteenable     (),                                                                                  //              (terminated)
		.av_lock                (),                                                                                  //              (terminated)
		.av_clken               (),                                                                                  //              (terminated)
		.uav_clken              (1'b0),                                                                              //              (terminated)
		.av_debugaccess         (),                                                                                  //              (terminated)
		.av_outputenable        (),                                                                                  //              (terminated)
		.uav_response           (),                                                                                  //              (terminated)
		.av_response            (2'b00),                                                                             //              (terminated)
		.uav_writeresponsevalid (),                                                                                  //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                                               //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) video_character_buffer_with_dma_0_avalon_char_control_slave_translator (
		.clk                    (clk_0_clk_clk),                                                                      //                      clk.clk
		.reset                  (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset),                         //                    reset.reset
		.uav_address            (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_m0_read),          //                         .read
		.uav_write              (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (video_character_buffer_with_dma_0_avalon_char_control_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (video_character_buffer_with_dma_0_avalon_char_control_slave_write),                  //                         .write
		.av_read                (video_character_buffer_with_dma_0_avalon_char_control_slave_read),                   //                         .read
		.av_readdata            (video_character_buffer_with_dma_0_avalon_char_control_slave_readdata),               //                         .readdata
		.av_writedata           (video_character_buffer_with_dma_0_avalon_char_control_slave_writedata),              //                         .writedata
		.av_byteenable          (video_character_buffer_with_dma_0_avalon_char_control_slave_byteenable),             //                         .byteenable
		.av_chipselect          (video_character_buffer_with_dma_0_avalon_char_control_slave_chipselect),             //                         .chipselect
		.av_begintransfer       (),                                                                                   //              (terminated)
		.av_beginbursttransfer  (),                                                                                   //              (terminated)
		.av_burstcount          (),                                                                                   //              (terminated)
		.av_readdatavalid       (1'b0),                                                                               //              (terminated)
		.av_waitrequest         (1'b0),                                                                               //              (terminated)
		.av_writebyteenable     (),                                                                                   //              (terminated)
		.av_lock                (),                                                                                   //              (terminated)
		.av_clken               (),                                                                                   //              (terminated)
		.uav_clken              (1'b0),                                                                               //              (terminated)
		.av_debugaccess         (),                                                                                   //              (terminated)
		.av_outputenable        (),                                                                                   //              (terminated)
		.uav_response           (),                                                                                   //              (terminated)
		.av_response            (2'b00),                                                                              //              (terminated)
		.uav_writeresponsevalid (),                                                                                   //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                                                //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) video_pixel_buffer_dma_0_avalon_control_slave_translator (
		.clk                    (clk_0_clk_clk),                                                        //                      clk.clk
		.reset                  (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset),           //                    reset.reset
		.uav_address            (video_pixel_buffer_dma_0_avalon_control_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (video_pixel_buffer_dma_0_avalon_control_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (video_pixel_buffer_dma_0_avalon_control_slave_agent_m0_read),          //                         .read
		.uav_write              (video_pixel_buffer_dma_0_avalon_control_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (video_pixel_buffer_dma_0_avalon_control_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (video_pixel_buffer_dma_0_avalon_control_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (video_pixel_buffer_dma_0_avalon_control_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (video_pixel_buffer_dma_0_avalon_control_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (video_pixel_buffer_dma_0_avalon_control_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (video_pixel_buffer_dma_0_avalon_control_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (video_pixel_buffer_dma_0_avalon_control_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (video_pixel_buffer_dma_0_avalon_control_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (video_pixel_buffer_dma_0_avalon_control_slave_write),                  //                         .write
		.av_read                (video_pixel_buffer_dma_0_avalon_control_slave_read),                   //                         .read
		.av_readdata            (video_pixel_buffer_dma_0_avalon_control_slave_readdata),               //                         .readdata
		.av_writedata           (video_pixel_buffer_dma_0_avalon_control_slave_writedata),              //                         .writedata
		.av_byteenable          (video_pixel_buffer_dma_0_avalon_control_slave_byteenable),             //                         .byteenable
		.av_begintransfer       (),                                                                     //              (terminated)
		.av_beginbursttransfer  (),                                                                     //              (terminated)
		.av_burstcount          (),                                                                     //              (terminated)
		.av_readdatavalid       (1'b0),                                                                 //              (terminated)
		.av_waitrequest         (1'b0),                                                                 //              (terminated)
		.av_writebyteenable     (),                                                                     //              (terminated)
		.av_lock                (),                                                                     //              (terminated)
		.av_chipselect          (),                                                                     //              (terminated)
		.av_clken               (),                                                                     //              (terminated)
		.uav_clken              (1'b0),                                                                 //              (terminated)
		.av_debugaccess         (),                                                                     //              (terminated)
		.av_outputenable        (),                                                                     //              (terminated)
		.uav_response           (),                                                                     //              (terminated)
		.av_response            (2'b00),                                                                //              (terminated)
		.uav_writeresponsevalid (),                                                                     //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                                  //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) jtag_uart_0_avalon_jtag_slave_translator (
		.clk                    (clk_0_clk_clk),                                              //                      clk.clk
		.reset                  (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (jtag_uart_0_avalon_jtag_slave_agent_m0_address),             // avalon_universal_slave_0.address
		.uav_burstcount         (jtag_uart_0_avalon_jtag_slave_agent_m0_burstcount),          //                         .burstcount
		.uav_read               (jtag_uart_0_avalon_jtag_slave_agent_m0_read),                //                         .read
		.uav_write              (jtag_uart_0_avalon_jtag_slave_agent_m0_write),               //                         .write
		.uav_waitrequest        (jtag_uart_0_avalon_jtag_slave_agent_m0_waitrequest),         //                         .waitrequest
		.uav_readdatavalid      (jtag_uart_0_avalon_jtag_slave_agent_m0_readdatavalid),       //                         .readdatavalid
		.uav_byteenable         (jtag_uart_0_avalon_jtag_slave_agent_m0_byteenable),          //                         .byteenable
		.uav_readdata           (jtag_uart_0_avalon_jtag_slave_agent_m0_readdata),            //                         .readdata
		.uav_writedata          (jtag_uart_0_avalon_jtag_slave_agent_m0_writedata),           //                         .writedata
		.uav_lock               (jtag_uart_0_avalon_jtag_slave_agent_m0_lock),                //                         .lock
		.uav_debugaccess        (jtag_uart_0_avalon_jtag_slave_agent_m0_debugaccess),         //                         .debugaccess
		.av_address             (jtag_uart_0_avalon_jtag_slave_address),                      //      avalon_anti_slave_0.address
		.av_write               (jtag_uart_0_avalon_jtag_slave_write),                        //                         .write
		.av_read                (jtag_uart_0_avalon_jtag_slave_read),                         //                         .read
		.av_readdata            (jtag_uart_0_avalon_jtag_slave_readdata),                     //                         .readdata
		.av_writedata           (jtag_uart_0_avalon_jtag_slave_writedata),                    //                         .writedata
		.av_waitrequest         (jtag_uart_0_avalon_jtag_slave_waitrequest),                  //                         .waitrequest
		.av_chipselect          (jtag_uart_0_avalon_jtag_slave_chipselect),                   //                         .chipselect
		.av_begintransfer       (),                                                           //              (terminated)
		.av_beginbursttransfer  (),                                                           //              (terminated)
		.av_burstcount          (),                                                           //              (terminated)
		.av_byteenable          (),                                                           //              (terminated)
		.av_readdatavalid       (1'b0),                                                       //              (terminated)
		.av_writebyteenable     (),                                                           //              (terminated)
		.av_lock                (),                                                           //              (terminated)
		.av_clken               (),                                                           //              (terminated)
		.uav_clken              (1'b0),                                                       //              (terminated)
		.av_debugaccess         (),                                                           //              (terminated)
		.av_outputenable        (),                                                           //              (terminated)
		.uav_response           (),                                                           //              (terminated)
		.av_response            (2'b00),                                                      //              (terminated)
		.uav_writeresponsevalid (),                                                           //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (4),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) performance_counter_0_control_slave_translator (
		.clk                    (clk_0_clk_clk),                                              //                      clk.clk
		.reset                  (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (performance_counter_0_control_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (performance_counter_0_control_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (performance_counter_0_control_slave_agent_m0_read),          //                         .read
		.uav_write              (performance_counter_0_control_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (performance_counter_0_control_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (performance_counter_0_control_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (performance_counter_0_control_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (performance_counter_0_control_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (performance_counter_0_control_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (performance_counter_0_control_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (performance_counter_0_control_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (performance_counter_0_control_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (performance_counter_0_control_slave_write),                  //                         .write
		.av_readdata            (performance_counter_0_control_slave_readdata),               //                         .readdata
		.av_writedata           (performance_counter_0_control_slave_writedata),              //                         .writedata
		.av_begintransfer       (performance_counter_0_control_slave_begintransfer),          //                         .begintransfer
		.av_read                (),                                                           //              (terminated)
		.av_beginbursttransfer  (),                                                           //              (terminated)
		.av_burstcount          (),                                                           //              (terminated)
		.av_byteenable          (),                                                           //              (terminated)
		.av_readdatavalid       (1'b0),                                                       //              (terminated)
		.av_waitrequest         (1'b0),                                                       //              (terminated)
		.av_writebyteenable     (),                                                           //              (terminated)
		.av_lock                (),                                                           //              (terminated)
		.av_chipselect          (),                                                           //              (terminated)
		.av_clken               (),                                                           //              (terminated)
		.uav_clken              (1'b0),                                                       //              (terminated)
		.av_debugaccess         (),                                                           //              (terminated)
		.av_outputenable        (),                                                           //              (terminated)
		.uav_response           (),                                                           //              (terminated)
		.av_response            (2'b00),                                                      //              (terminated)
		.uav_writeresponsevalid (),                                                           //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (9),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) nios2_qsys_0_jtag_debug_module_translator (
		.clk                    (clk_0_clk_clk),                                              //                      clk.clk
		.reset                  (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (nios2_qsys_0_jtag_debug_module_agent_m0_address),            // avalon_universal_slave_0.address
		.uav_burstcount         (nios2_qsys_0_jtag_debug_module_agent_m0_burstcount),         //                         .burstcount
		.uav_read               (nios2_qsys_0_jtag_debug_module_agent_m0_read),               //                         .read
		.uav_write              (nios2_qsys_0_jtag_debug_module_agent_m0_write),              //                         .write
		.uav_waitrequest        (nios2_qsys_0_jtag_debug_module_agent_m0_waitrequest),        //                         .waitrequest
		.uav_readdatavalid      (nios2_qsys_0_jtag_debug_module_agent_m0_readdatavalid),      //                         .readdatavalid
		.uav_byteenable         (nios2_qsys_0_jtag_debug_module_agent_m0_byteenable),         //                         .byteenable
		.uav_readdata           (nios2_qsys_0_jtag_debug_module_agent_m0_readdata),           //                         .readdata
		.uav_writedata          (nios2_qsys_0_jtag_debug_module_agent_m0_writedata),          //                         .writedata
		.uav_lock               (nios2_qsys_0_jtag_debug_module_agent_m0_lock),               //                         .lock
		.uav_debugaccess        (nios2_qsys_0_jtag_debug_module_agent_m0_debugaccess),        //                         .debugaccess
		.av_address             (nios2_qsys_0_jtag_debug_module_address),                     //      avalon_anti_slave_0.address
		.av_write               (nios2_qsys_0_jtag_debug_module_write),                       //                         .write
		.av_read                (nios2_qsys_0_jtag_debug_module_read),                        //                         .read
		.av_readdata            (nios2_qsys_0_jtag_debug_module_readdata),                    //                         .readdata
		.av_writedata           (nios2_qsys_0_jtag_debug_module_writedata),                   //                         .writedata
		.av_byteenable          (nios2_qsys_0_jtag_debug_module_byteenable),                  //                         .byteenable
		.av_waitrequest         (nios2_qsys_0_jtag_debug_module_waitrequest),                 //                         .waitrequest
		.av_debugaccess         (nios2_qsys_0_jtag_debug_module_debugaccess),                 //                         .debugaccess
		.av_begintransfer       (),                                                           //              (terminated)
		.av_beginbursttransfer  (),                                                           //              (terminated)
		.av_burstcount          (),                                                           //              (terminated)
		.av_readdatavalid       (1'b0),                                                       //              (terminated)
		.av_writebyteenable     (),                                                           //              (terminated)
		.av_lock                (),                                                           //              (terminated)
		.av_chipselect          (),                                                           //              (terminated)
		.av_clken               (),                                                           //              (terminated)
		.uav_clken              (1'b0),                                                       //              (terminated)
		.av_outputenable        (),                                                           //              (terminated)
		.uav_response           (),                                                           //              (terminated)
		.av_response            (2'b00),                                                      //              (terminated)
		.uav_writeresponsevalid (),                                                           //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (25),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) new_sdram_controller_0_s1_translator (
		.clk                    (clk_0_clk_clk),                                              //                      clk.clk
		.reset                  (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (new_sdram_controller_0_s1_agent_m0_address),                 // avalon_universal_slave_0.address
		.uav_burstcount         (new_sdram_controller_0_s1_agent_m0_burstcount),              //                         .burstcount
		.uav_read               (new_sdram_controller_0_s1_agent_m0_read),                    //                         .read
		.uav_write              (new_sdram_controller_0_s1_agent_m0_write),                   //                         .write
		.uav_waitrequest        (new_sdram_controller_0_s1_agent_m0_waitrequest),             //                         .waitrequest
		.uav_readdatavalid      (new_sdram_controller_0_s1_agent_m0_readdatavalid),           //                         .readdatavalid
		.uav_byteenable         (new_sdram_controller_0_s1_agent_m0_byteenable),              //                         .byteenable
		.uav_readdata           (new_sdram_controller_0_s1_agent_m0_readdata),                //                         .readdata
		.uav_writedata          (new_sdram_controller_0_s1_agent_m0_writedata),               //                         .writedata
		.uav_lock               (new_sdram_controller_0_s1_agent_m0_lock),                    //                         .lock
		.uav_debugaccess        (new_sdram_controller_0_s1_agent_m0_debugaccess),             //                         .debugaccess
		.av_address             (new_sdram_controller_0_s1_address),                          //      avalon_anti_slave_0.address
		.av_write               (new_sdram_controller_0_s1_write),                            //                         .write
		.av_read                (new_sdram_controller_0_s1_read),                             //                         .read
		.av_readdata            (new_sdram_controller_0_s1_readdata),                         //                         .readdata
		.av_writedata           (new_sdram_controller_0_s1_writedata),                        //                         .writedata
		.av_byteenable          (new_sdram_controller_0_s1_byteenable),                       //                         .byteenable
		.av_readdatavalid       (new_sdram_controller_0_s1_readdatavalid),                    //                         .readdatavalid
		.av_waitrequest         (new_sdram_controller_0_s1_waitrequest),                      //                         .waitrequest
		.av_chipselect          (new_sdram_controller_0_s1_chipselect),                       //                         .chipselect
		.av_begintransfer       (),                                                           //              (terminated)
		.av_beginbursttransfer  (),                                                           //              (terminated)
		.av_burstcount          (),                                                           //              (terminated)
		.av_writebyteenable     (),                                                           //              (terminated)
		.av_lock                (),                                                           //              (terminated)
		.av_clken               (),                                                           //              (terminated)
		.uav_clken              (1'b0),                                                       //              (terminated)
		.av_debugaccess         (),                                                           //              (terminated)
		.av_outputenable        (),                                                           //              (terminated)
		.uav_response           (),                                                           //              (terminated)
		.av_response            (2'b00),                                                      //              (terminated)
		.uav_writeresponsevalid (),                                                           //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) rleds_s1_translator (
		.clk                    (clk_0_clk_clk),                                              //                      clk.clk
		.reset                  (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (rleds_s1_agent_m0_address),                                  // avalon_universal_slave_0.address
		.uav_burstcount         (rleds_s1_agent_m0_burstcount),                               //                         .burstcount
		.uav_read               (rleds_s1_agent_m0_read),                                     //                         .read
		.uav_write              (rleds_s1_agent_m0_write),                                    //                         .write
		.uav_waitrequest        (rleds_s1_agent_m0_waitrequest),                              //                         .waitrequest
		.uav_readdatavalid      (rleds_s1_agent_m0_readdatavalid),                            //                         .readdatavalid
		.uav_byteenable         (rleds_s1_agent_m0_byteenable),                               //                         .byteenable
		.uav_readdata           (rleds_s1_agent_m0_readdata),                                 //                         .readdata
		.uav_writedata          (rleds_s1_agent_m0_writedata),                                //                         .writedata
		.uav_lock               (rleds_s1_agent_m0_lock),                                     //                         .lock
		.uav_debugaccess        (rleds_s1_agent_m0_debugaccess),                              //                         .debugaccess
		.av_address             (rleds_s1_address),                                           //      avalon_anti_slave_0.address
		.av_write               (rleds_s1_write),                                             //                         .write
		.av_readdata            (rleds_s1_readdata),                                          //                         .readdata
		.av_writedata           (rleds_s1_writedata),                                         //                         .writedata
		.av_chipselect          (rleds_s1_chipselect),                                        //                         .chipselect
		.av_read                (),                                                           //              (terminated)
		.av_begintransfer       (),                                                           //              (terminated)
		.av_beginbursttransfer  (),                                                           //              (terminated)
		.av_burstcount          (),                                                           //              (terminated)
		.av_byteenable          (),                                                           //              (terminated)
		.av_readdatavalid       (1'b0),                                                       //              (terminated)
		.av_waitrequest         (1'b0),                                                       //              (terminated)
		.av_writebyteenable     (),                                                           //              (terminated)
		.av_lock                (),                                                           //              (terminated)
		.av_clken               (),                                                           //              (terminated)
		.uav_clken              (1'b0),                                                       //              (terminated)
		.av_debugaccess         (),                                                           //              (terminated)
		.av_outputenable        (),                                                           //              (terminated)
		.uav_response           (),                                                           //              (terminated)
		.av_response            (2'b00),                                                      //              (terminated)
		.uav_writeresponsevalid (),                                                           //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) gleds_s1_translator (
		.clk                    (clk_0_clk_clk),                                              //                      clk.clk
		.reset                  (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (gleds_s1_agent_m0_address),                                  // avalon_universal_slave_0.address
		.uav_burstcount         (gleds_s1_agent_m0_burstcount),                               //                         .burstcount
		.uav_read               (gleds_s1_agent_m0_read),                                     //                         .read
		.uav_write              (gleds_s1_agent_m0_write),                                    //                         .write
		.uav_waitrequest        (gleds_s1_agent_m0_waitrequest),                              //                         .waitrequest
		.uav_readdatavalid      (gleds_s1_agent_m0_readdatavalid),                            //                         .readdatavalid
		.uav_byteenable         (gleds_s1_agent_m0_byteenable),                               //                         .byteenable
		.uav_readdata           (gleds_s1_agent_m0_readdata),                                 //                         .readdata
		.uav_writedata          (gleds_s1_agent_m0_writedata),                                //                         .writedata
		.uav_lock               (gleds_s1_agent_m0_lock),                                     //                         .lock
		.uav_debugaccess        (gleds_s1_agent_m0_debugaccess),                              //                         .debugaccess
		.av_address             (gleds_s1_address),                                           //      avalon_anti_slave_0.address
		.av_write               (gleds_s1_write),                                             //                         .write
		.av_readdata            (gleds_s1_readdata),                                          //                         .readdata
		.av_writedata           (gleds_s1_writedata),                                         //                         .writedata
		.av_chipselect          (gleds_s1_chipselect),                                        //                         .chipselect
		.av_read                (),                                                           //              (terminated)
		.av_begintransfer       (),                                                           //              (terminated)
		.av_beginbursttransfer  (),                                                           //              (terminated)
		.av_burstcount          (),                                                           //              (terminated)
		.av_byteenable          (),                                                           //              (terminated)
		.av_readdatavalid       (1'b0),                                                       //              (terminated)
		.av_waitrequest         (1'b0),                                                       //              (terminated)
		.av_writebyteenable     (),                                                           //              (terminated)
		.av_lock                (),                                                           //              (terminated)
		.av_clken               (),                                                           //              (terminated)
		.uav_clken              (1'b0),                                                       //              (terminated)
		.av_debugaccess         (),                                                           //              (terminated)
		.av_outputenable        (),                                                           //              (terminated)
		.uav_response           (),                                                           //              (terminated)
		.av_response            (2'b00),                                                      //              (terminated)
		.uav_writeresponsevalid (),                                                           //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) switches_s1_translator (
		.clk                    (clk_0_clk_clk),                                              //                      clk.clk
		.reset                  (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (switches_s1_agent_m0_address),                               // avalon_universal_slave_0.address
		.uav_burstcount         (switches_s1_agent_m0_burstcount),                            //                         .burstcount
		.uav_read               (switches_s1_agent_m0_read),                                  //                         .read
		.uav_write              (switches_s1_agent_m0_write),                                 //                         .write
		.uav_waitrequest        (switches_s1_agent_m0_waitrequest),                           //                         .waitrequest
		.uav_readdatavalid      (switches_s1_agent_m0_readdatavalid),                         //                         .readdatavalid
		.uav_byteenable         (switches_s1_agent_m0_byteenable),                            //                         .byteenable
		.uav_readdata           (switches_s1_agent_m0_readdata),                              //                         .readdata
		.uav_writedata          (switches_s1_agent_m0_writedata),                             //                         .writedata
		.uav_lock               (switches_s1_agent_m0_lock),                                  //                         .lock
		.uav_debugaccess        (switches_s1_agent_m0_debugaccess),                           //                         .debugaccess
		.av_address             (switches_s1_address),                                        //      avalon_anti_slave_0.address
		.av_readdata            (switches_s1_readdata),                                       //                         .readdata
		.av_write               (),                                                           //              (terminated)
		.av_read                (),                                                           //              (terminated)
		.av_writedata           (),                                                           //              (terminated)
		.av_begintransfer       (),                                                           //              (terminated)
		.av_beginbursttransfer  (),                                                           //              (terminated)
		.av_burstcount          (),                                                           //              (terminated)
		.av_byteenable          (),                                                           //              (terminated)
		.av_readdatavalid       (1'b0),                                                       //              (terminated)
		.av_waitrequest         (1'b0),                                                       //              (terminated)
		.av_writebyteenable     (),                                                           //              (terminated)
		.av_lock                (),                                                           //              (terminated)
		.av_chipselect          (),                                                           //              (terminated)
		.av_clken               (),                                                           //              (terminated)
		.uav_clken              (1'b0),                                                       //              (terminated)
		.av_debugaccess         (),                                                           //              (terminated)
		.av_outputenable        (),                                                           //              (terminated)
		.uav_response           (),                                                           //              (terminated)
		.av_response            (2'b00),                                                      //              (terminated)
		.uav_writeresponsevalid (),                                                           //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (23),
		.AV_DATA_W                      (8),
		.UAV_DATA_W                     (8),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (1),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (1),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (1),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (1),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) generic_tristate_controller_0_uas_translator (
		.clk                    (clk_0_clk_clk),                                              //                      clk.clk
		.reset                  (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (generic_tristate_controller_0_uas_agent_m0_address),         // avalon_universal_slave_0.address
		.uav_burstcount         (generic_tristate_controller_0_uas_agent_m0_burstcount),      //                         .burstcount
		.uav_read               (generic_tristate_controller_0_uas_agent_m0_read),            //                         .read
		.uav_write              (generic_tristate_controller_0_uas_agent_m0_write),           //                         .write
		.uav_waitrequest        (generic_tristate_controller_0_uas_agent_m0_waitrequest),     //                         .waitrequest
		.uav_readdatavalid      (generic_tristate_controller_0_uas_agent_m0_readdatavalid),   //                         .readdatavalid
		.uav_byteenable         (generic_tristate_controller_0_uas_agent_m0_byteenable),      //                         .byteenable
		.uav_readdata           (generic_tristate_controller_0_uas_agent_m0_readdata),        //                         .readdata
		.uav_writedata          (generic_tristate_controller_0_uas_agent_m0_writedata),       //                         .writedata
		.uav_lock               (generic_tristate_controller_0_uas_agent_m0_lock),            //                         .lock
		.uav_debugaccess        (generic_tristate_controller_0_uas_agent_m0_debugaccess),     //                         .debugaccess
		.av_address             (generic_tristate_controller_0_uas_address),                  //      avalon_anti_slave_0.address
		.av_write               (generic_tristate_controller_0_uas_write),                    //                         .write
		.av_read                (generic_tristate_controller_0_uas_read),                     //                         .read
		.av_readdata            (generic_tristate_controller_0_uas_readdata),                 //                         .readdata
		.av_writedata           (generic_tristate_controller_0_uas_writedata),                //                         .writedata
		.av_burstcount          (generic_tristate_controller_0_uas_burstcount),               //                         .burstcount
		.av_byteenable          (generic_tristate_controller_0_uas_byteenable),               //                         .byteenable
		.av_readdatavalid       (generic_tristate_controller_0_uas_readdatavalid),            //                         .readdatavalid
		.av_waitrequest         (generic_tristate_controller_0_uas_waitrequest),              //                         .waitrequest
		.av_lock                (generic_tristate_controller_0_uas_lock),                     //                         .lock
		.av_debugaccess         (generic_tristate_controller_0_uas_debugaccess),              //                         .debugaccess
		.av_begintransfer       (),                                                           //              (terminated)
		.av_beginbursttransfer  (),                                                           //              (terminated)
		.av_writebyteenable     (),                                                           //              (terminated)
		.av_chipselect          (),                                                           //              (terminated)
		.av_clken               (),                                                           //              (terminated)
		.uav_clken              (1'b0),                                                       //              (terminated)
		.av_outputenable        (),                                                           //              (terminated)
		.uav_response           (),                                                           //              (terminated)
		.av_response            (2'b00),                                                      //              (terminated)
		.uav_writeresponsevalid (),                                                           //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                        //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (91),
		.PKT_ORI_BURST_SIZE_L      (89),
		.PKT_RESPONSE_STATUS_H     (88),
		.PKT_RESPONSE_STATUS_L     (87),
		.PKT_QOS_H                 (70),
		.PKT_QOS_L                 (70),
		.PKT_DATA_SIDEBAND_H       (68),
		.PKT_DATA_SIDEBAND_L       (68),
		.PKT_ADDR_SIDEBAND_H       (67),
		.PKT_ADDR_SIDEBAND_L       (67),
		.PKT_BURST_TYPE_H          (66),
		.PKT_BURST_TYPE_L          (65),
		.PKT_CACHE_H               (86),
		.PKT_CACHE_L               (83),
		.PKT_THREAD_ID_H           (79),
		.PKT_THREAD_ID_L           (79),
		.PKT_BURST_SIZE_H          (64),
		.PKT_BURST_SIZE_L          (62),
		.PKT_TRANS_EXCLUSIVE       (55),
		.PKT_TRANS_LOCK            (54),
		.PKT_BEGIN_BURST           (69),
		.PKT_PROTECTION_H          (82),
		.PKT_PROTECTION_L          (80),
		.PKT_BURSTWRAP_H           (61),
		.PKT_BURSTWRAP_L           (59),
		.PKT_BYTE_CNT_H            (58),
		.PKT_BYTE_CNT_L            (56),
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (18),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_POSTED          (51),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.PKT_DATA_H                (15),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_SRC_ID_H              (74),
		.PKT_SRC_ID_L              (71),
		.PKT_DEST_ID_H             (78),
		.PKT_DEST_ID_L             (75),
		.ST_DATA_W                 (92),
		.ST_CHANNEL_W              (12),
		.AV_BURSTCOUNT_W           (2),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (2),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) video_pixel_buffer_dma_0_avalon_pixel_dma_master_agent (
		.clk                   (clk_0_clk_clk),                                                                                       //       clk.clk
		.reset                 (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset),                                          // clk_reset.reset
		.av_address            (video_pixel_buffer_dma_0_avalon_pixel_dma_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (video_pixel_buffer_dma_0_avalon_pixel_dma_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (video_pixel_buffer_dma_0_avalon_pixel_dma_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (video_pixel_buffer_dma_0_avalon_pixel_dma_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (video_pixel_buffer_dma_0_avalon_pixel_dma_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (video_pixel_buffer_dma_0_avalon_pixel_dma_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (video_pixel_buffer_dma_0_avalon_pixel_dma_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (video_pixel_buffer_dma_0_avalon_pixel_dma_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (video_pixel_buffer_dma_0_avalon_pixel_dma_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (video_pixel_buffer_dma_0_avalon_pixel_dma_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (video_pixel_buffer_dma_0_avalon_pixel_dma_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (video_pixel_buffer_dma_0_avalon_pixel_dma_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (video_pixel_buffer_dma_0_avalon_pixel_dma_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (video_pixel_buffer_dma_0_avalon_pixel_dma_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (video_pixel_buffer_dma_0_avalon_pixel_dma_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (video_pixel_buffer_dma_0_avalon_pixel_dma_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_src_valid),                                                                                   //        rp.valid
		.rp_data               (rsp_mux_src_data),                                                                                    //          .data
		.rp_channel            (rsp_mux_src_channel),                                                                                 //          .channel
		.rp_startofpacket      (rsp_mux_src_startofpacket),                                                                           //          .startofpacket
		.rp_endofpacket        (rsp_mux_src_endofpacket),                                                                             //          .endofpacket
		.rp_ready              (rsp_mux_src_ready),                                                                                   //          .ready
		.av_response           (),                                                                                                    // (terminated)
		.av_writeresponsevalid ()                                                                                                     // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (109),
		.PKT_ORI_BURST_SIZE_L      (107),
		.PKT_RESPONSE_STATUS_H     (106),
		.PKT_RESPONSE_STATUS_L     (105),
		.PKT_QOS_H                 (88),
		.PKT_QOS_L                 (88),
		.PKT_DATA_SIDEBAND_H       (86),
		.PKT_DATA_SIDEBAND_L       (86),
		.PKT_ADDR_SIDEBAND_H       (85),
		.PKT_ADDR_SIDEBAND_L       (85),
		.PKT_BURST_TYPE_H          (84),
		.PKT_BURST_TYPE_L          (83),
		.PKT_CACHE_H               (104),
		.PKT_CACHE_L               (101),
		.PKT_THREAD_ID_H           (97),
		.PKT_THREAD_ID_L           (97),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (100),
		.PKT_PROTECTION_L          (98),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (92),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (93),
		.ST_DATA_W                 (110),
		.ST_CHANNEL_W              (12),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) nios2_qsys_0_data_master_agent (
		.clk                   (clk_0_clk_clk),                                                               //       clk.clk
		.reset                 (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.av_address            (nios2_qsys_0_data_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (nios2_qsys_0_data_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (nios2_qsys_0_data_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (nios2_qsys_0_data_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (nios2_qsys_0_data_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (nios2_qsys_0_data_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (nios2_qsys_0_data_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (nios2_qsys_0_data_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (nios2_qsys_0_data_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (nios2_qsys_0_data_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (nios2_qsys_0_data_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (nios2_qsys_0_data_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (nios2_qsys_0_data_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (nios2_qsys_0_data_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (nios2_qsys_0_data_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (nios2_qsys_0_data_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (nios2_qsys_0_data_master_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (nios2_qsys_0_data_master_limiter_rsp_src_data),                               //          .data
		.rp_channel            (nios2_qsys_0_data_master_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (nios2_qsys_0_data_master_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (nios2_qsys_0_data_master_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (nios2_qsys_0_data_master_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                            // (terminated)
		.av_writeresponsevalid ()                                                                             // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (109),
		.PKT_ORI_BURST_SIZE_L      (107),
		.PKT_RESPONSE_STATUS_H     (106),
		.PKT_RESPONSE_STATUS_L     (105),
		.PKT_QOS_H                 (88),
		.PKT_QOS_L                 (88),
		.PKT_DATA_SIDEBAND_H       (86),
		.PKT_DATA_SIDEBAND_L       (86),
		.PKT_ADDR_SIDEBAND_H       (85),
		.PKT_ADDR_SIDEBAND_L       (85),
		.PKT_BURST_TYPE_H          (84),
		.PKT_BURST_TYPE_L          (83),
		.PKT_CACHE_H               (104),
		.PKT_CACHE_L               (101),
		.PKT_THREAD_ID_H           (97),
		.PKT_THREAD_ID_L           (97),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (100),
		.PKT_PROTECTION_L          (98),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (92),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (93),
		.ST_DATA_W                 (110),
		.ST_CHANNEL_W              (12),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (1),
		.BURSTWRAP_VALUE           (3),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) nios2_qsys_0_instruction_master_agent (
		.clk                   (clk_0_clk_clk),                                                                      //       clk.clk
		.reset                 (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset),                         // clk_reset.reset
		.av_address            (nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (nios2_qsys_0_instruction_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (nios2_qsys_0_instruction_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (nios2_qsys_0_instruction_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (nios2_qsys_0_instruction_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (nios2_qsys_0_instruction_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (nios2_qsys_0_instruction_master_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (nios2_qsys_0_instruction_master_limiter_rsp_src_data),                               //          .data
		.rp_channel            (nios2_qsys_0_instruction_master_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (nios2_qsys_0_instruction_master_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (nios2_qsys_0_instruction_master_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (nios2_qsys_0_instruction_master_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                                   // (terminated)
		.av_writeresponsevalid ()                                                                                    // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (91),
		.PKT_ORI_BURST_SIZE_L      (89),
		.PKT_RESPONSE_STATUS_H     (88),
		.PKT_RESPONSE_STATUS_L     (87),
		.PKT_BURST_SIZE_H          (64),
		.PKT_BURST_SIZE_L          (62),
		.PKT_TRANS_LOCK            (54),
		.PKT_BEGIN_BURST           (69),
		.PKT_PROTECTION_H          (82),
		.PKT_PROTECTION_L          (80),
		.PKT_BURSTWRAP_H           (61),
		.PKT_BURSTWRAP_L           (59),
		.PKT_BYTE_CNT_H            (58),
		.PKT_BYTE_CNT_L            (56),
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (18),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_POSTED          (51),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.PKT_DATA_H                (15),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_SRC_ID_H              (74),
		.PKT_SRC_ID_L              (71),
		.PKT_DEST_ID_H             (78),
		.PKT_DEST_ID_L             (75),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (12),
		.ST_DATA_W                 (92),
		.AVS_BURSTCOUNT_W          (2),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sram_0_avalon_sram_slave_agent (
		.clk                     (clk_0_clk_clk),                                                //             clk.clk
		.reset                   (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset),   //       clk_reset.reset
		.m0_address              (sram_0_avalon_sram_slave_agent_m0_address),                    //              m0.address
		.m0_burstcount           (sram_0_avalon_sram_slave_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (sram_0_avalon_sram_slave_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (sram_0_avalon_sram_slave_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (sram_0_avalon_sram_slave_agent_m0_lock),                       //                .lock
		.m0_readdata             (sram_0_avalon_sram_slave_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (sram_0_avalon_sram_slave_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (sram_0_avalon_sram_slave_agent_m0_read),                       //                .read
		.m0_waitrequest          (sram_0_avalon_sram_slave_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (sram_0_avalon_sram_slave_agent_m0_writedata),                  //                .writedata
		.m0_write                (sram_0_avalon_sram_slave_agent_m0_write),                      //                .write
		.rp_endofpacket          (sram_0_avalon_sram_slave_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (sram_0_avalon_sram_slave_agent_rp_ready),                      //                .ready
		.rp_valid                (sram_0_avalon_sram_slave_agent_rp_valid),                      //                .valid
		.rp_data                 (sram_0_avalon_sram_slave_agent_rp_data),                       //                .data
		.rp_startofpacket        (sram_0_avalon_sram_slave_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (sram_0_avalon_sram_slave_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (sram_0_avalon_sram_slave_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (sram_0_avalon_sram_slave_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (sram_0_avalon_sram_slave_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (sram_0_avalon_sram_slave_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (sram_0_avalon_sram_slave_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (sram_0_avalon_sram_slave_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (sram_0_avalon_sram_slave_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (sram_0_avalon_sram_slave_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (sram_0_avalon_sram_slave_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (sram_0_avalon_sram_slave_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (sram_0_avalon_sram_slave_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (sram_0_avalon_sram_slave_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (sram_0_avalon_sram_slave_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (sram_0_avalon_sram_slave_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (sram_0_avalon_sram_slave_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                                // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                                //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                                 //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                                //                .error
		.rdata_fifo_src_ready    (sram_0_avalon_sram_slave_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sram_0_avalon_sram_slave_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (sram_0_avalon_sram_slave_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (93),
		.FIFO_DEPTH          (3),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sram_0_avalon_sram_slave_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                              //       clk.clk
		.reset             (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sram_0_avalon_sram_slave_agent_rf_source_data),              //        in.data
		.in_valid          (sram_0_avalon_sram_slave_agent_rf_source_valid),             //          .valid
		.in_ready          (sram_0_avalon_sram_slave_agent_rf_source_ready),             //          .ready
		.in_startofpacket  (sram_0_avalon_sram_slave_agent_rf_source_startofpacket),     //          .startofpacket
		.in_endofpacket    (sram_0_avalon_sram_slave_agent_rf_source_endofpacket),       //          .endofpacket
		.out_data          (sram_0_avalon_sram_slave_agent_rsp_fifo_out_data),           //       out.data
		.out_valid         (sram_0_avalon_sram_slave_agent_rsp_fifo_out_valid),          //          .valid
		.out_ready         (sram_0_avalon_sram_slave_agent_rsp_fifo_out_ready),          //          .ready
		.out_startofpacket (sram_0_avalon_sram_slave_agent_rsp_fifo_out_startofpacket),  //          .startofpacket
		.out_endofpacket   (sram_0_avalon_sram_slave_agent_rsp_fifo_out_endofpacket),    //          .endofpacket
		.csr_address       (2'b00),                                                      // (terminated)
		.csr_read          (1'b0),                                                       // (terminated)
		.csr_write         (1'b0),                                                       // (terminated)
		.csr_readdata      (),                                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                       // (terminated)
		.almost_full_data  (),                                                           // (terminated)
		.almost_empty_data (),                                                           // (terminated)
		.in_empty          (1'b0),                                                       // (terminated)
		.out_empty         (),                                                           // (terminated)
		.in_error          (1'b0),                                                       // (terminated)
		.out_error         (),                                                           // (terminated)
		.in_channel        (1'b0),                                                       // (terminated)
		.out_channel       ()                                                            // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (18),
		.FIFO_DEPTH          (3),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sram_0_avalon_sram_slave_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                              //       clk.clk
		.reset             (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sram_0_avalon_sram_slave_agent_rdata_fifo_src_data),         //        in.data
		.in_valid          (sram_0_avalon_sram_slave_agent_rdata_fifo_src_valid),        //          .valid
		.in_ready          (sram_0_avalon_sram_slave_agent_rdata_fifo_src_ready),        //          .ready
		.out_data          (sram_0_avalon_sram_slave_agent_rdata_fifo_out_data),         //       out.data
		.out_valid         (sram_0_avalon_sram_slave_agent_rdata_fifo_out_valid),        //          .valid
		.out_ready         (sram_0_avalon_sram_slave_agent_rdata_fifo_out_ready),        //          .ready
		.csr_address       (2'b00),                                                      // (terminated)
		.csr_read          (1'b0),                                                       // (terminated)
		.csr_write         (1'b0),                                                       // (terminated)
		.csr_readdata      (),                                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                       // (terminated)
		.almost_full_data  (),                                                           // (terminated)
		.almost_empty_data (),                                                           // (terminated)
		.in_startofpacket  (1'b0),                                                       // (terminated)
		.in_endofpacket    (1'b0),                                                       // (terminated)
		.out_startofpacket (),                                                           // (terminated)
		.out_endofpacket   (),                                                           // (terminated)
		.in_empty          (1'b0),                                                       // (terminated)
		.out_empty         (),                                                           // (terminated)
		.in_error          (1'b0),                                                       // (terminated)
		.out_error         (),                                                           // (terminated)
		.in_channel        (1'b0),                                                       // (terminated)
		.out_channel       ()                                                            // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (82),
		.PKT_ORI_BURST_SIZE_L      (80),
		.PKT_RESPONSE_STATUS_H     (79),
		.PKT_RESPONSE_STATUS_L     (78),
		.PKT_BURST_SIZE_H          (55),
		.PKT_BURST_SIZE_L          (53),
		.PKT_TRANS_LOCK            (45),
		.PKT_BEGIN_BURST           (60),
		.PKT_PROTECTION_H          (73),
		.PKT_PROTECTION_L          (71),
		.PKT_BURSTWRAP_H           (52),
		.PKT_BURSTWRAP_L           (50),
		.PKT_BYTE_CNT_H            (49),
		.PKT_BYTE_CNT_L            (47),
		.PKT_ADDR_H                (40),
		.PKT_ADDR_L                (9),
		.PKT_TRANS_COMPRESSED_READ (41),
		.PKT_TRANS_POSTED          (42),
		.PKT_TRANS_WRITE           (43),
		.PKT_TRANS_READ            (44),
		.PKT_DATA_H                (7),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_SRC_ID_H              (65),
		.PKT_SRC_ID_L              (62),
		.PKT_DEST_ID_H             (69),
		.PKT_DEST_ID_L             (66),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (12),
		.ST_DATA_W                 (83),
		.AVS_BURSTCOUNT_W          (1),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent (
		.clk                     (clk_0_clk_clk),                                                                                  //             clk.clk
		.reset                   (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset),                                     //       clk_reset.reset
		.m0_address              (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_m0_address),                    //              m0.address
		.m0_burstcount           (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_m0_lock),                       //                .lock
		.m0_readdata             (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_m0_read),                       //                .read
		.m0_waitrequest          (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_m0_writedata),                  //                .writedata
		.m0_write                (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_m0_write),                      //                .write
		.rp_endofpacket          (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rp_ready),                      //                .ready
		.rp_valid                (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rp_valid),                      //                .valid
		.rp_data                 (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rp_data),                       //                .data
		.rp_startofpacket        (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (video_character_buffer_with_dma_0_avalon_char_buffer_slave_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (video_character_buffer_with_dma_0_avalon_char_buffer_slave_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (video_character_buffer_with_dma_0_avalon_char_buffer_slave_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (video_character_buffer_with_dma_0_avalon_char_buffer_slave_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (video_character_buffer_with_dma_0_avalon_char_buffer_slave_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (video_character_buffer_with_dma_0_avalon_char_buffer_slave_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_001_out_0_ready),                                                              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_001_out_0_valid),                                                              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_001_out_0_data),                                                               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_001_out_0_error),                                                              //                .error
		.rdata_fifo_src_ready    (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (84),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                                               //       clk.clk
		.reset             (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset),                                  // clk_reset.reset
		.in_data           (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rf_source_data),             //        in.data
		.in_valid          (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                                       // (terminated)
		.csr_read          (1'b0),                                                                                        // (terminated)
		.csr_write         (1'b0),                                                                                        // (terminated)
		.csr_readdata      (),                                                                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                                        // (terminated)
		.almost_full_data  (),                                                                                            // (terminated)
		.almost_empty_data (),                                                                                            // (terminated)
		.in_empty          (1'b0),                                                                                        // (terminated)
		.out_empty         (),                                                                                            // (terminated)
		.in_error          (1'b0),                                                                                        // (terminated)
		.out_error         (),                                                                                            // (terminated)
		.in_channel        (1'b0),                                                                                        // (terminated)
		.out_channel       ()                                                                                             // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (109),
		.PKT_ORI_BURST_SIZE_L      (107),
		.PKT_RESPONSE_STATUS_H     (106),
		.PKT_RESPONSE_STATUS_L     (105),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (100),
		.PKT_PROTECTION_L          (98),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (92),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (93),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (12),
		.ST_DATA_W                 (110),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) video_character_buffer_with_dma_0_avalon_char_control_slave_agent (
		.clk                     (clk_0_clk_clk),                                                                                //             clk.clk
		.reset                   (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset),                                   //       clk_reset.reset
		.m0_address              (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_002_src_ready),                                                                        //              cp.ready
		.cp_valid                (cmd_mux_002_src_valid),                                                                        //                .valid
		.cp_data                 (cmd_mux_002_src_data),                                                                         //                .data
		.cp_startofpacket        (cmd_mux_002_src_startofpacket),                                                                //                .startofpacket
		.cp_endofpacket          (cmd_mux_002_src_endofpacket),                                                                  //                .endofpacket
		.cp_channel              (cmd_mux_002_src_channel),                                                                      //                .channel
		.rf_sink_ready           (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_002_out_0_ready),                                                            // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_002_out_0_valid),                                                            //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_002_out_0_data),                                                             //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_002_out_0_error),                                                            //                .error
		.rdata_fifo_src_ready    (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (111),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                                                //       clk.clk
		.reset             (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset),                                   // clk_reset.reset
		.in_data           (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rf_source_data),             //        in.data
		.in_valid          (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                                        // (terminated)
		.csr_read          (1'b0),                                                                                         // (terminated)
		.csr_write         (1'b0),                                                                                         // (terminated)
		.csr_readdata      (),                                                                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                                         // (terminated)
		.almost_full_data  (),                                                                                             // (terminated)
		.almost_empty_data (),                                                                                             // (terminated)
		.in_empty          (1'b0),                                                                                         // (terminated)
		.out_empty         (),                                                                                             // (terminated)
		.in_error          (1'b0),                                                                                         // (terminated)
		.out_error         (),                                                                                             // (terminated)
		.in_channel        (1'b0),                                                                                         // (terminated)
		.out_channel       ()                                                                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (109),
		.PKT_ORI_BURST_SIZE_L      (107),
		.PKT_RESPONSE_STATUS_H     (106),
		.PKT_RESPONSE_STATUS_L     (105),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (100),
		.PKT_PROTECTION_L          (98),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (92),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (93),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (12),
		.ST_DATA_W                 (110),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) video_pixel_buffer_dma_0_avalon_control_slave_agent (
		.clk                     (clk_0_clk_clk),                                                                  //             clk.clk
		.reset                   (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset),                     //       clk_reset.reset
		.m0_address              (video_pixel_buffer_dma_0_avalon_control_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (video_pixel_buffer_dma_0_avalon_control_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (video_pixel_buffer_dma_0_avalon_control_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (video_pixel_buffer_dma_0_avalon_control_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (video_pixel_buffer_dma_0_avalon_control_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (video_pixel_buffer_dma_0_avalon_control_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (video_pixel_buffer_dma_0_avalon_control_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (video_pixel_buffer_dma_0_avalon_control_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (video_pixel_buffer_dma_0_avalon_control_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (video_pixel_buffer_dma_0_avalon_control_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (video_pixel_buffer_dma_0_avalon_control_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (video_pixel_buffer_dma_0_avalon_control_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (video_pixel_buffer_dma_0_avalon_control_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (video_pixel_buffer_dma_0_avalon_control_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (video_pixel_buffer_dma_0_avalon_control_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (video_pixel_buffer_dma_0_avalon_control_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_003_src_ready),                                                          //              cp.ready
		.cp_valid                (cmd_mux_003_src_valid),                                                          //                .valid
		.cp_data                 (cmd_mux_003_src_data),                                                           //                .data
		.cp_startofpacket        (cmd_mux_003_src_startofpacket),                                                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_003_src_endofpacket),                                                    //                .endofpacket
		.cp_channel              (cmd_mux_003_src_channel),                                                        //                .channel
		.rf_sink_ready           (video_pixel_buffer_dma_0_avalon_control_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (video_pixel_buffer_dma_0_avalon_control_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (video_pixel_buffer_dma_0_avalon_control_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (video_pixel_buffer_dma_0_avalon_control_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (video_pixel_buffer_dma_0_avalon_control_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (video_pixel_buffer_dma_0_avalon_control_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (video_pixel_buffer_dma_0_avalon_control_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (video_pixel_buffer_dma_0_avalon_control_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (video_pixel_buffer_dma_0_avalon_control_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (video_pixel_buffer_dma_0_avalon_control_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_003_out_0_ready),                                              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_003_out_0_valid),                                              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_003_out_0_data),                                               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_003_out_0_error),                                              //                .error
		.rdata_fifo_src_ready    (video_pixel_buffer_dma_0_avalon_control_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (video_pixel_buffer_dma_0_avalon_control_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (video_pixel_buffer_dma_0_avalon_control_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (111),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) video_pixel_buffer_dma_0_avalon_control_slave_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                                  //       clk.clk
		.reset             (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset),                     // clk_reset.reset
		.in_data           (video_pixel_buffer_dma_0_avalon_control_slave_agent_rf_source_data),             //        in.data
		.in_valid          (video_pixel_buffer_dma_0_avalon_control_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (video_pixel_buffer_dma_0_avalon_control_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (video_pixel_buffer_dma_0_avalon_control_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (video_pixel_buffer_dma_0_avalon_control_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (video_pixel_buffer_dma_0_avalon_control_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (video_pixel_buffer_dma_0_avalon_control_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (video_pixel_buffer_dma_0_avalon_control_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (video_pixel_buffer_dma_0_avalon_control_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (video_pixel_buffer_dma_0_avalon_control_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                          // (terminated)
		.csr_read          (1'b0),                                                                           // (terminated)
		.csr_write         (1'b0),                                                                           // (terminated)
		.csr_readdata      (),                                                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                           // (terminated)
		.almost_full_data  (),                                                                               // (terminated)
		.almost_empty_data (),                                                                               // (terminated)
		.in_empty          (1'b0),                                                                           // (terminated)
		.out_empty         (),                                                                               // (terminated)
		.in_error          (1'b0),                                                                           // (terminated)
		.out_error         (),                                                                               // (terminated)
		.in_channel        (1'b0),                                                                           // (terminated)
		.out_channel       ()                                                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (109),
		.PKT_ORI_BURST_SIZE_L      (107),
		.PKT_RESPONSE_STATUS_H     (106),
		.PKT_RESPONSE_STATUS_L     (105),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (100),
		.PKT_PROTECTION_L          (98),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (92),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (93),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (12),
		.ST_DATA_W                 (110),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) jtag_uart_0_avalon_jtag_slave_agent (
		.clk                     (clk_0_clk_clk),                                                  //             clk.clk
		.reset                   (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset),     //       clk_reset.reset
		.m0_address              (jtag_uart_0_avalon_jtag_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (jtag_uart_0_avalon_jtag_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (jtag_uart_0_avalon_jtag_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (jtag_uart_0_avalon_jtag_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (jtag_uart_0_avalon_jtag_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (jtag_uart_0_avalon_jtag_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (jtag_uart_0_avalon_jtag_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (jtag_uart_0_avalon_jtag_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (jtag_uart_0_avalon_jtag_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (jtag_uart_0_avalon_jtag_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (jtag_uart_0_avalon_jtag_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (jtag_uart_0_avalon_jtag_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (jtag_uart_0_avalon_jtag_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (jtag_uart_0_avalon_jtag_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (jtag_uart_0_avalon_jtag_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (jtag_uart_0_avalon_jtag_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_004_src_ready),                                          //              cp.ready
		.cp_valid                (cmd_mux_004_src_valid),                                          //                .valid
		.cp_data                 (cmd_mux_004_src_data),                                           //                .data
		.cp_startofpacket        (cmd_mux_004_src_startofpacket),                                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_004_src_endofpacket),                                    //                .endofpacket
		.cp_channel              (cmd_mux_004_src_channel),                                        //                .channel
		.rf_sink_ready           (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (jtag_uart_0_avalon_jtag_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (jtag_uart_0_avalon_jtag_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (jtag_uart_0_avalon_jtag_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (jtag_uart_0_avalon_jtag_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (jtag_uart_0_avalon_jtag_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_004_out_0_ready),                              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_004_out_0_valid),                              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_004_out_0_data),                               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_004_out_0_error),                              //                .error
		.rdata_fifo_src_ready    (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (111),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                  //       clk.clk
		.reset             (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset),     // clk_reset.reset
		.in_data           (jtag_uart_0_avalon_jtag_slave_agent_rf_source_data),             //        in.data
		.in_valid          (jtag_uart_0_avalon_jtag_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (jtag_uart_0_avalon_jtag_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (jtag_uart_0_avalon_jtag_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (jtag_uart_0_avalon_jtag_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                          // (terminated)
		.csr_read          (1'b0),                                                           // (terminated)
		.csr_write         (1'b0),                                                           // (terminated)
		.csr_readdata      (),                                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                           // (terminated)
		.almost_full_data  (),                                                               // (terminated)
		.almost_empty_data (),                                                               // (terminated)
		.in_empty          (1'b0),                                                           // (terminated)
		.out_empty         (),                                                               // (terminated)
		.in_error          (1'b0),                                                           // (terminated)
		.out_error         (),                                                               // (terminated)
		.in_channel        (1'b0),                                                           // (terminated)
		.out_channel       ()                                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (109),
		.PKT_ORI_BURST_SIZE_L      (107),
		.PKT_RESPONSE_STATUS_H     (106),
		.PKT_RESPONSE_STATUS_L     (105),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (100),
		.PKT_PROTECTION_L          (98),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (92),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (93),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (12),
		.ST_DATA_W                 (110),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) performance_counter_0_control_slave_agent (
		.clk                     (clk_0_clk_clk),                                                        //             clk.clk
		.reset                   (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset),           //       clk_reset.reset
		.m0_address              (performance_counter_0_control_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (performance_counter_0_control_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (performance_counter_0_control_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (performance_counter_0_control_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (performance_counter_0_control_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (performance_counter_0_control_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (performance_counter_0_control_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (performance_counter_0_control_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (performance_counter_0_control_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (performance_counter_0_control_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (performance_counter_0_control_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (performance_counter_0_control_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (performance_counter_0_control_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (performance_counter_0_control_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (performance_counter_0_control_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (performance_counter_0_control_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_005_src_ready),                                                //              cp.ready
		.cp_valid                (cmd_mux_005_src_valid),                                                //                .valid
		.cp_data                 (cmd_mux_005_src_data),                                                 //                .data
		.cp_startofpacket        (cmd_mux_005_src_startofpacket),                                        //                .startofpacket
		.cp_endofpacket          (cmd_mux_005_src_endofpacket),                                          //                .endofpacket
		.cp_channel              (cmd_mux_005_src_channel),                                              //                .channel
		.rf_sink_ready           (performance_counter_0_control_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (performance_counter_0_control_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (performance_counter_0_control_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (performance_counter_0_control_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (performance_counter_0_control_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (performance_counter_0_control_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (performance_counter_0_control_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (performance_counter_0_control_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (performance_counter_0_control_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (performance_counter_0_control_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_005_out_0_ready),                                    // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_005_out_0_valid),                                    //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_005_out_0_data),                                     //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_005_out_0_error),                                    //                .error
		.rdata_fifo_src_ready    (performance_counter_0_control_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (performance_counter_0_control_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (performance_counter_0_control_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                  //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (111),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) performance_counter_0_control_slave_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                        //       clk.clk
		.reset             (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset),           // clk_reset.reset
		.in_data           (performance_counter_0_control_slave_agent_rf_source_data),             //        in.data
		.in_valid          (performance_counter_0_control_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (performance_counter_0_control_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (performance_counter_0_control_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (performance_counter_0_control_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (performance_counter_0_control_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (performance_counter_0_control_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (performance_counter_0_control_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (performance_counter_0_control_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (performance_counter_0_control_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                // (terminated)
		.csr_read          (1'b0),                                                                 // (terminated)
		.csr_write         (1'b0),                                                                 // (terminated)
		.csr_readdata      (),                                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                 // (terminated)
		.almost_full_data  (),                                                                     // (terminated)
		.almost_empty_data (),                                                                     // (terminated)
		.in_empty          (1'b0),                                                                 // (terminated)
		.out_empty         (),                                                                     // (terminated)
		.in_error          (1'b0),                                                                 // (terminated)
		.out_error         (),                                                                     // (terminated)
		.in_channel        (1'b0),                                                                 // (terminated)
		.out_channel       ()                                                                      // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (109),
		.PKT_ORI_BURST_SIZE_L      (107),
		.PKT_RESPONSE_STATUS_H     (106),
		.PKT_RESPONSE_STATUS_L     (105),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (100),
		.PKT_PROTECTION_L          (98),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (92),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (93),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (12),
		.ST_DATA_W                 (110),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) nios2_qsys_0_jtag_debug_module_agent (
		.clk                     (clk_0_clk_clk),                                                   //             clk.clk
		.reset                   (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset),      //       clk_reset.reset
		.m0_address              (nios2_qsys_0_jtag_debug_module_agent_m0_address),                 //              m0.address
		.m0_burstcount           (nios2_qsys_0_jtag_debug_module_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (nios2_qsys_0_jtag_debug_module_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (nios2_qsys_0_jtag_debug_module_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (nios2_qsys_0_jtag_debug_module_agent_m0_lock),                    //                .lock
		.m0_readdata             (nios2_qsys_0_jtag_debug_module_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (nios2_qsys_0_jtag_debug_module_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (nios2_qsys_0_jtag_debug_module_agent_m0_read),                    //                .read
		.m0_waitrequest          (nios2_qsys_0_jtag_debug_module_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (nios2_qsys_0_jtag_debug_module_agent_m0_writedata),               //                .writedata
		.m0_write                (nios2_qsys_0_jtag_debug_module_agent_m0_write),                   //                .write
		.rp_endofpacket          (nios2_qsys_0_jtag_debug_module_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (nios2_qsys_0_jtag_debug_module_agent_rp_ready),                   //                .ready
		.rp_valid                (nios2_qsys_0_jtag_debug_module_agent_rp_valid),                   //                .valid
		.rp_data                 (nios2_qsys_0_jtag_debug_module_agent_rp_data),                    //                .data
		.rp_startofpacket        (nios2_qsys_0_jtag_debug_module_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_006_src_ready),                                           //              cp.ready
		.cp_valid                (cmd_mux_006_src_valid),                                           //                .valid
		.cp_data                 (cmd_mux_006_src_data),                                            //                .data
		.cp_startofpacket        (cmd_mux_006_src_startofpacket),                                   //                .startofpacket
		.cp_endofpacket          (cmd_mux_006_src_endofpacket),                                     //                .endofpacket
		.cp_channel              (cmd_mux_006_src_channel),                                         //                .channel
		.rf_sink_ready           (nios2_qsys_0_jtag_debug_module_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (nios2_qsys_0_jtag_debug_module_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (nios2_qsys_0_jtag_debug_module_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (nios2_qsys_0_jtag_debug_module_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (nios2_qsys_0_jtag_debug_module_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (nios2_qsys_0_jtag_debug_module_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (nios2_qsys_0_jtag_debug_module_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (nios2_qsys_0_jtag_debug_module_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (nios2_qsys_0_jtag_debug_module_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (nios2_qsys_0_jtag_debug_module_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_006_out_0_ready),                               // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_006_out_0_valid),                               //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_006_out_0_data),                                //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_006_out_0_error),                               //                .error
		.rdata_fifo_src_ready    (nios2_qsys_0_jtag_debug_module_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (nios2_qsys_0_jtag_debug_module_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (nios2_qsys_0_jtag_debug_module_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (111),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) nios2_qsys_0_jtag_debug_module_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                   //       clk.clk
		.reset             (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.in_data           (nios2_qsys_0_jtag_debug_module_agent_rf_source_data),             //        in.data
		.in_valid          (nios2_qsys_0_jtag_debug_module_agent_rf_source_valid),            //          .valid
		.in_ready          (nios2_qsys_0_jtag_debug_module_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (nios2_qsys_0_jtag_debug_module_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (nios2_qsys_0_jtag_debug_module_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (nios2_qsys_0_jtag_debug_module_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (nios2_qsys_0_jtag_debug_module_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (nios2_qsys_0_jtag_debug_module_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (nios2_qsys_0_jtag_debug_module_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (nios2_qsys_0_jtag_debug_module_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                           // (terminated)
		.csr_read          (1'b0),                                                            // (terminated)
		.csr_write         (1'b0),                                                            // (terminated)
		.csr_readdata      (),                                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                            // (terminated)
		.almost_full_data  (),                                                                // (terminated)
		.almost_empty_data (),                                                                // (terminated)
		.in_empty          (1'b0),                                                            // (terminated)
		.out_empty         (),                                                                // (terminated)
		.in_error          (1'b0),                                                            // (terminated)
		.out_error         (),                                                                // (terminated)
		.in_channel        (1'b0),                                                            // (terminated)
		.out_channel       ()                                                                 // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (109),
		.PKT_ORI_BURST_SIZE_L      (107),
		.PKT_RESPONSE_STATUS_H     (106),
		.PKT_RESPONSE_STATUS_L     (105),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (100),
		.PKT_PROTECTION_L          (98),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (92),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (93),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (12),
		.ST_DATA_W                 (110),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) new_sdram_controller_0_s1_agent (
		.clk                     (clk_0_clk_clk),                                              //             clk.clk
		.reset                   (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (new_sdram_controller_0_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (new_sdram_controller_0_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (new_sdram_controller_0_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (new_sdram_controller_0_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (new_sdram_controller_0_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (new_sdram_controller_0_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (new_sdram_controller_0_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (new_sdram_controller_0_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (new_sdram_controller_0_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (new_sdram_controller_0_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (new_sdram_controller_0_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (new_sdram_controller_0_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (new_sdram_controller_0_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (new_sdram_controller_0_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (new_sdram_controller_0_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (new_sdram_controller_0_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_007_src_ready),                                      //              cp.ready
		.cp_valid                (cmd_mux_007_src_valid),                                      //                .valid
		.cp_data                 (cmd_mux_007_src_data),                                       //                .data
		.cp_startofpacket        (cmd_mux_007_src_startofpacket),                              //                .startofpacket
		.cp_endofpacket          (cmd_mux_007_src_endofpacket),                                //                .endofpacket
		.cp_channel              (cmd_mux_007_src_channel),                                    //                .channel
		.rf_sink_ready           (new_sdram_controller_0_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (new_sdram_controller_0_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (new_sdram_controller_0_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (new_sdram_controller_0_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (new_sdram_controller_0_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (new_sdram_controller_0_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (new_sdram_controller_0_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (new_sdram_controller_0_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (new_sdram_controller_0_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (new_sdram_controller_0_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_007_out_0_ready),                          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_007_out_0_valid),                          //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_007_out_0_data),                           //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_007_out_0_error),                          //                .error
		.rdata_fifo_src_ready    (new_sdram_controller_0_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (new_sdram_controller_0_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (new_sdram_controller_0_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                      //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                        //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (111),
		.FIFO_DEPTH          (8),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) new_sdram_controller_0_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                              //       clk.clk
		.reset             (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (new_sdram_controller_0_s1_agent_rf_source_data),             //        in.data
		.in_valid          (new_sdram_controller_0_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (new_sdram_controller_0_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (new_sdram_controller_0_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (new_sdram_controller_0_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (new_sdram_controller_0_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (new_sdram_controller_0_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (new_sdram_controller_0_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (new_sdram_controller_0_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (new_sdram_controller_0_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                      // (terminated)
		.csr_read          (1'b0),                                                       // (terminated)
		.csr_write         (1'b0),                                                       // (terminated)
		.csr_readdata      (),                                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                       // (terminated)
		.almost_full_data  (),                                                           // (terminated)
		.almost_empty_data (),                                                           // (terminated)
		.in_empty          (1'b0),                                                       // (terminated)
		.out_empty         (),                                                           // (terminated)
		.in_error          (1'b0),                                                       // (terminated)
		.out_error         (),                                                           // (terminated)
		.in_channel        (1'b0),                                                       // (terminated)
		.out_channel       ()                                                            // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (109),
		.PKT_ORI_BURST_SIZE_L      (107),
		.PKT_RESPONSE_STATUS_H     (106),
		.PKT_RESPONSE_STATUS_L     (105),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (100),
		.PKT_PROTECTION_L          (98),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (92),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (93),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (12),
		.ST_DATA_W                 (110),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) rleds_s1_agent (
		.clk                     (clk_0_clk_clk),                                              //             clk.clk
		.reset                   (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (rleds_s1_agent_m0_address),                                  //              m0.address
		.m0_burstcount           (rleds_s1_agent_m0_burstcount),                               //                .burstcount
		.m0_byteenable           (rleds_s1_agent_m0_byteenable),                               //                .byteenable
		.m0_debugaccess          (rleds_s1_agent_m0_debugaccess),                              //                .debugaccess
		.m0_lock                 (rleds_s1_agent_m0_lock),                                     //                .lock
		.m0_readdata             (rleds_s1_agent_m0_readdata),                                 //                .readdata
		.m0_readdatavalid        (rleds_s1_agent_m0_readdatavalid),                            //                .readdatavalid
		.m0_read                 (rleds_s1_agent_m0_read),                                     //                .read
		.m0_waitrequest          (rleds_s1_agent_m0_waitrequest),                              //                .waitrequest
		.m0_writedata            (rleds_s1_agent_m0_writedata),                                //                .writedata
		.m0_write                (rleds_s1_agent_m0_write),                                    //                .write
		.rp_endofpacket          (rleds_s1_agent_rp_endofpacket),                              //              rp.endofpacket
		.rp_ready                (rleds_s1_agent_rp_ready),                                    //                .ready
		.rp_valid                (rleds_s1_agent_rp_valid),                                    //                .valid
		.rp_data                 (rleds_s1_agent_rp_data),                                     //                .data
		.rp_startofpacket        (rleds_s1_agent_rp_startofpacket),                            //                .startofpacket
		.cp_ready                (cmd_mux_008_src_ready),                                      //              cp.ready
		.cp_valid                (cmd_mux_008_src_valid),                                      //                .valid
		.cp_data                 (cmd_mux_008_src_data),                                       //                .data
		.cp_startofpacket        (cmd_mux_008_src_startofpacket),                              //                .startofpacket
		.cp_endofpacket          (cmd_mux_008_src_endofpacket),                                //                .endofpacket
		.cp_channel              (cmd_mux_008_src_channel),                                    //                .channel
		.rf_sink_ready           (rleds_s1_agent_rsp_fifo_out_ready),                          //         rf_sink.ready
		.rf_sink_valid           (rleds_s1_agent_rsp_fifo_out_valid),                          //                .valid
		.rf_sink_startofpacket   (rleds_s1_agent_rsp_fifo_out_startofpacket),                  //                .startofpacket
		.rf_sink_endofpacket     (rleds_s1_agent_rsp_fifo_out_endofpacket),                    //                .endofpacket
		.rf_sink_data            (rleds_s1_agent_rsp_fifo_out_data),                           //                .data
		.rf_source_ready         (rleds_s1_agent_rf_source_ready),                             //       rf_source.ready
		.rf_source_valid         (rleds_s1_agent_rf_source_valid),                             //                .valid
		.rf_source_startofpacket (rleds_s1_agent_rf_source_startofpacket),                     //                .startofpacket
		.rf_source_endofpacket   (rleds_s1_agent_rf_source_endofpacket),                       //                .endofpacket
		.rf_source_data          (rleds_s1_agent_rf_source_data),                              //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_008_out_0_ready),                          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_008_out_0_valid),                          //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_008_out_0_data),                           //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_008_out_0_error),                          //                .error
		.rdata_fifo_src_ready    (rleds_s1_agent_rdata_fifo_src_ready),                        //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (rleds_s1_agent_rdata_fifo_src_valid),                        //                .valid
		.rdata_fifo_src_data     (rleds_s1_agent_rdata_fifo_src_data),                         //                .data
		.m0_response             (2'b00),                                                      //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                        //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (111),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) rleds_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                              //       clk.clk
		.reset             (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (rleds_s1_agent_rf_source_data),                              //        in.data
		.in_valid          (rleds_s1_agent_rf_source_valid),                             //          .valid
		.in_ready          (rleds_s1_agent_rf_source_ready),                             //          .ready
		.in_startofpacket  (rleds_s1_agent_rf_source_startofpacket),                     //          .startofpacket
		.in_endofpacket    (rleds_s1_agent_rf_source_endofpacket),                       //          .endofpacket
		.out_data          (rleds_s1_agent_rsp_fifo_out_data),                           //       out.data
		.out_valid         (rleds_s1_agent_rsp_fifo_out_valid),                          //          .valid
		.out_ready         (rleds_s1_agent_rsp_fifo_out_ready),                          //          .ready
		.out_startofpacket (rleds_s1_agent_rsp_fifo_out_startofpacket),                  //          .startofpacket
		.out_endofpacket   (rleds_s1_agent_rsp_fifo_out_endofpacket),                    //          .endofpacket
		.csr_address       (2'b00),                                                      // (terminated)
		.csr_read          (1'b0),                                                       // (terminated)
		.csr_write         (1'b0),                                                       // (terminated)
		.csr_readdata      (),                                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                       // (terminated)
		.almost_full_data  (),                                                           // (terminated)
		.almost_empty_data (),                                                           // (terminated)
		.in_empty          (1'b0),                                                       // (terminated)
		.out_empty         (),                                                           // (terminated)
		.in_error          (1'b0),                                                       // (terminated)
		.out_error         (),                                                           // (terminated)
		.in_channel        (1'b0),                                                       // (terminated)
		.out_channel       ()                                                            // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (109),
		.PKT_ORI_BURST_SIZE_L      (107),
		.PKT_RESPONSE_STATUS_H     (106),
		.PKT_RESPONSE_STATUS_L     (105),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (100),
		.PKT_PROTECTION_L          (98),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (92),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (93),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (12),
		.ST_DATA_W                 (110),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) gleds_s1_agent (
		.clk                     (clk_0_clk_clk),                                              //             clk.clk
		.reset                   (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (gleds_s1_agent_m0_address),                                  //              m0.address
		.m0_burstcount           (gleds_s1_agent_m0_burstcount),                               //                .burstcount
		.m0_byteenable           (gleds_s1_agent_m0_byteenable),                               //                .byteenable
		.m0_debugaccess          (gleds_s1_agent_m0_debugaccess),                              //                .debugaccess
		.m0_lock                 (gleds_s1_agent_m0_lock),                                     //                .lock
		.m0_readdata             (gleds_s1_agent_m0_readdata),                                 //                .readdata
		.m0_readdatavalid        (gleds_s1_agent_m0_readdatavalid),                            //                .readdatavalid
		.m0_read                 (gleds_s1_agent_m0_read),                                     //                .read
		.m0_waitrequest          (gleds_s1_agent_m0_waitrequest),                              //                .waitrequest
		.m0_writedata            (gleds_s1_agent_m0_writedata),                                //                .writedata
		.m0_write                (gleds_s1_agent_m0_write),                                    //                .write
		.rp_endofpacket          (gleds_s1_agent_rp_endofpacket),                              //              rp.endofpacket
		.rp_ready                (gleds_s1_agent_rp_ready),                                    //                .ready
		.rp_valid                (gleds_s1_agent_rp_valid),                                    //                .valid
		.rp_data                 (gleds_s1_agent_rp_data),                                     //                .data
		.rp_startofpacket        (gleds_s1_agent_rp_startofpacket),                            //                .startofpacket
		.cp_ready                (cmd_mux_009_src_ready),                                      //              cp.ready
		.cp_valid                (cmd_mux_009_src_valid),                                      //                .valid
		.cp_data                 (cmd_mux_009_src_data),                                       //                .data
		.cp_startofpacket        (cmd_mux_009_src_startofpacket),                              //                .startofpacket
		.cp_endofpacket          (cmd_mux_009_src_endofpacket),                                //                .endofpacket
		.cp_channel              (cmd_mux_009_src_channel),                                    //                .channel
		.rf_sink_ready           (gleds_s1_agent_rsp_fifo_out_ready),                          //         rf_sink.ready
		.rf_sink_valid           (gleds_s1_agent_rsp_fifo_out_valid),                          //                .valid
		.rf_sink_startofpacket   (gleds_s1_agent_rsp_fifo_out_startofpacket),                  //                .startofpacket
		.rf_sink_endofpacket     (gleds_s1_agent_rsp_fifo_out_endofpacket),                    //                .endofpacket
		.rf_sink_data            (gleds_s1_agent_rsp_fifo_out_data),                           //                .data
		.rf_source_ready         (gleds_s1_agent_rf_source_ready),                             //       rf_source.ready
		.rf_source_valid         (gleds_s1_agent_rf_source_valid),                             //                .valid
		.rf_source_startofpacket (gleds_s1_agent_rf_source_startofpacket),                     //                .startofpacket
		.rf_source_endofpacket   (gleds_s1_agent_rf_source_endofpacket),                       //                .endofpacket
		.rf_source_data          (gleds_s1_agent_rf_source_data),                              //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_009_out_0_ready),                          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_009_out_0_valid),                          //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_009_out_0_data),                           //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_009_out_0_error),                          //                .error
		.rdata_fifo_src_ready    (gleds_s1_agent_rdata_fifo_src_ready),                        //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (gleds_s1_agent_rdata_fifo_src_valid),                        //                .valid
		.rdata_fifo_src_data     (gleds_s1_agent_rdata_fifo_src_data),                         //                .data
		.m0_response             (2'b00),                                                      //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                        //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (111),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) gleds_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                              //       clk.clk
		.reset             (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (gleds_s1_agent_rf_source_data),                              //        in.data
		.in_valid          (gleds_s1_agent_rf_source_valid),                             //          .valid
		.in_ready          (gleds_s1_agent_rf_source_ready),                             //          .ready
		.in_startofpacket  (gleds_s1_agent_rf_source_startofpacket),                     //          .startofpacket
		.in_endofpacket    (gleds_s1_agent_rf_source_endofpacket),                       //          .endofpacket
		.out_data          (gleds_s1_agent_rsp_fifo_out_data),                           //       out.data
		.out_valid         (gleds_s1_agent_rsp_fifo_out_valid),                          //          .valid
		.out_ready         (gleds_s1_agent_rsp_fifo_out_ready),                          //          .ready
		.out_startofpacket (gleds_s1_agent_rsp_fifo_out_startofpacket),                  //          .startofpacket
		.out_endofpacket   (gleds_s1_agent_rsp_fifo_out_endofpacket),                    //          .endofpacket
		.csr_address       (2'b00),                                                      // (terminated)
		.csr_read          (1'b0),                                                       // (terminated)
		.csr_write         (1'b0),                                                       // (terminated)
		.csr_readdata      (),                                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                       // (terminated)
		.almost_full_data  (),                                                           // (terminated)
		.almost_empty_data (),                                                           // (terminated)
		.in_empty          (1'b0),                                                       // (terminated)
		.out_empty         (),                                                           // (terminated)
		.in_error          (1'b0),                                                       // (terminated)
		.out_error         (),                                                           // (terminated)
		.in_channel        (1'b0),                                                       // (terminated)
		.out_channel       ()                                                            // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (109),
		.PKT_ORI_BURST_SIZE_L      (107),
		.PKT_RESPONSE_STATUS_H     (106),
		.PKT_RESPONSE_STATUS_L     (105),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (100),
		.PKT_PROTECTION_L          (98),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (92),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (93),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (12),
		.ST_DATA_W                 (110),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) switches_s1_agent (
		.clk                     (clk_0_clk_clk),                                              //             clk.clk
		.reset                   (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (switches_s1_agent_m0_address),                               //              m0.address
		.m0_burstcount           (switches_s1_agent_m0_burstcount),                            //                .burstcount
		.m0_byteenable           (switches_s1_agent_m0_byteenable),                            //                .byteenable
		.m0_debugaccess          (switches_s1_agent_m0_debugaccess),                           //                .debugaccess
		.m0_lock                 (switches_s1_agent_m0_lock),                                  //                .lock
		.m0_readdata             (switches_s1_agent_m0_readdata),                              //                .readdata
		.m0_readdatavalid        (switches_s1_agent_m0_readdatavalid),                         //                .readdatavalid
		.m0_read                 (switches_s1_agent_m0_read),                                  //                .read
		.m0_waitrequest          (switches_s1_agent_m0_waitrequest),                           //                .waitrequest
		.m0_writedata            (switches_s1_agent_m0_writedata),                             //                .writedata
		.m0_write                (switches_s1_agent_m0_write),                                 //                .write
		.rp_endofpacket          (switches_s1_agent_rp_endofpacket),                           //              rp.endofpacket
		.rp_ready                (switches_s1_agent_rp_ready),                                 //                .ready
		.rp_valid                (switches_s1_agent_rp_valid),                                 //                .valid
		.rp_data                 (switches_s1_agent_rp_data),                                  //                .data
		.rp_startofpacket        (switches_s1_agent_rp_startofpacket),                         //                .startofpacket
		.cp_ready                (cmd_mux_010_src_ready),                                      //              cp.ready
		.cp_valid                (cmd_mux_010_src_valid),                                      //                .valid
		.cp_data                 (cmd_mux_010_src_data),                                       //                .data
		.cp_startofpacket        (cmd_mux_010_src_startofpacket),                              //                .startofpacket
		.cp_endofpacket          (cmd_mux_010_src_endofpacket),                                //                .endofpacket
		.cp_channel              (cmd_mux_010_src_channel),                                    //                .channel
		.rf_sink_ready           (switches_s1_agent_rsp_fifo_out_ready),                       //         rf_sink.ready
		.rf_sink_valid           (switches_s1_agent_rsp_fifo_out_valid),                       //                .valid
		.rf_sink_startofpacket   (switches_s1_agent_rsp_fifo_out_startofpacket),               //                .startofpacket
		.rf_sink_endofpacket     (switches_s1_agent_rsp_fifo_out_endofpacket),                 //                .endofpacket
		.rf_sink_data            (switches_s1_agent_rsp_fifo_out_data),                        //                .data
		.rf_source_ready         (switches_s1_agent_rf_source_ready),                          //       rf_source.ready
		.rf_source_valid         (switches_s1_agent_rf_source_valid),                          //                .valid
		.rf_source_startofpacket (switches_s1_agent_rf_source_startofpacket),                  //                .startofpacket
		.rf_source_endofpacket   (switches_s1_agent_rf_source_endofpacket),                    //                .endofpacket
		.rf_source_data          (switches_s1_agent_rf_source_data),                           //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_010_out_0_ready),                          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_010_out_0_valid),                          //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_010_out_0_data),                           //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_010_out_0_error),                          //                .error
		.rdata_fifo_src_ready    (switches_s1_agent_rdata_fifo_src_ready),                     //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (switches_s1_agent_rdata_fifo_src_valid),                     //                .valid
		.rdata_fifo_src_data     (switches_s1_agent_rdata_fifo_src_data),                      //                .data
		.m0_response             (2'b00),                                                      //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                        //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (111),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) switches_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                              //       clk.clk
		.reset             (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (switches_s1_agent_rf_source_data),                           //        in.data
		.in_valid          (switches_s1_agent_rf_source_valid),                          //          .valid
		.in_ready          (switches_s1_agent_rf_source_ready),                          //          .ready
		.in_startofpacket  (switches_s1_agent_rf_source_startofpacket),                  //          .startofpacket
		.in_endofpacket    (switches_s1_agent_rf_source_endofpacket),                    //          .endofpacket
		.out_data          (switches_s1_agent_rsp_fifo_out_data),                        //       out.data
		.out_valid         (switches_s1_agent_rsp_fifo_out_valid),                       //          .valid
		.out_ready         (switches_s1_agent_rsp_fifo_out_ready),                       //          .ready
		.out_startofpacket (switches_s1_agent_rsp_fifo_out_startofpacket),               //          .startofpacket
		.out_endofpacket   (switches_s1_agent_rsp_fifo_out_endofpacket),                 //          .endofpacket
		.csr_address       (2'b00),                                                      // (terminated)
		.csr_read          (1'b0),                                                       // (terminated)
		.csr_write         (1'b0),                                                       // (terminated)
		.csr_readdata      (),                                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                       // (terminated)
		.almost_full_data  (),                                                           // (terminated)
		.almost_empty_data (),                                                           // (terminated)
		.in_empty          (1'b0),                                                       // (terminated)
		.out_empty         (),                                                           // (terminated)
		.in_error          (1'b0),                                                       // (terminated)
		.out_error         (),                                                           // (terminated)
		.in_channel        (1'b0),                                                       // (terminated)
		.out_channel       ()                                                            // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (82),
		.PKT_ORI_BURST_SIZE_L      (80),
		.PKT_RESPONSE_STATUS_H     (79),
		.PKT_RESPONSE_STATUS_L     (78),
		.PKT_BURST_SIZE_H          (55),
		.PKT_BURST_SIZE_L          (53),
		.PKT_TRANS_LOCK            (45),
		.PKT_BEGIN_BURST           (60),
		.PKT_PROTECTION_H          (73),
		.PKT_PROTECTION_L          (71),
		.PKT_BURSTWRAP_H           (52),
		.PKT_BURSTWRAP_L           (50),
		.PKT_BYTE_CNT_H            (49),
		.PKT_BYTE_CNT_L            (47),
		.PKT_ADDR_H                (40),
		.PKT_ADDR_L                (9),
		.PKT_TRANS_COMPRESSED_READ (41),
		.PKT_TRANS_POSTED          (42),
		.PKT_TRANS_WRITE           (43),
		.PKT_TRANS_READ            (44),
		.PKT_DATA_H                (7),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_SRC_ID_H              (65),
		.PKT_SRC_ID_L              (62),
		.PKT_DEST_ID_H             (69),
		.PKT_DEST_ID_L             (66),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (12),
		.ST_DATA_W                 (83),
		.AVS_BURSTCOUNT_W          (1),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) generic_tristate_controller_0_uas_agent (
		.clk                     (clk_0_clk_clk),                                                         //             clk.clk
		.reset                   (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset),            //       clk_reset.reset
		.m0_address              (generic_tristate_controller_0_uas_agent_m0_address),                    //              m0.address
		.m0_burstcount           (generic_tristate_controller_0_uas_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (generic_tristate_controller_0_uas_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (generic_tristate_controller_0_uas_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (generic_tristate_controller_0_uas_agent_m0_lock),                       //                .lock
		.m0_readdata             (generic_tristate_controller_0_uas_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (generic_tristate_controller_0_uas_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (generic_tristate_controller_0_uas_agent_m0_read),                       //                .read
		.m0_waitrequest          (generic_tristate_controller_0_uas_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (generic_tristate_controller_0_uas_agent_m0_writedata),                  //                .writedata
		.m0_write                (generic_tristate_controller_0_uas_agent_m0_write),                      //                .write
		.rp_endofpacket          (generic_tristate_controller_0_uas_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (generic_tristate_controller_0_uas_agent_rp_ready),                      //                .ready
		.rp_valid                (generic_tristate_controller_0_uas_agent_rp_valid),                      //                .valid
		.rp_data                 (generic_tristate_controller_0_uas_agent_rp_data),                       //                .data
		.rp_startofpacket        (generic_tristate_controller_0_uas_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (generic_tristate_controller_0_uas_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (generic_tristate_controller_0_uas_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (generic_tristate_controller_0_uas_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (generic_tristate_controller_0_uas_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (generic_tristate_controller_0_uas_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (generic_tristate_controller_0_uas_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (generic_tristate_controller_0_uas_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (generic_tristate_controller_0_uas_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (generic_tristate_controller_0_uas_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (generic_tristate_controller_0_uas_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (generic_tristate_controller_0_uas_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (generic_tristate_controller_0_uas_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (generic_tristate_controller_0_uas_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (generic_tristate_controller_0_uas_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (generic_tristate_controller_0_uas_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (generic_tristate_controller_0_uas_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_011_out_0_ready),                                     // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_011_out_0_valid),                                     //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_011_out_0_data),                                      //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_011_out_0_error),                                     //                .error
		.rdata_fifo_src_ready    (generic_tristate_controller_0_uas_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (generic_tristate_controller_0_uas_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (generic_tristate_controller_0_uas_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                   //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (84),
		.FIFO_DEPTH          (4),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) generic_tristate_controller_0_uas_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                      //       clk.clk
		.reset             (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.in_data           (generic_tristate_controller_0_uas_agent_rf_source_data),             //        in.data
		.in_valid          (generic_tristate_controller_0_uas_agent_rf_source_valid),            //          .valid
		.in_ready          (generic_tristate_controller_0_uas_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (generic_tristate_controller_0_uas_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (generic_tristate_controller_0_uas_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (generic_tristate_controller_0_uas_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (generic_tristate_controller_0_uas_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (generic_tristate_controller_0_uas_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (generic_tristate_controller_0_uas_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (generic_tristate_controller_0_uas_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                              // (terminated)
		.csr_read          (1'b0),                                                               // (terminated)
		.csr_write         (1'b0),                                                               // (terminated)
		.csr_readdata      (),                                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                               // (terminated)
		.almost_full_data  (),                                                                   // (terminated)
		.almost_empty_data (),                                                                   // (terminated)
		.in_empty          (1'b0),                                                               // (terminated)
		.out_empty         (),                                                                   // (terminated)
		.in_error          (1'b0),                                                               // (terminated)
		.out_error         (),                                                                   // (terminated)
		.in_channel        (1'b0),                                                               // (terminated)
		.out_channel       ()                                                                    // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (10),
		.FIFO_DEPTH          (4),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) generic_tristate_controller_0_uas_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                                //       clk.clk
		.reset             (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (generic_tristate_controller_0_uas_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (generic_tristate_controller_0_uas_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (generic_tristate_controller_0_uas_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (generic_tristate_controller_0_uas_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (generic_tristate_controller_0_uas_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (generic_tristate_controller_0_uas_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                        // (terminated)
		.csr_read          (1'b0),                                                         // (terminated)
		.csr_write         (1'b0),                                                         // (terminated)
		.csr_readdata      (),                                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                         // (terminated)
		.almost_full_data  (),                                                             // (terminated)
		.almost_empty_data (),                                                             // (terminated)
		.in_startofpacket  (1'b0),                                                         // (terminated)
		.in_endofpacket    (1'b0),                                                         // (terminated)
		.out_startofpacket (),                                                             // (terminated)
		.out_endofpacket   (),                                                             // (terminated)
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_channel        (1'b0),                                                         // (terminated)
		.out_channel       ()                                                              // (terminated)
	);

	nios_system_mm_interconnect_0_router router (
		.sink_ready         (video_pixel_buffer_dma_0_avalon_pixel_dma_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (video_pixel_buffer_dma_0_avalon_pixel_dma_master_agent_cp_valid),         //          .valid
		.sink_data          (video_pixel_buffer_dma_0_avalon_pixel_dma_master_agent_cp_data),          //          .data
		.sink_startofpacket (video_pixel_buffer_dma_0_avalon_pixel_dma_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (video_pixel_buffer_dma_0_avalon_pixel_dma_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                                           //       clk.clk
		.reset              (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset),              // clk_reset.reset
		.src_ready          (router_src_ready),                                                        //       src.ready
		.src_valid          (router_src_valid),                                                        //          .valid
		.src_data           (router_src_data),                                                         //          .data
		.src_channel        (router_src_channel),                                                      //          .channel
		.src_startofpacket  (router_src_startofpacket),                                                //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                                   //          .endofpacket
	);

	nios_system_mm_interconnect_0_router_001 router_001 (
		.sink_ready         (nios2_qsys_0_data_master_agent_cp_ready),                    //      sink.ready
		.sink_valid         (nios2_qsys_0_data_master_agent_cp_valid),                    //          .valid
		.sink_data          (nios2_qsys_0_data_master_agent_cp_data),                     //          .data
		.sink_startofpacket (nios2_qsys_0_data_master_agent_cp_startofpacket),            //          .startofpacket
		.sink_endofpacket   (nios2_qsys_0_data_master_agent_cp_endofpacket),              //          .endofpacket
		.clk                (clk_0_clk_clk),                                              //       clk.clk
		.reset              (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_001_src_ready),                                       //       src.ready
		.src_valid          (router_001_src_valid),                                       //          .valid
		.src_data           (router_001_src_data),                                        //          .data
		.src_channel        (router_001_src_channel),                                     //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                               //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                                  //          .endofpacket
	);

	nios_system_mm_interconnect_0_router_002 router_002 (
		.sink_ready         (nios2_qsys_0_instruction_master_agent_cp_ready),             //      sink.ready
		.sink_valid         (nios2_qsys_0_instruction_master_agent_cp_valid),             //          .valid
		.sink_data          (nios2_qsys_0_instruction_master_agent_cp_data),              //          .data
		.sink_startofpacket (nios2_qsys_0_instruction_master_agent_cp_startofpacket),     //          .startofpacket
		.sink_endofpacket   (nios2_qsys_0_instruction_master_agent_cp_endofpacket),       //          .endofpacket
		.clk                (clk_0_clk_clk),                                              //       clk.clk
		.reset              (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_002_src_ready),                                       //       src.ready
		.src_valid          (router_002_src_valid),                                       //          .valid
		.src_data           (router_002_src_data),                                        //          .data
		.src_channel        (router_002_src_channel),                                     //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                               //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                                  //          .endofpacket
	);

	nios_system_mm_interconnect_0_router_003 router_003 (
		.sink_ready         (sram_0_avalon_sram_slave_agent_rp_ready),                    //      sink.ready
		.sink_valid         (sram_0_avalon_sram_slave_agent_rp_valid),                    //          .valid
		.sink_data          (sram_0_avalon_sram_slave_agent_rp_data),                     //          .data
		.sink_startofpacket (sram_0_avalon_sram_slave_agent_rp_startofpacket),            //          .startofpacket
		.sink_endofpacket   (sram_0_avalon_sram_slave_agent_rp_endofpacket),              //          .endofpacket
		.clk                (clk_0_clk_clk),                                              //       clk.clk
		.reset              (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_003_src_ready),                                       //       src.ready
		.src_valid          (router_003_src_valid),                                       //          .valid
		.src_data           (router_003_src_data),                                        //          .data
		.src_channel        (router_003_src_channel),                                     //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                               //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                                  //          .endofpacket
	);

	nios_system_mm_interconnect_0_router_004 router_004 (
		.sink_ready         (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rp_valid),         //          .valid
		.sink_data          (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rp_data),          //          .data
		.sink_startofpacket (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                                                     //       clk.clk
		.reset              (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset),                        // clk_reset.reset
		.src_ready          (router_004_src_ready),                                                              //       src.ready
		.src_valid          (router_004_src_valid),                                                              //          .valid
		.src_data           (router_004_src_data),                                                               //          .data
		.src_channel        (router_004_src_channel),                                                            //          .channel
		.src_startofpacket  (router_004_src_startofpacket),                                                      //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                                                         //          .endofpacket
	);

	nios_system_mm_interconnect_0_router_005 router_005 (
		.sink_ready         (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rp_valid),         //          .valid
		.sink_data          (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rp_data),          //          .data
		.sink_startofpacket (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                                                      //       clk.clk
		.reset              (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset),                         // clk_reset.reset
		.src_ready          (router_005_src_ready),                                                               //       src.ready
		.src_valid          (router_005_src_valid),                                                               //          .valid
		.src_data           (router_005_src_data),                                                                //          .data
		.src_channel        (router_005_src_channel),                                                             //          .channel
		.src_startofpacket  (router_005_src_startofpacket),                                                       //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                                                          //          .endofpacket
	);

	nios_system_mm_interconnect_0_router_005 router_006 (
		.sink_ready         (video_pixel_buffer_dma_0_avalon_control_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (video_pixel_buffer_dma_0_avalon_control_slave_agent_rp_valid),         //          .valid
		.sink_data          (video_pixel_buffer_dma_0_avalon_control_slave_agent_rp_data),          //          .data
		.sink_startofpacket (video_pixel_buffer_dma_0_avalon_control_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (video_pixel_buffer_dma_0_avalon_control_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                                        //       clk.clk
		.reset              (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset),           // clk_reset.reset
		.src_ready          (router_006_src_ready),                                                 //       src.ready
		.src_valid          (router_006_src_valid),                                                 //          .valid
		.src_data           (router_006_src_data),                                                  //          .data
		.src_channel        (router_006_src_channel),                                               //          .channel
		.src_startofpacket  (router_006_src_startofpacket),                                         //          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                                            //          .endofpacket
	);

	nios_system_mm_interconnect_0_router_005 router_007 (
		.sink_ready         (jtag_uart_0_avalon_jtag_slave_agent_rp_ready),               //      sink.ready
		.sink_valid         (jtag_uart_0_avalon_jtag_slave_agent_rp_valid),               //          .valid
		.sink_data          (jtag_uart_0_avalon_jtag_slave_agent_rp_data),                //          .data
		.sink_startofpacket (jtag_uart_0_avalon_jtag_slave_agent_rp_startofpacket),       //          .startofpacket
		.sink_endofpacket   (jtag_uart_0_avalon_jtag_slave_agent_rp_endofpacket),         //          .endofpacket
		.clk                (clk_0_clk_clk),                                              //       clk.clk
		.reset              (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_007_src_ready),                                       //       src.ready
		.src_valid          (router_007_src_valid),                                       //          .valid
		.src_data           (router_007_src_data),                                        //          .data
		.src_channel        (router_007_src_channel),                                     //          .channel
		.src_startofpacket  (router_007_src_startofpacket),                               //          .startofpacket
		.src_endofpacket    (router_007_src_endofpacket)                                  //          .endofpacket
	);

	nios_system_mm_interconnect_0_router_005 router_008 (
		.sink_ready         (performance_counter_0_control_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (performance_counter_0_control_slave_agent_rp_valid),         //          .valid
		.sink_data          (performance_counter_0_control_slave_agent_rp_data),          //          .data
		.sink_startofpacket (performance_counter_0_control_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (performance_counter_0_control_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                              //       clk.clk
		.reset              (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_008_src_ready),                                       //       src.ready
		.src_valid          (router_008_src_valid),                                       //          .valid
		.src_data           (router_008_src_data),                                        //          .data
		.src_channel        (router_008_src_channel),                                     //          .channel
		.src_startofpacket  (router_008_src_startofpacket),                               //          .startofpacket
		.src_endofpacket    (router_008_src_endofpacket)                                  //          .endofpacket
	);

	nios_system_mm_interconnect_0_router_009 router_009 (
		.sink_ready         (nios2_qsys_0_jtag_debug_module_agent_rp_ready),              //      sink.ready
		.sink_valid         (nios2_qsys_0_jtag_debug_module_agent_rp_valid),              //          .valid
		.sink_data          (nios2_qsys_0_jtag_debug_module_agent_rp_data),               //          .data
		.sink_startofpacket (nios2_qsys_0_jtag_debug_module_agent_rp_startofpacket),      //          .startofpacket
		.sink_endofpacket   (nios2_qsys_0_jtag_debug_module_agent_rp_endofpacket),        //          .endofpacket
		.clk                (clk_0_clk_clk),                                              //       clk.clk
		.reset              (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_009_src_ready),                                       //       src.ready
		.src_valid          (router_009_src_valid),                                       //          .valid
		.src_data           (router_009_src_data),                                        //          .data
		.src_channel        (router_009_src_channel),                                     //          .channel
		.src_startofpacket  (router_009_src_startofpacket),                               //          .startofpacket
		.src_endofpacket    (router_009_src_endofpacket)                                  //          .endofpacket
	);

	nios_system_mm_interconnect_0_router_009 router_010 (
		.sink_ready         (new_sdram_controller_0_s1_agent_rp_ready),                   //      sink.ready
		.sink_valid         (new_sdram_controller_0_s1_agent_rp_valid),                   //          .valid
		.sink_data          (new_sdram_controller_0_s1_agent_rp_data),                    //          .data
		.sink_startofpacket (new_sdram_controller_0_s1_agent_rp_startofpacket),           //          .startofpacket
		.sink_endofpacket   (new_sdram_controller_0_s1_agent_rp_endofpacket),             //          .endofpacket
		.clk                (clk_0_clk_clk),                                              //       clk.clk
		.reset              (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_010_src_ready),                                       //       src.ready
		.src_valid          (router_010_src_valid),                                       //          .valid
		.src_data           (router_010_src_data),                                        //          .data
		.src_channel        (router_010_src_channel),                                     //          .channel
		.src_startofpacket  (router_010_src_startofpacket),                               //          .startofpacket
		.src_endofpacket    (router_010_src_endofpacket)                                  //          .endofpacket
	);

	nios_system_mm_interconnect_0_router_005 router_011 (
		.sink_ready         (rleds_s1_agent_rp_ready),                                    //      sink.ready
		.sink_valid         (rleds_s1_agent_rp_valid),                                    //          .valid
		.sink_data          (rleds_s1_agent_rp_data),                                     //          .data
		.sink_startofpacket (rleds_s1_agent_rp_startofpacket),                            //          .startofpacket
		.sink_endofpacket   (rleds_s1_agent_rp_endofpacket),                              //          .endofpacket
		.clk                (clk_0_clk_clk),                                              //       clk.clk
		.reset              (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_011_src_ready),                                       //       src.ready
		.src_valid          (router_011_src_valid),                                       //          .valid
		.src_data           (router_011_src_data),                                        //          .data
		.src_channel        (router_011_src_channel),                                     //          .channel
		.src_startofpacket  (router_011_src_startofpacket),                               //          .startofpacket
		.src_endofpacket    (router_011_src_endofpacket)                                  //          .endofpacket
	);

	nios_system_mm_interconnect_0_router_005 router_012 (
		.sink_ready         (gleds_s1_agent_rp_ready),                                    //      sink.ready
		.sink_valid         (gleds_s1_agent_rp_valid),                                    //          .valid
		.sink_data          (gleds_s1_agent_rp_data),                                     //          .data
		.sink_startofpacket (gleds_s1_agent_rp_startofpacket),                            //          .startofpacket
		.sink_endofpacket   (gleds_s1_agent_rp_endofpacket),                              //          .endofpacket
		.clk                (clk_0_clk_clk),                                              //       clk.clk
		.reset              (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_012_src_ready),                                       //       src.ready
		.src_valid          (router_012_src_valid),                                       //          .valid
		.src_data           (router_012_src_data),                                        //          .data
		.src_channel        (router_012_src_channel),                                     //          .channel
		.src_startofpacket  (router_012_src_startofpacket),                               //          .startofpacket
		.src_endofpacket    (router_012_src_endofpacket)                                  //          .endofpacket
	);

	nios_system_mm_interconnect_0_router_005 router_013 (
		.sink_ready         (switches_s1_agent_rp_ready),                                 //      sink.ready
		.sink_valid         (switches_s1_agent_rp_valid),                                 //          .valid
		.sink_data          (switches_s1_agent_rp_data),                                  //          .data
		.sink_startofpacket (switches_s1_agent_rp_startofpacket),                         //          .startofpacket
		.sink_endofpacket   (switches_s1_agent_rp_endofpacket),                           //          .endofpacket
		.clk                (clk_0_clk_clk),                                              //       clk.clk
		.reset              (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_013_src_ready),                                       //       src.ready
		.src_valid          (router_013_src_valid),                                       //          .valid
		.src_data           (router_013_src_data),                                        //          .data
		.src_channel        (router_013_src_channel),                                     //          .channel
		.src_startofpacket  (router_013_src_startofpacket),                               //          .startofpacket
		.src_endofpacket    (router_013_src_endofpacket)                                  //          .endofpacket
	);

	nios_system_mm_interconnect_0_router_004 router_014 (
		.sink_ready         (generic_tristate_controller_0_uas_agent_rp_ready),           //      sink.ready
		.sink_valid         (generic_tristate_controller_0_uas_agent_rp_valid),           //          .valid
		.sink_data          (generic_tristate_controller_0_uas_agent_rp_data),            //          .data
		.sink_startofpacket (generic_tristate_controller_0_uas_agent_rp_startofpacket),   //          .startofpacket
		.sink_endofpacket   (generic_tristate_controller_0_uas_agent_rp_endofpacket),     //          .endofpacket
		.clk                (clk_0_clk_clk),                                              //       clk.clk
		.reset              (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_014_src_ready),                                       //       src.ready
		.src_valid          (router_014_src_valid),                                       //          .valid
		.src_data           (router_014_src_data),                                        //          .data
		.src_channel        (router_014_src_channel),                                     //          .channel
		.src_startofpacket  (router_014_src_startofpacket),                               //          .startofpacket
		.src_endofpacket    (router_014_src_endofpacket)                                  //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (93),
		.PKT_SRC_ID_H              (92),
		.PKT_SRC_ID_L              (89),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.MAX_OUTSTANDING_RESPONSES (7),
		.PIPELINED                 (0),
		.ST_DATA_W                 (110),
		.ST_CHANNEL_W              (12),
		.VALID_WIDTH               (12),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) nios2_qsys_0_data_master_limiter (
		.clk                    (clk_0_clk_clk),                                              //       clk.clk
		.reset                  (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_001_src_ready),                                       //  cmd_sink.ready
		.cmd_sink_valid         (router_001_src_valid),                                       //          .valid
		.cmd_sink_data          (router_001_src_data),                                        //          .data
		.cmd_sink_channel       (router_001_src_channel),                                     //          .channel
		.cmd_sink_startofpacket (router_001_src_startofpacket),                               //          .startofpacket
		.cmd_sink_endofpacket   (router_001_src_endofpacket),                                 //          .endofpacket
		.cmd_src_ready          (nios2_qsys_0_data_master_limiter_cmd_src_ready),             //   cmd_src.ready
		.cmd_src_data           (nios2_qsys_0_data_master_limiter_cmd_src_data),              //          .data
		.cmd_src_channel        (nios2_qsys_0_data_master_limiter_cmd_src_channel),           //          .channel
		.cmd_src_startofpacket  (nios2_qsys_0_data_master_limiter_cmd_src_startofpacket),     //          .startofpacket
		.cmd_src_endofpacket    (nios2_qsys_0_data_master_limiter_cmd_src_endofpacket),       //          .endofpacket
		.rsp_sink_ready         (rsp_mux_001_src_ready),                                      //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_001_src_valid),                                      //          .valid
		.rsp_sink_channel       (rsp_mux_001_src_channel),                                    //          .channel
		.rsp_sink_data          (rsp_mux_001_src_data),                                       //          .data
		.rsp_sink_startofpacket (rsp_mux_001_src_startofpacket),                              //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_001_src_endofpacket),                                //          .endofpacket
		.rsp_src_ready          (nios2_qsys_0_data_master_limiter_rsp_src_ready),             //   rsp_src.ready
		.rsp_src_valid          (nios2_qsys_0_data_master_limiter_rsp_src_valid),             //          .valid
		.rsp_src_data           (nios2_qsys_0_data_master_limiter_rsp_src_data),              //          .data
		.rsp_src_channel        (nios2_qsys_0_data_master_limiter_rsp_src_channel),           //          .channel
		.rsp_src_startofpacket  (nios2_qsys_0_data_master_limiter_rsp_src_startofpacket),     //          .startofpacket
		.rsp_src_endofpacket    (nios2_qsys_0_data_master_limiter_rsp_src_endofpacket),       //          .endofpacket
		.cmd_src_valid          (nios2_qsys_0_data_master_limiter_cmd_valid_data)             // cmd_valid.data
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (96),
		.PKT_DEST_ID_L             (93),
		.PKT_SRC_ID_H              (92),
		.PKT_SRC_ID_L              (89),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.MAX_OUTSTANDING_RESPONSES (7),
		.PIPELINED                 (0),
		.ST_DATA_W                 (110),
		.ST_CHANNEL_W              (12),
		.VALID_WIDTH               (12),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) nios2_qsys_0_instruction_master_limiter (
		.clk                    (clk_0_clk_clk),                                                 //       clk.clk
		.reset                  (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.cmd_sink_ready         (router_002_src_ready),                                          //  cmd_sink.ready
		.cmd_sink_valid         (router_002_src_valid),                                          //          .valid
		.cmd_sink_data          (router_002_src_data),                                           //          .data
		.cmd_sink_channel       (router_002_src_channel),                                        //          .channel
		.cmd_sink_startofpacket (router_002_src_startofpacket),                                  //          .startofpacket
		.cmd_sink_endofpacket   (router_002_src_endofpacket),                                    //          .endofpacket
		.cmd_src_ready          (nios2_qsys_0_instruction_master_limiter_cmd_src_ready),         //   cmd_src.ready
		.cmd_src_data           (nios2_qsys_0_instruction_master_limiter_cmd_src_data),          //          .data
		.cmd_src_channel        (nios2_qsys_0_instruction_master_limiter_cmd_src_channel),       //          .channel
		.cmd_src_startofpacket  (nios2_qsys_0_instruction_master_limiter_cmd_src_startofpacket), //          .startofpacket
		.cmd_src_endofpacket    (nios2_qsys_0_instruction_master_limiter_cmd_src_endofpacket),   //          .endofpacket
		.rsp_sink_ready         (rsp_mux_002_src_ready),                                         //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_002_src_valid),                                         //          .valid
		.rsp_sink_channel       (rsp_mux_002_src_channel),                                       //          .channel
		.rsp_sink_data          (rsp_mux_002_src_data),                                          //          .data
		.rsp_sink_startofpacket (rsp_mux_002_src_startofpacket),                                 //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_002_src_endofpacket),                                   //          .endofpacket
		.rsp_src_ready          (nios2_qsys_0_instruction_master_limiter_rsp_src_ready),         //   rsp_src.ready
		.rsp_src_valid          (nios2_qsys_0_instruction_master_limiter_rsp_src_valid),         //          .valid
		.rsp_src_data           (nios2_qsys_0_instruction_master_limiter_rsp_src_data),          //          .data
		.rsp_src_channel        (nios2_qsys_0_instruction_master_limiter_rsp_src_channel),       //          .channel
		.rsp_src_startofpacket  (nios2_qsys_0_instruction_master_limiter_rsp_src_startofpacket), //          .startofpacket
		.rsp_src_endofpacket    (nios2_qsys_0_instruction_master_limiter_rsp_src_endofpacket),   //          .endofpacket
		.cmd_src_valid          (nios2_qsys_0_instruction_master_limiter_cmd_valid_data)         // cmd_valid.data
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (18),
		.PKT_BEGIN_BURST           (69),
		.PKT_BYTE_CNT_H            (58),
		.PKT_BYTE_CNT_L            (56),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_BURST_SIZE_H          (64),
		.PKT_BURST_SIZE_L          (62),
		.PKT_BURST_TYPE_H          (66),
		.PKT_BURST_TYPE_L          (65),
		.PKT_BURSTWRAP_H           (61),
		.PKT_BURSTWRAP_L           (59),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (92),
		.ST_CHANNEL_W              (12),
		.OUT_BYTE_CNT_H            (57),
		.OUT_BURSTWRAP_H           (61),
		.COMPRESSED_READ_SUPPORT   (0),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (7),
		.BURSTWRAP_CONST_VALUE     (7),
		.ADAPTER_VERSION           ("13.1")
	) sram_0_avalon_sram_slave_burst_adapter (
		.clk                   (clk_0_clk_clk),                                                //       cr0.clk
		.reset                 (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset),   // cr0_reset.reset
		.sink0_valid           (cmd_mux_src_valid),                                            //     sink0.valid
		.sink0_data            (cmd_mux_src_data),                                             //          .data
		.sink0_channel         (cmd_mux_src_channel),                                          //          .channel
		.sink0_startofpacket   (cmd_mux_src_startofpacket),                                    //          .startofpacket
		.sink0_endofpacket     (cmd_mux_src_endofpacket),                                      //          .endofpacket
		.sink0_ready           (cmd_mux_src_ready),                                            //          .ready
		.source0_valid         (sram_0_avalon_sram_slave_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (sram_0_avalon_sram_slave_burst_adapter_source0_data),          //          .data
		.source0_channel       (sram_0_avalon_sram_slave_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (sram_0_avalon_sram_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (sram_0_avalon_sram_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (sram_0_avalon_sram_slave_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (40),
		.PKT_ADDR_L                (9),
		.PKT_BEGIN_BURST           (60),
		.PKT_BYTE_CNT_H            (49),
		.PKT_BYTE_CNT_L            (47),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_BURST_SIZE_H          (55),
		.PKT_BURST_SIZE_L          (53),
		.PKT_BURST_TYPE_H          (57),
		.PKT_BURST_TYPE_L          (56),
		.PKT_BURSTWRAP_H           (52),
		.PKT_BURSTWRAP_L           (50),
		.PKT_TRANS_COMPRESSED_READ (41),
		.PKT_TRANS_WRITE           (43),
		.PKT_TRANS_READ            (44),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (83),
		.ST_CHANNEL_W              (12),
		.OUT_BYTE_CNT_H            (47),
		.OUT_BURSTWRAP_H           (52),
		.COMPRESSED_READ_SUPPORT   (0),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (7),
		.BURSTWRAP_CONST_VALUE     (7),
		.ADAPTER_VERSION           ("13.1")
	) video_character_buffer_with_dma_0_avalon_char_buffer_slave_burst_adapter (
		.clk                   (clk_0_clk_clk),                                                                                  //       cr0.clk
		.reset                 (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset),                                     // cr0_reset.reset
		.sink0_valid           (cmd_mux_001_src_valid),                                                                          //     sink0.valid
		.sink0_data            (cmd_mux_001_src_data),                                                                           //          .data
		.sink0_channel         (cmd_mux_001_src_channel),                                                                        //          .channel
		.sink0_startofpacket   (cmd_mux_001_src_startofpacket),                                                                  //          .startofpacket
		.sink0_endofpacket     (cmd_mux_001_src_endofpacket),                                                                    //          .endofpacket
		.sink0_ready           (cmd_mux_001_src_ready),                                                                          //          .ready
		.source0_valid         (video_character_buffer_with_dma_0_avalon_char_buffer_slave_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (video_character_buffer_with_dma_0_avalon_char_buffer_slave_burst_adapter_source0_data),          //          .data
		.source0_channel       (video_character_buffer_with_dma_0_avalon_char_buffer_slave_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (video_character_buffer_with_dma_0_avalon_char_buffer_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (video_character_buffer_with_dma_0_avalon_char_buffer_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (video_character_buffer_with_dma_0_avalon_char_buffer_slave_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (40),
		.PKT_ADDR_L                (9),
		.PKT_BEGIN_BURST           (60),
		.PKT_BYTE_CNT_H            (49),
		.PKT_BYTE_CNT_L            (47),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_BURST_SIZE_H          (55),
		.PKT_BURST_SIZE_L          (53),
		.PKT_BURST_TYPE_H          (57),
		.PKT_BURST_TYPE_L          (56),
		.PKT_BURSTWRAP_H           (52),
		.PKT_BURSTWRAP_L           (50),
		.PKT_TRANS_COMPRESSED_READ (41),
		.PKT_TRANS_WRITE           (43),
		.PKT_TRANS_READ            (44),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (83),
		.ST_CHANNEL_W              (12),
		.OUT_BYTE_CNT_H            (47),
		.OUT_BURSTWRAP_H           (52),
		.COMPRESSED_READ_SUPPORT   (0),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (7),
		.BURSTWRAP_CONST_VALUE     (7),
		.ADAPTER_VERSION           ("13.1")
	) generic_tristate_controller_0_uas_burst_adapter (
		.clk                   (clk_0_clk_clk),                                                         //       cr0.clk
		.reset                 (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset),            // cr0_reset.reset
		.sink0_valid           (cmd_mux_011_src_valid),                                                 //     sink0.valid
		.sink0_data            (cmd_mux_011_src_data),                                                  //          .data
		.sink0_channel         (cmd_mux_011_src_channel),                                               //          .channel
		.sink0_startofpacket   (cmd_mux_011_src_startofpacket),                                         //          .startofpacket
		.sink0_endofpacket     (cmd_mux_011_src_endofpacket),                                           //          .endofpacket
		.sink0_ready           (cmd_mux_011_src_ready),                                                 //          .ready
		.source0_valid         (generic_tristate_controller_0_uas_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (generic_tristate_controller_0_uas_burst_adapter_source0_data),          //          .data
		.source0_channel       (generic_tristate_controller_0_uas_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (generic_tristate_controller_0_uas_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (generic_tristate_controller_0_uas_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (generic_tristate_controller_0_uas_burst_adapter_source0_ready)          //          .ready
	);

	nios_system_mm_interconnect_0_cmd_demux cmd_demux (
		.clk                (clk_0_clk_clk),                                              //       clk.clk
		.reset              (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_src_ready),                                           //      sink.ready
		.sink_channel       (router_src_channel),                                         //          .channel
		.sink_data          (router_src_data),                                            //          .data
		.sink_startofpacket (router_src_startofpacket),                                   //          .startofpacket
		.sink_endofpacket   (router_src_endofpacket),                                     //          .endofpacket
		.sink_valid         (router_src_valid),                                           //          .valid
		.src0_ready         (cmd_demux_src0_ready),                                       //      src0.ready
		.src0_valid         (cmd_demux_src0_valid),                                       //          .valid
		.src0_data          (cmd_demux_src0_data),                                        //          .data
		.src0_channel       (cmd_demux_src0_channel),                                     //          .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                               //          .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket)                                  //          .endofpacket
	);

	nios_system_mm_interconnect_0_cmd_demux_001 cmd_demux_001 (
		.clk                 (clk_0_clk_clk),                                              //        clk.clk
		.reset               (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready          (nios2_qsys_0_data_master_limiter_cmd_src_ready),             //       sink.ready
		.sink_channel        (nios2_qsys_0_data_master_limiter_cmd_src_channel),           //           .channel
		.sink_data           (nios2_qsys_0_data_master_limiter_cmd_src_data),              //           .data
		.sink_startofpacket  (nios2_qsys_0_data_master_limiter_cmd_src_startofpacket),     //           .startofpacket
		.sink_endofpacket    (nios2_qsys_0_data_master_limiter_cmd_src_endofpacket),       //           .endofpacket
		.sink_valid          (nios2_qsys_0_data_master_limiter_cmd_valid_data),            // sink_valid.data
		.src0_ready          (cmd_demux_001_src0_ready),                                   //       src0.ready
		.src0_valid          (cmd_demux_001_src0_valid),                                   //           .valid
		.src0_data           (cmd_demux_001_src0_data),                                    //           .data
		.src0_channel        (cmd_demux_001_src0_channel),                                 //           .channel
		.src0_startofpacket  (cmd_demux_001_src0_startofpacket),                           //           .startofpacket
		.src0_endofpacket    (cmd_demux_001_src0_endofpacket),                             //           .endofpacket
		.src1_ready          (cmd_demux_001_src1_ready),                                   //       src1.ready
		.src1_valid          (cmd_demux_001_src1_valid),                                   //           .valid
		.src1_data           (cmd_demux_001_src1_data),                                    //           .data
		.src1_channel        (cmd_demux_001_src1_channel),                                 //           .channel
		.src1_startofpacket  (cmd_demux_001_src1_startofpacket),                           //           .startofpacket
		.src1_endofpacket    (cmd_demux_001_src1_endofpacket),                             //           .endofpacket
		.src2_ready          (cmd_demux_001_src2_ready),                                   //       src2.ready
		.src2_valid          (cmd_demux_001_src2_valid),                                   //           .valid
		.src2_data           (cmd_demux_001_src2_data),                                    //           .data
		.src2_channel        (cmd_demux_001_src2_channel),                                 //           .channel
		.src2_startofpacket  (cmd_demux_001_src2_startofpacket),                           //           .startofpacket
		.src2_endofpacket    (cmd_demux_001_src2_endofpacket),                             //           .endofpacket
		.src3_ready          (cmd_demux_001_src3_ready),                                   //       src3.ready
		.src3_valid          (cmd_demux_001_src3_valid),                                   //           .valid
		.src3_data           (cmd_demux_001_src3_data),                                    //           .data
		.src3_channel        (cmd_demux_001_src3_channel),                                 //           .channel
		.src3_startofpacket  (cmd_demux_001_src3_startofpacket),                           //           .startofpacket
		.src3_endofpacket    (cmd_demux_001_src3_endofpacket),                             //           .endofpacket
		.src4_ready          (cmd_demux_001_src4_ready),                                   //       src4.ready
		.src4_valid          (cmd_demux_001_src4_valid),                                   //           .valid
		.src4_data           (cmd_demux_001_src4_data),                                    //           .data
		.src4_channel        (cmd_demux_001_src4_channel),                                 //           .channel
		.src4_startofpacket  (cmd_demux_001_src4_startofpacket),                           //           .startofpacket
		.src4_endofpacket    (cmd_demux_001_src4_endofpacket),                             //           .endofpacket
		.src5_ready          (cmd_demux_001_src5_ready),                                   //       src5.ready
		.src5_valid          (cmd_demux_001_src5_valid),                                   //           .valid
		.src5_data           (cmd_demux_001_src5_data),                                    //           .data
		.src5_channel        (cmd_demux_001_src5_channel),                                 //           .channel
		.src5_startofpacket  (cmd_demux_001_src5_startofpacket),                           //           .startofpacket
		.src5_endofpacket    (cmd_demux_001_src5_endofpacket),                             //           .endofpacket
		.src6_ready          (cmd_demux_001_src6_ready),                                   //       src6.ready
		.src6_valid          (cmd_demux_001_src6_valid),                                   //           .valid
		.src6_data           (cmd_demux_001_src6_data),                                    //           .data
		.src6_channel        (cmd_demux_001_src6_channel),                                 //           .channel
		.src6_startofpacket  (cmd_demux_001_src6_startofpacket),                           //           .startofpacket
		.src6_endofpacket    (cmd_demux_001_src6_endofpacket),                             //           .endofpacket
		.src7_ready          (cmd_demux_001_src7_ready),                                   //       src7.ready
		.src7_valid          (cmd_demux_001_src7_valid),                                   //           .valid
		.src7_data           (cmd_demux_001_src7_data),                                    //           .data
		.src7_channel        (cmd_demux_001_src7_channel),                                 //           .channel
		.src7_startofpacket  (cmd_demux_001_src7_startofpacket),                           //           .startofpacket
		.src7_endofpacket    (cmd_demux_001_src7_endofpacket),                             //           .endofpacket
		.src8_ready          (cmd_demux_001_src8_ready),                                   //       src8.ready
		.src8_valid          (cmd_demux_001_src8_valid),                                   //           .valid
		.src8_data           (cmd_demux_001_src8_data),                                    //           .data
		.src8_channel        (cmd_demux_001_src8_channel),                                 //           .channel
		.src8_startofpacket  (cmd_demux_001_src8_startofpacket),                           //           .startofpacket
		.src8_endofpacket    (cmd_demux_001_src8_endofpacket),                             //           .endofpacket
		.src9_ready          (cmd_demux_001_src9_ready),                                   //       src9.ready
		.src9_valid          (cmd_demux_001_src9_valid),                                   //           .valid
		.src9_data           (cmd_demux_001_src9_data),                                    //           .data
		.src9_channel        (cmd_demux_001_src9_channel),                                 //           .channel
		.src9_startofpacket  (cmd_demux_001_src9_startofpacket),                           //           .startofpacket
		.src9_endofpacket    (cmd_demux_001_src9_endofpacket),                             //           .endofpacket
		.src10_ready         (cmd_demux_001_src10_ready),                                  //      src10.ready
		.src10_valid         (cmd_demux_001_src10_valid),                                  //           .valid
		.src10_data          (cmd_demux_001_src10_data),                                   //           .data
		.src10_channel       (cmd_demux_001_src10_channel),                                //           .channel
		.src10_startofpacket (cmd_demux_001_src10_startofpacket),                          //           .startofpacket
		.src10_endofpacket   (cmd_demux_001_src10_endofpacket),                            //           .endofpacket
		.src11_ready         (cmd_demux_001_src11_ready),                                  //      src11.ready
		.src11_valid         (cmd_demux_001_src11_valid),                                  //           .valid
		.src11_data          (cmd_demux_001_src11_data),                                   //           .data
		.src11_channel       (cmd_demux_001_src11_channel),                                //           .channel
		.src11_startofpacket (cmd_demux_001_src11_startofpacket),                          //           .startofpacket
		.src11_endofpacket   (cmd_demux_001_src11_endofpacket)                             //           .endofpacket
	);

	nios_system_mm_interconnect_0_cmd_demux_002 cmd_demux_002 (
		.clk                (clk_0_clk_clk),                                                 //        clk.clk
		.reset              (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset),    //  clk_reset.reset
		.sink_ready         (nios2_qsys_0_instruction_master_limiter_cmd_src_ready),         //       sink.ready
		.sink_channel       (nios2_qsys_0_instruction_master_limiter_cmd_src_channel),       //           .channel
		.sink_data          (nios2_qsys_0_instruction_master_limiter_cmd_src_data),          //           .data
		.sink_startofpacket (nios2_qsys_0_instruction_master_limiter_cmd_src_startofpacket), //           .startofpacket
		.sink_endofpacket   (nios2_qsys_0_instruction_master_limiter_cmd_src_endofpacket),   //           .endofpacket
		.sink_valid         (nios2_qsys_0_instruction_master_limiter_cmd_valid_data),        // sink_valid.data
		.src0_ready         (cmd_demux_002_src0_ready),                                      //       src0.ready
		.src0_valid         (cmd_demux_002_src0_valid),                                      //           .valid
		.src0_data          (cmd_demux_002_src0_data),                                       //           .data
		.src0_channel       (cmd_demux_002_src0_channel),                                    //           .channel
		.src0_startofpacket (cmd_demux_002_src0_startofpacket),                              //           .startofpacket
		.src0_endofpacket   (cmd_demux_002_src0_endofpacket),                                //           .endofpacket
		.src1_ready         (cmd_demux_002_src1_ready),                                      //       src1.ready
		.src1_valid         (cmd_demux_002_src1_valid),                                      //           .valid
		.src1_data          (cmd_demux_002_src1_data),                                       //           .data
		.src1_channel       (cmd_demux_002_src1_channel),                                    //           .channel
		.src1_startofpacket (cmd_demux_002_src1_startofpacket),                              //           .startofpacket
		.src1_endofpacket   (cmd_demux_002_src1_endofpacket)                                 //           .endofpacket
	);

	nios_system_mm_interconnect_0_cmd_mux cmd_mux (
		.clk                 (clk_0_clk_clk),                                                                            //       clk.clk
		.reset               (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset),                               // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                                                        //       src.ready
		.src_valid           (cmd_mux_src_valid),                                                                        //          .valid
		.src_data            (cmd_mux_src_data),                                                                         //          .data
		.src_channel         (cmd_mux_src_channel),                                                                      //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                                                                //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                                                                  //          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                                                                     //     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                                                                     //          .valid
		.sink0_channel       (cmd_demux_src0_channel),                                                                   //          .channel
		.sink0_data          (cmd_demux_src0_data),                                                                      //          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                                                             //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket),                                                               //          .endofpacket
		.sink1_ready         (nios2_qsys_0_data_master_to_sram_0_avalon_sram_slave_cmd_width_adapter_src_ready),         //     sink1.ready
		.sink1_valid         (nios2_qsys_0_data_master_to_sram_0_avalon_sram_slave_cmd_width_adapter_src_valid),         //          .valid
		.sink1_channel       (nios2_qsys_0_data_master_to_sram_0_avalon_sram_slave_cmd_width_adapter_src_channel),       //          .channel
		.sink1_data          (nios2_qsys_0_data_master_to_sram_0_avalon_sram_slave_cmd_width_adapter_src_data),          //          .data
		.sink1_startofpacket (nios2_qsys_0_data_master_to_sram_0_avalon_sram_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink1_endofpacket   (nios2_qsys_0_data_master_to_sram_0_avalon_sram_slave_cmd_width_adapter_src_endofpacket)    //          .endofpacket
	);

	nios_system_mm_interconnect_0_cmd_mux_001 cmd_mux_001 (
		.clk                 (clk_0_clk_clk),                                                                                                              //       clk.clk
		.reset               (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset),                                                                 // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                                                                                                      //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                                                                                                      //          .valid
		.src_data            (cmd_mux_001_src_data),                                                                                                       //          .data
		.src_channel         (cmd_mux_001_src_channel),                                                                                                    //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                                                                                              //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                                                                                                //          .endofpacket
		.sink0_ready         (nios2_qsys_0_data_master_to_video_character_buffer_with_dma_0_avalon_char_buffer_slave_cmd_width_adapter_src_ready),         //     sink0.ready
		.sink0_valid         (nios2_qsys_0_data_master_to_video_character_buffer_with_dma_0_avalon_char_buffer_slave_cmd_width_adapter_src_valid),         //          .valid
		.sink0_channel       (nios2_qsys_0_data_master_to_video_character_buffer_with_dma_0_avalon_char_buffer_slave_cmd_width_adapter_src_channel),       //          .channel
		.sink0_data          (nios2_qsys_0_data_master_to_video_character_buffer_with_dma_0_avalon_char_buffer_slave_cmd_width_adapter_src_data),          //          .data
		.sink0_startofpacket (nios2_qsys_0_data_master_to_video_character_buffer_with_dma_0_avalon_char_buffer_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket   (nios2_qsys_0_data_master_to_video_character_buffer_with_dma_0_avalon_char_buffer_slave_cmd_width_adapter_src_endofpacket)    //          .endofpacket
	);

	nios_system_mm_interconnect_0_cmd_mux_002 cmd_mux_002 (
		.clk                 (clk_0_clk_clk),                                              //       clk.clk
		.reset               (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                                      //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                                      //          .valid
		.src_data            (cmd_mux_002_src_data),                                       //          .data
		.src_channel         (cmd_mux_002_src_channel),                                    //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),                              //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                                //          .endofpacket
		.sink0_ready         (cmd_demux_001_src2_ready),                                   //     sink0.ready
		.sink0_valid         (cmd_demux_001_src2_valid),                                   //          .valid
		.sink0_channel       (cmd_demux_001_src2_channel),                                 //          .channel
		.sink0_data          (cmd_demux_001_src2_data),                                    //          .data
		.sink0_startofpacket (cmd_demux_001_src2_startofpacket),                           //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src2_endofpacket)                              //          .endofpacket
	);

	nios_system_mm_interconnect_0_cmd_mux_002 cmd_mux_003 (
		.clk                 (clk_0_clk_clk),                                              //       clk.clk
		.reset               (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                                      //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                                      //          .valid
		.src_data            (cmd_mux_003_src_data),                                       //          .data
		.src_channel         (cmd_mux_003_src_channel),                                    //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),                              //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),                                //          .endofpacket
		.sink0_ready         (cmd_demux_001_src3_ready),                                   //     sink0.ready
		.sink0_valid         (cmd_demux_001_src3_valid),                                   //          .valid
		.sink0_channel       (cmd_demux_001_src3_channel),                                 //          .channel
		.sink0_data          (cmd_demux_001_src3_data),                                    //          .data
		.sink0_startofpacket (cmd_demux_001_src3_startofpacket),                           //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src3_endofpacket)                              //          .endofpacket
	);

	nios_system_mm_interconnect_0_cmd_mux_002 cmd_mux_004 (
		.clk                 (clk_0_clk_clk),                                              //       clk.clk
		.reset               (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                                      //       src.ready
		.src_valid           (cmd_mux_004_src_valid),                                      //          .valid
		.src_data            (cmd_mux_004_src_data),                                       //          .data
		.src_channel         (cmd_mux_004_src_channel),                                    //          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),                              //          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),                                //          .endofpacket
		.sink0_ready         (cmd_demux_001_src4_ready),                                   //     sink0.ready
		.sink0_valid         (cmd_demux_001_src4_valid),                                   //          .valid
		.sink0_channel       (cmd_demux_001_src4_channel),                                 //          .channel
		.sink0_data          (cmd_demux_001_src4_data),                                    //          .data
		.sink0_startofpacket (cmd_demux_001_src4_startofpacket),                           //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src4_endofpacket)                              //          .endofpacket
	);

	nios_system_mm_interconnect_0_cmd_mux_002 cmd_mux_005 (
		.clk                 (clk_0_clk_clk),                                              //       clk.clk
		.reset               (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_005_src_ready),                                      //       src.ready
		.src_valid           (cmd_mux_005_src_valid),                                      //          .valid
		.src_data            (cmd_mux_005_src_data),                                       //          .data
		.src_channel         (cmd_mux_005_src_channel),                                    //          .channel
		.src_startofpacket   (cmd_mux_005_src_startofpacket),                              //          .startofpacket
		.src_endofpacket     (cmd_mux_005_src_endofpacket),                                //          .endofpacket
		.sink0_ready         (cmd_demux_001_src5_ready),                                   //     sink0.ready
		.sink0_valid         (cmd_demux_001_src5_valid),                                   //          .valid
		.sink0_channel       (cmd_demux_001_src5_channel),                                 //          .channel
		.sink0_data          (cmd_demux_001_src5_data),                                    //          .data
		.sink0_startofpacket (cmd_demux_001_src5_startofpacket),                           //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src5_endofpacket)                              //          .endofpacket
	);

	nios_system_mm_interconnect_0_cmd_mux_006 cmd_mux_006 (
		.clk                 (clk_0_clk_clk),                                              //       clk.clk
		.reset               (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_006_src_ready),                                      //       src.ready
		.src_valid           (cmd_mux_006_src_valid),                                      //          .valid
		.src_data            (cmd_mux_006_src_data),                                       //          .data
		.src_channel         (cmd_mux_006_src_channel),                                    //          .channel
		.src_startofpacket   (cmd_mux_006_src_startofpacket),                              //          .startofpacket
		.src_endofpacket     (cmd_mux_006_src_endofpacket),                                //          .endofpacket
		.sink0_ready         (cmd_demux_001_src6_ready),                                   //     sink0.ready
		.sink0_valid         (cmd_demux_001_src6_valid),                                   //          .valid
		.sink0_channel       (cmd_demux_001_src6_channel),                                 //          .channel
		.sink0_data          (cmd_demux_001_src6_data),                                    //          .data
		.sink0_startofpacket (cmd_demux_001_src6_startofpacket),                           //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src6_endofpacket),                             //          .endofpacket
		.sink1_ready         (cmd_demux_002_src0_ready),                                   //     sink1.ready
		.sink1_valid         (cmd_demux_002_src0_valid),                                   //          .valid
		.sink1_channel       (cmd_demux_002_src0_channel),                                 //          .channel
		.sink1_data          (cmd_demux_002_src0_data),                                    //          .data
		.sink1_startofpacket (cmd_demux_002_src0_startofpacket),                           //          .startofpacket
		.sink1_endofpacket   (cmd_demux_002_src0_endofpacket)                              //          .endofpacket
	);

	nios_system_mm_interconnect_0_cmd_mux_006 cmd_mux_007 (
		.clk                 (clk_0_clk_clk),                                              //       clk.clk
		.reset               (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_007_src_ready),                                      //       src.ready
		.src_valid           (cmd_mux_007_src_valid),                                      //          .valid
		.src_data            (cmd_mux_007_src_data),                                       //          .data
		.src_channel         (cmd_mux_007_src_channel),                                    //          .channel
		.src_startofpacket   (cmd_mux_007_src_startofpacket),                              //          .startofpacket
		.src_endofpacket     (cmd_mux_007_src_endofpacket),                                //          .endofpacket
		.sink0_ready         (cmd_demux_001_src7_ready),                                   //     sink0.ready
		.sink0_valid         (cmd_demux_001_src7_valid),                                   //          .valid
		.sink0_channel       (cmd_demux_001_src7_channel),                                 //          .channel
		.sink0_data          (cmd_demux_001_src7_data),                                    //          .data
		.sink0_startofpacket (cmd_demux_001_src7_startofpacket),                           //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src7_endofpacket),                             //          .endofpacket
		.sink1_ready         (cmd_demux_002_src1_ready),                                   //     sink1.ready
		.sink1_valid         (cmd_demux_002_src1_valid),                                   //          .valid
		.sink1_channel       (cmd_demux_002_src1_channel),                                 //          .channel
		.sink1_data          (cmd_demux_002_src1_data),                                    //          .data
		.sink1_startofpacket (cmd_demux_002_src1_startofpacket),                           //          .startofpacket
		.sink1_endofpacket   (cmd_demux_002_src1_endofpacket)                              //          .endofpacket
	);

	nios_system_mm_interconnect_0_cmd_mux_002 cmd_mux_008 (
		.clk                 (clk_0_clk_clk),                                              //       clk.clk
		.reset               (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_008_src_ready),                                      //       src.ready
		.src_valid           (cmd_mux_008_src_valid),                                      //          .valid
		.src_data            (cmd_mux_008_src_data),                                       //          .data
		.src_channel         (cmd_mux_008_src_channel),                                    //          .channel
		.src_startofpacket   (cmd_mux_008_src_startofpacket),                              //          .startofpacket
		.src_endofpacket     (cmd_mux_008_src_endofpacket),                                //          .endofpacket
		.sink0_ready         (cmd_demux_001_src8_ready),                                   //     sink0.ready
		.sink0_valid         (cmd_demux_001_src8_valid),                                   //          .valid
		.sink0_channel       (cmd_demux_001_src8_channel),                                 //          .channel
		.sink0_data          (cmd_demux_001_src8_data),                                    //          .data
		.sink0_startofpacket (cmd_demux_001_src8_startofpacket),                           //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src8_endofpacket)                              //          .endofpacket
	);

	nios_system_mm_interconnect_0_cmd_mux_002 cmd_mux_009 (
		.clk                 (clk_0_clk_clk),                                              //       clk.clk
		.reset               (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_009_src_ready),                                      //       src.ready
		.src_valid           (cmd_mux_009_src_valid),                                      //          .valid
		.src_data            (cmd_mux_009_src_data),                                       //          .data
		.src_channel         (cmd_mux_009_src_channel),                                    //          .channel
		.src_startofpacket   (cmd_mux_009_src_startofpacket),                              //          .startofpacket
		.src_endofpacket     (cmd_mux_009_src_endofpacket),                                //          .endofpacket
		.sink0_ready         (cmd_demux_001_src9_ready),                                   //     sink0.ready
		.sink0_valid         (cmd_demux_001_src9_valid),                                   //          .valid
		.sink0_channel       (cmd_demux_001_src9_channel),                                 //          .channel
		.sink0_data          (cmd_demux_001_src9_data),                                    //          .data
		.sink0_startofpacket (cmd_demux_001_src9_startofpacket),                           //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src9_endofpacket)                              //          .endofpacket
	);

	nios_system_mm_interconnect_0_cmd_mux_002 cmd_mux_010 (
		.clk                 (clk_0_clk_clk),                                              //       clk.clk
		.reset               (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_010_src_ready),                                      //       src.ready
		.src_valid           (cmd_mux_010_src_valid),                                      //          .valid
		.src_data            (cmd_mux_010_src_data),                                       //          .data
		.src_channel         (cmd_mux_010_src_channel),                                    //          .channel
		.src_startofpacket   (cmd_mux_010_src_startofpacket),                              //          .startofpacket
		.src_endofpacket     (cmd_mux_010_src_endofpacket),                                //          .endofpacket
		.sink0_ready         (cmd_demux_001_src10_ready),                                  //     sink0.ready
		.sink0_valid         (cmd_demux_001_src10_valid),                                  //          .valid
		.sink0_channel       (cmd_demux_001_src10_channel),                                //          .channel
		.sink0_data          (cmd_demux_001_src10_data),                                   //          .data
		.sink0_startofpacket (cmd_demux_001_src10_startofpacket),                          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src10_endofpacket)                             //          .endofpacket
	);

	nios_system_mm_interconnect_0_cmd_mux_001 cmd_mux_011 (
		.clk                 (clk_0_clk_clk),                                                                                     //       clk.clk
		.reset               (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset),                                        // clk_reset.reset
		.src_ready           (cmd_mux_011_src_ready),                                                                             //       src.ready
		.src_valid           (cmd_mux_011_src_valid),                                                                             //          .valid
		.src_data            (cmd_mux_011_src_data),                                                                              //          .data
		.src_channel         (cmd_mux_011_src_channel),                                                                           //          .channel
		.src_startofpacket   (cmd_mux_011_src_startofpacket),                                                                     //          .startofpacket
		.src_endofpacket     (cmd_mux_011_src_endofpacket),                                                                       //          .endofpacket
		.sink0_ready         (nios2_qsys_0_data_master_to_generic_tristate_controller_0_uas_cmd_width_adapter_src_ready),         //     sink0.ready
		.sink0_valid         (nios2_qsys_0_data_master_to_generic_tristate_controller_0_uas_cmd_width_adapter_src_valid),         //          .valid
		.sink0_channel       (nios2_qsys_0_data_master_to_generic_tristate_controller_0_uas_cmd_width_adapter_src_channel),       //          .channel
		.sink0_data          (nios2_qsys_0_data_master_to_generic_tristate_controller_0_uas_cmd_width_adapter_src_data),          //          .data
		.sink0_startofpacket (nios2_qsys_0_data_master_to_generic_tristate_controller_0_uas_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket   (nios2_qsys_0_data_master_to_generic_tristate_controller_0_uas_cmd_width_adapter_src_endofpacket)    //          .endofpacket
	);

	nios_system_mm_interconnect_0_rsp_demux rsp_demux (
		.clk                (clk_0_clk_clk),                                              //       clk.clk
		.reset              (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_003_src_ready),                                       //      sink.ready
		.sink_channel       (router_003_src_channel),                                     //          .channel
		.sink_data          (router_003_src_data),                                        //          .data
		.sink_startofpacket (router_003_src_startofpacket),                               //          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),                                 //          .endofpacket
		.sink_valid         (router_003_src_valid),                                       //          .valid
		.src0_ready         (rsp_demux_src0_ready),                                       //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                       //          .valid
		.src0_data          (rsp_demux_src0_data),                                        //          .data
		.src0_channel       (rsp_demux_src0_channel),                                     //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                               //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket),                                 //          .endofpacket
		.src1_ready         (rsp_demux_src1_ready),                                       //      src1.ready
		.src1_valid         (rsp_demux_src1_valid),                                       //          .valid
		.src1_data          (rsp_demux_src1_data),                                        //          .data
		.src1_channel       (rsp_demux_src1_channel),                                     //          .channel
		.src1_startofpacket (rsp_demux_src1_startofpacket),                               //          .startofpacket
		.src1_endofpacket   (rsp_demux_src1_endofpacket)                                  //          .endofpacket
	);

	nios_system_mm_interconnect_0_rsp_demux_001 rsp_demux_001 (
		.clk                (clk_0_clk_clk),                                              //       clk.clk
		.reset              (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_004_src_ready),                                       //      sink.ready
		.sink_channel       (router_004_src_channel),                                     //          .channel
		.sink_data          (router_004_src_data),                                        //          .data
		.sink_startofpacket (router_004_src_startofpacket),                               //          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),                                 //          .endofpacket
		.sink_valid         (router_004_src_valid),                                       //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                                   //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                                   //          .valid
		.src0_data          (rsp_demux_001_src0_data),                                    //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                                 //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),                           //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket)                              //          .endofpacket
	);

	nios_system_mm_interconnect_0_rsp_demux_002 rsp_demux_002 (
		.clk                (clk_0_clk_clk),                                              //       clk.clk
		.reset              (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_005_src_ready),                                       //      sink.ready
		.sink_channel       (router_005_src_channel),                                     //          .channel
		.sink_data          (router_005_src_data),                                        //          .data
		.sink_startofpacket (router_005_src_startofpacket),                               //          .startofpacket
		.sink_endofpacket   (router_005_src_endofpacket),                                 //          .endofpacket
		.sink_valid         (router_005_src_valid),                                       //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                                   //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                                   //          .valid
		.src0_data          (rsp_demux_002_src0_data),                                    //          .data
		.src0_channel       (rsp_demux_002_src0_channel),                                 //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),                           //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket)                              //          .endofpacket
	);

	nios_system_mm_interconnect_0_rsp_demux_002 rsp_demux_003 (
		.clk                (clk_0_clk_clk),                                              //       clk.clk
		.reset              (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_006_src_ready),                                       //      sink.ready
		.sink_channel       (router_006_src_channel),                                     //          .channel
		.sink_data          (router_006_src_data),                                        //          .data
		.sink_startofpacket (router_006_src_startofpacket),                               //          .startofpacket
		.sink_endofpacket   (router_006_src_endofpacket),                                 //          .endofpacket
		.sink_valid         (router_006_src_valid),                                       //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                                   //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                                   //          .valid
		.src0_data          (rsp_demux_003_src0_data),                                    //          .data
		.src0_channel       (rsp_demux_003_src0_channel),                                 //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),                           //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket)                              //          .endofpacket
	);

	nios_system_mm_interconnect_0_rsp_demux_002 rsp_demux_004 (
		.clk                (clk_0_clk_clk),                                              //       clk.clk
		.reset              (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_007_src_ready),                                       //      sink.ready
		.sink_channel       (router_007_src_channel),                                     //          .channel
		.sink_data          (router_007_src_data),                                        //          .data
		.sink_startofpacket (router_007_src_startofpacket),                               //          .startofpacket
		.sink_endofpacket   (router_007_src_endofpacket),                                 //          .endofpacket
		.sink_valid         (router_007_src_valid),                                       //          .valid
		.src0_ready         (rsp_demux_004_src0_ready),                                   //      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),                                   //          .valid
		.src0_data          (rsp_demux_004_src0_data),                                    //          .data
		.src0_channel       (rsp_demux_004_src0_channel),                                 //          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),                           //          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket)                              //          .endofpacket
	);

	nios_system_mm_interconnect_0_rsp_demux_002 rsp_demux_005 (
		.clk                (clk_0_clk_clk),                                              //       clk.clk
		.reset              (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_008_src_ready),                                       //      sink.ready
		.sink_channel       (router_008_src_channel),                                     //          .channel
		.sink_data          (router_008_src_data),                                        //          .data
		.sink_startofpacket (router_008_src_startofpacket),                               //          .startofpacket
		.sink_endofpacket   (router_008_src_endofpacket),                                 //          .endofpacket
		.sink_valid         (router_008_src_valid),                                       //          .valid
		.src0_ready         (rsp_demux_005_src0_ready),                                   //      src0.ready
		.src0_valid         (rsp_demux_005_src0_valid),                                   //          .valid
		.src0_data          (rsp_demux_005_src0_data),                                    //          .data
		.src0_channel       (rsp_demux_005_src0_channel),                                 //          .channel
		.src0_startofpacket (rsp_demux_005_src0_startofpacket),                           //          .startofpacket
		.src0_endofpacket   (rsp_demux_005_src0_endofpacket)                              //          .endofpacket
	);

	nios_system_mm_interconnect_0_rsp_demux_006 rsp_demux_006 (
		.clk                (clk_0_clk_clk),                                              //       clk.clk
		.reset              (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_009_src_ready),                                       //      sink.ready
		.sink_channel       (router_009_src_channel),                                     //          .channel
		.sink_data          (router_009_src_data),                                        //          .data
		.sink_startofpacket (router_009_src_startofpacket),                               //          .startofpacket
		.sink_endofpacket   (router_009_src_endofpacket),                                 //          .endofpacket
		.sink_valid         (router_009_src_valid),                                       //          .valid
		.src0_ready         (rsp_demux_006_src0_ready),                                   //      src0.ready
		.src0_valid         (rsp_demux_006_src0_valid),                                   //          .valid
		.src0_data          (rsp_demux_006_src0_data),                                    //          .data
		.src0_channel       (rsp_demux_006_src0_channel),                                 //          .channel
		.src0_startofpacket (rsp_demux_006_src0_startofpacket),                           //          .startofpacket
		.src0_endofpacket   (rsp_demux_006_src0_endofpacket),                             //          .endofpacket
		.src1_ready         (rsp_demux_006_src1_ready),                                   //      src1.ready
		.src1_valid         (rsp_demux_006_src1_valid),                                   //          .valid
		.src1_data          (rsp_demux_006_src1_data),                                    //          .data
		.src1_channel       (rsp_demux_006_src1_channel),                                 //          .channel
		.src1_startofpacket (rsp_demux_006_src1_startofpacket),                           //          .startofpacket
		.src1_endofpacket   (rsp_demux_006_src1_endofpacket)                              //          .endofpacket
	);

	nios_system_mm_interconnect_0_rsp_demux_006 rsp_demux_007 (
		.clk                (clk_0_clk_clk),                                              //       clk.clk
		.reset              (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_010_src_ready),                                       //      sink.ready
		.sink_channel       (router_010_src_channel),                                     //          .channel
		.sink_data          (router_010_src_data),                                        //          .data
		.sink_startofpacket (router_010_src_startofpacket),                               //          .startofpacket
		.sink_endofpacket   (router_010_src_endofpacket),                                 //          .endofpacket
		.sink_valid         (router_010_src_valid),                                       //          .valid
		.src0_ready         (rsp_demux_007_src0_ready),                                   //      src0.ready
		.src0_valid         (rsp_demux_007_src0_valid),                                   //          .valid
		.src0_data          (rsp_demux_007_src0_data),                                    //          .data
		.src0_channel       (rsp_demux_007_src0_channel),                                 //          .channel
		.src0_startofpacket (rsp_demux_007_src0_startofpacket),                           //          .startofpacket
		.src0_endofpacket   (rsp_demux_007_src0_endofpacket),                             //          .endofpacket
		.src1_ready         (rsp_demux_007_src1_ready),                                   //      src1.ready
		.src1_valid         (rsp_demux_007_src1_valid),                                   //          .valid
		.src1_data          (rsp_demux_007_src1_data),                                    //          .data
		.src1_channel       (rsp_demux_007_src1_channel),                                 //          .channel
		.src1_startofpacket (rsp_demux_007_src1_startofpacket),                           //          .startofpacket
		.src1_endofpacket   (rsp_demux_007_src1_endofpacket)                              //          .endofpacket
	);

	nios_system_mm_interconnect_0_rsp_demux_002 rsp_demux_008 (
		.clk                (clk_0_clk_clk),                                              //       clk.clk
		.reset              (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_011_src_ready),                                       //      sink.ready
		.sink_channel       (router_011_src_channel),                                     //          .channel
		.sink_data          (router_011_src_data),                                        //          .data
		.sink_startofpacket (router_011_src_startofpacket),                               //          .startofpacket
		.sink_endofpacket   (router_011_src_endofpacket),                                 //          .endofpacket
		.sink_valid         (router_011_src_valid),                                       //          .valid
		.src0_ready         (rsp_demux_008_src0_ready),                                   //      src0.ready
		.src0_valid         (rsp_demux_008_src0_valid),                                   //          .valid
		.src0_data          (rsp_demux_008_src0_data),                                    //          .data
		.src0_channel       (rsp_demux_008_src0_channel),                                 //          .channel
		.src0_startofpacket (rsp_demux_008_src0_startofpacket),                           //          .startofpacket
		.src0_endofpacket   (rsp_demux_008_src0_endofpacket)                              //          .endofpacket
	);

	nios_system_mm_interconnect_0_rsp_demux_002 rsp_demux_009 (
		.clk                (clk_0_clk_clk),                                              //       clk.clk
		.reset              (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_012_src_ready),                                       //      sink.ready
		.sink_channel       (router_012_src_channel),                                     //          .channel
		.sink_data          (router_012_src_data),                                        //          .data
		.sink_startofpacket (router_012_src_startofpacket),                               //          .startofpacket
		.sink_endofpacket   (router_012_src_endofpacket),                                 //          .endofpacket
		.sink_valid         (router_012_src_valid),                                       //          .valid
		.src0_ready         (rsp_demux_009_src0_ready),                                   //      src0.ready
		.src0_valid         (rsp_demux_009_src0_valid),                                   //          .valid
		.src0_data          (rsp_demux_009_src0_data),                                    //          .data
		.src0_channel       (rsp_demux_009_src0_channel),                                 //          .channel
		.src0_startofpacket (rsp_demux_009_src0_startofpacket),                           //          .startofpacket
		.src0_endofpacket   (rsp_demux_009_src0_endofpacket)                              //          .endofpacket
	);

	nios_system_mm_interconnect_0_rsp_demux_002 rsp_demux_010 (
		.clk                (clk_0_clk_clk),                                              //       clk.clk
		.reset              (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_013_src_ready),                                       //      sink.ready
		.sink_channel       (router_013_src_channel),                                     //          .channel
		.sink_data          (router_013_src_data),                                        //          .data
		.sink_startofpacket (router_013_src_startofpacket),                               //          .startofpacket
		.sink_endofpacket   (router_013_src_endofpacket),                                 //          .endofpacket
		.sink_valid         (router_013_src_valid),                                       //          .valid
		.src0_ready         (rsp_demux_010_src0_ready),                                   //      src0.ready
		.src0_valid         (rsp_demux_010_src0_valid),                                   //          .valid
		.src0_data          (rsp_demux_010_src0_data),                                    //          .data
		.src0_channel       (rsp_demux_010_src0_channel),                                 //          .channel
		.src0_startofpacket (rsp_demux_010_src0_startofpacket),                           //          .startofpacket
		.src0_endofpacket   (rsp_demux_010_src0_endofpacket)                              //          .endofpacket
	);

	nios_system_mm_interconnect_0_rsp_demux_001 rsp_demux_011 (
		.clk                (clk_0_clk_clk),                                              //       clk.clk
		.reset              (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_014_src_ready),                                       //      sink.ready
		.sink_channel       (router_014_src_channel),                                     //          .channel
		.sink_data          (router_014_src_data),                                        //          .data
		.sink_startofpacket (router_014_src_startofpacket),                               //          .startofpacket
		.sink_endofpacket   (router_014_src_endofpacket),                                 //          .endofpacket
		.sink_valid         (router_014_src_valid),                                       //          .valid
		.src0_ready         (rsp_demux_011_src0_ready),                                   //      src0.ready
		.src0_valid         (rsp_demux_011_src0_valid),                                   //          .valid
		.src0_data          (rsp_demux_011_src0_data),                                    //          .data
		.src0_channel       (rsp_demux_011_src0_channel),                                 //          .channel
		.src0_startofpacket (rsp_demux_011_src0_startofpacket),                           //          .startofpacket
		.src0_endofpacket   (rsp_demux_011_src0_endofpacket)                              //          .endofpacket
	);

	nios_system_mm_interconnect_0_rsp_mux rsp_mux (
		.clk                 (clk_0_clk_clk),                                              //       clk.clk
		.reset               (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                          //       src.ready
		.src_valid           (rsp_mux_src_valid),                                          //          .valid
		.src_data            (rsp_mux_src_data),                                           //          .data
		.src_channel         (rsp_mux_src_channel),                                        //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                                  //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                                    //          .endofpacket
		.sink0_ready         (rsp_demux_src0_ready),                                       //     sink0.ready
		.sink0_valid         (rsp_demux_src0_valid),                                       //          .valid
		.sink0_channel       (rsp_demux_src0_channel),                                     //          .channel
		.sink0_data          (rsp_demux_src0_data),                                        //          .data
		.sink0_startofpacket (rsp_demux_src0_startofpacket),                               //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src0_endofpacket)                                  //          .endofpacket
	);

	nios_system_mm_interconnect_0_rsp_mux_001 rsp_mux_001 (
		.clk                  (clk_0_clk_clk),                                                                                                              //       clk.clk
		.reset                (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset),                                                                 // clk_reset.reset
		.src_ready            (rsp_mux_001_src_ready),                                                                                                      //       src.ready
		.src_valid            (rsp_mux_001_src_valid),                                                                                                      //          .valid
		.src_data             (rsp_mux_001_src_data),                                                                                                       //          .data
		.src_channel          (rsp_mux_001_src_channel),                                                                                                    //          .channel
		.src_startofpacket    (rsp_mux_001_src_startofpacket),                                                                                              //          .startofpacket
		.src_endofpacket      (rsp_mux_001_src_endofpacket),                                                                                                //          .endofpacket
		.sink0_ready          (sram_0_avalon_sram_slave_to_nios2_qsys_0_data_master_rsp_width_adapter_src_ready),                                           //     sink0.ready
		.sink0_valid          (sram_0_avalon_sram_slave_to_nios2_qsys_0_data_master_rsp_width_adapter_src_valid),                                           //          .valid
		.sink0_channel        (sram_0_avalon_sram_slave_to_nios2_qsys_0_data_master_rsp_width_adapter_src_channel),                                         //          .channel
		.sink0_data           (sram_0_avalon_sram_slave_to_nios2_qsys_0_data_master_rsp_width_adapter_src_data),                                            //          .data
		.sink0_startofpacket  (sram_0_avalon_sram_slave_to_nios2_qsys_0_data_master_rsp_width_adapter_src_startofpacket),                                   //          .startofpacket
		.sink0_endofpacket    (sram_0_avalon_sram_slave_to_nios2_qsys_0_data_master_rsp_width_adapter_src_endofpacket),                                     //          .endofpacket
		.sink1_ready          (video_character_buffer_with_dma_0_avalon_char_buffer_slave_to_nios2_qsys_0_data_master_rsp_width_adapter_src_ready),         //     sink1.ready
		.sink1_valid          (video_character_buffer_with_dma_0_avalon_char_buffer_slave_to_nios2_qsys_0_data_master_rsp_width_adapter_src_valid),         //          .valid
		.sink1_channel        (video_character_buffer_with_dma_0_avalon_char_buffer_slave_to_nios2_qsys_0_data_master_rsp_width_adapter_src_channel),       //          .channel
		.sink1_data           (video_character_buffer_with_dma_0_avalon_char_buffer_slave_to_nios2_qsys_0_data_master_rsp_width_adapter_src_data),          //          .data
		.sink1_startofpacket  (video_character_buffer_with_dma_0_avalon_char_buffer_slave_to_nios2_qsys_0_data_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink1_endofpacket    (video_character_buffer_with_dma_0_avalon_char_buffer_slave_to_nios2_qsys_0_data_master_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink2_ready          (rsp_demux_002_src0_ready),                                                                                                   //     sink2.ready
		.sink2_valid          (rsp_demux_002_src0_valid),                                                                                                   //          .valid
		.sink2_channel        (rsp_demux_002_src0_channel),                                                                                                 //          .channel
		.sink2_data           (rsp_demux_002_src0_data),                                                                                                    //          .data
		.sink2_startofpacket  (rsp_demux_002_src0_startofpacket),                                                                                           //          .startofpacket
		.sink2_endofpacket    (rsp_demux_002_src0_endofpacket),                                                                                             //          .endofpacket
		.sink3_ready          (rsp_demux_003_src0_ready),                                                                                                   //     sink3.ready
		.sink3_valid          (rsp_demux_003_src0_valid),                                                                                                   //          .valid
		.sink3_channel        (rsp_demux_003_src0_channel),                                                                                                 //          .channel
		.sink3_data           (rsp_demux_003_src0_data),                                                                                                    //          .data
		.sink3_startofpacket  (rsp_demux_003_src0_startofpacket),                                                                                           //          .startofpacket
		.sink3_endofpacket    (rsp_demux_003_src0_endofpacket),                                                                                             //          .endofpacket
		.sink4_ready          (rsp_demux_004_src0_ready),                                                                                                   //     sink4.ready
		.sink4_valid          (rsp_demux_004_src0_valid),                                                                                                   //          .valid
		.sink4_channel        (rsp_demux_004_src0_channel),                                                                                                 //          .channel
		.sink4_data           (rsp_demux_004_src0_data),                                                                                                    //          .data
		.sink4_startofpacket  (rsp_demux_004_src0_startofpacket),                                                                                           //          .startofpacket
		.sink4_endofpacket    (rsp_demux_004_src0_endofpacket),                                                                                             //          .endofpacket
		.sink5_ready          (rsp_demux_005_src0_ready),                                                                                                   //     sink5.ready
		.sink5_valid          (rsp_demux_005_src0_valid),                                                                                                   //          .valid
		.sink5_channel        (rsp_demux_005_src0_channel),                                                                                                 //          .channel
		.sink5_data           (rsp_demux_005_src0_data),                                                                                                    //          .data
		.sink5_startofpacket  (rsp_demux_005_src0_startofpacket),                                                                                           //          .startofpacket
		.sink5_endofpacket    (rsp_demux_005_src0_endofpacket),                                                                                             //          .endofpacket
		.sink6_ready          (rsp_demux_006_src0_ready),                                                                                                   //     sink6.ready
		.sink6_valid          (rsp_demux_006_src0_valid),                                                                                                   //          .valid
		.sink6_channel        (rsp_demux_006_src0_channel),                                                                                                 //          .channel
		.sink6_data           (rsp_demux_006_src0_data),                                                                                                    //          .data
		.sink6_startofpacket  (rsp_demux_006_src0_startofpacket),                                                                                           //          .startofpacket
		.sink6_endofpacket    (rsp_demux_006_src0_endofpacket),                                                                                             //          .endofpacket
		.sink7_ready          (rsp_demux_007_src0_ready),                                                                                                   //     sink7.ready
		.sink7_valid          (rsp_demux_007_src0_valid),                                                                                                   //          .valid
		.sink7_channel        (rsp_demux_007_src0_channel),                                                                                                 //          .channel
		.sink7_data           (rsp_demux_007_src0_data),                                                                                                    //          .data
		.sink7_startofpacket  (rsp_demux_007_src0_startofpacket),                                                                                           //          .startofpacket
		.sink7_endofpacket    (rsp_demux_007_src0_endofpacket),                                                                                             //          .endofpacket
		.sink8_ready          (rsp_demux_008_src0_ready),                                                                                                   //     sink8.ready
		.sink8_valid          (rsp_demux_008_src0_valid),                                                                                                   //          .valid
		.sink8_channel        (rsp_demux_008_src0_channel),                                                                                                 //          .channel
		.sink8_data           (rsp_demux_008_src0_data),                                                                                                    //          .data
		.sink8_startofpacket  (rsp_demux_008_src0_startofpacket),                                                                                           //          .startofpacket
		.sink8_endofpacket    (rsp_demux_008_src0_endofpacket),                                                                                             //          .endofpacket
		.sink9_ready          (rsp_demux_009_src0_ready),                                                                                                   //     sink9.ready
		.sink9_valid          (rsp_demux_009_src0_valid),                                                                                                   //          .valid
		.sink9_channel        (rsp_demux_009_src0_channel),                                                                                                 //          .channel
		.sink9_data           (rsp_demux_009_src0_data),                                                                                                    //          .data
		.sink9_startofpacket  (rsp_demux_009_src0_startofpacket),                                                                                           //          .startofpacket
		.sink9_endofpacket    (rsp_demux_009_src0_endofpacket),                                                                                             //          .endofpacket
		.sink10_ready         (rsp_demux_010_src0_ready),                                                                                                   //    sink10.ready
		.sink10_valid         (rsp_demux_010_src0_valid),                                                                                                   //          .valid
		.sink10_channel       (rsp_demux_010_src0_channel),                                                                                                 //          .channel
		.sink10_data          (rsp_demux_010_src0_data),                                                                                                    //          .data
		.sink10_startofpacket (rsp_demux_010_src0_startofpacket),                                                                                           //          .startofpacket
		.sink10_endofpacket   (rsp_demux_010_src0_endofpacket),                                                                                             //          .endofpacket
		.sink11_ready         (generic_tristate_controller_0_uas_to_nios2_qsys_0_data_master_rsp_width_adapter_src_ready),                                  //    sink11.ready
		.sink11_valid         (generic_tristate_controller_0_uas_to_nios2_qsys_0_data_master_rsp_width_adapter_src_valid),                                  //          .valid
		.sink11_channel       (generic_tristate_controller_0_uas_to_nios2_qsys_0_data_master_rsp_width_adapter_src_channel),                                //          .channel
		.sink11_data          (generic_tristate_controller_0_uas_to_nios2_qsys_0_data_master_rsp_width_adapter_src_data),                                   //          .data
		.sink11_startofpacket (generic_tristate_controller_0_uas_to_nios2_qsys_0_data_master_rsp_width_adapter_src_startofpacket),                          //          .startofpacket
		.sink11_endofpacket   (generic_tristate_controller_0_uas_to_nios2_qsys_0_data_master_rsp_width_adapter_src_endofpacket)                             //          .endofpacket
	);

	nios_system_mm_interconnect_0_rsp_mux_002 rsp_mux_002 (
		.clk                 (clk_0_clk_clk),                                              //       clk.clk
		.reset               (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_002_src_ready),                                      //       src.ready
		.src_valid           (rsp_mux_002_src_valid),                                      //          .valid
		.src_data            (rsp_mux_002_src_data),                                       //          .data
		.src_channel         (rsp_mux_002_src_channel),                                    //          .channel
		.src_startofpacket   (rsp_mux_002_src_startofpacket),                              //          .startofpacket
		.src_endofpacket     (rsp_mux_002_src_endofpacket),                                //          .endofpacket
		.sink0_ready         (rsp_demux_006_src1_ready),                                   //     sink0.ready
		.sink0_valid         (rsp_demux_006_src1_valid),                                   //          .valid
		.sink0_channel       (rsp_demux_006_src1_channel),                                 //          .channel
		.sink0_data          (rsp_demux_006_src1_data),                                    //          .data
		.sink0_startofpacket (rsp_demux_006_src1_startofpacket),                           //          .startofpacket
		.sink0_endofpacket   (rsp_demux_006_src1_endofpacket),                             //          .endofpacket
		.sink1_ready         (rsp_demux_007_src1_ready),                                   //     sink1.ready
		.sink1_valid         (rsp_demux_007_src1_valid),                                   //          .valid
		.sink1_channel       (rsp_demux_007_src1_channel),                                 //          .channel
		.sink1_data          (rsp_demux_007_src1_data),                                    //          .data
		.sink1_startofpacket (rsp_demux_007_src1_startofpacket),                           //          .startofpacket
		.sink1_endofpacket   (rsp_demux_007_src1_endofpacket)                              //          .endofpacket
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (76),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (79),
		.IN_PKT_BURSTWRAP_L            (77),
		.IN_PKT_BURST_SIZE_H           (82),
		.IN_PKT_BURST_SIZE_L           (80),
		.IN_PKT_RESPONSE_STATUS_H      (106),
		.IN_PKT_RESPONSE_STATUS_L      (105),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (84),
		.IN_PKT_BURST_TYPE_L           (83),
		.IN_PKT_ORI_BURST_SIZE_L       (107),
		.IN_PKT_ORI_BURST_SIZE_H       (109),
		.IN_ST_DATA_W                  (110),
		.OUT_PKT_ADDR_H                (49),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (58),
		.OUT_PKT_BYTE_CNT_L            (56),
		.OUT_PKT_TRANS_COMPRESSED_READ (50),
		.OUT_PKT_BURST_SIZE_H          (64),
		.OUT_PKT_BURST_SIZE_L          (62),
		.OUT_PKT_RESPONSE_STATUS_H     (88),
		.OUT_PKT_RESPONSE_STATUS_L     (87),
		.OUT_PKT_TRANS_EXCLUSIVE       (55),
		.OUT_PKT_BURST_TYPE_H          (66),
		.OUT_PKT_BURST_TYPE_L          (65),
		.OUT_PKT_ORI_BURST_SIZE_L      (89),
		.OUT_PKT_ORI_BURST_SIZE_H      (91),
		.OUT_ST_DATA_W                 (92),
		.ST_CHANNEL_W                  (12),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) nios2_qsys_0_data_master_to_sram_0_avalon_sram_slave_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                                                            //       clk.clk
		.reset                (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset),                               // clk_reset.reset
		.in_valid             (cmd_demux_001_src0_valid),                                                                 //      sink.valid
		.in_channel           (cmd_demux_001_src0_channel),                                                               //          .channel
		.in_startofpacket     (cmd_demux_001_src0_startofpacket),                                                         //          .startofpacket
		.in_endofpacket       (cmd_demux_001_src0_endofpacket),                                                           //          .endofpacket
		.in_ready             (cmd_demux_001_src0_ready),                                                                 //          .ready
		.in_data              (cmd_demux_001_src0_data),                                                                  //          .data
		.out_endofpacket      (nios2_qsys_0_data_master_to_sram_0_avalon_sram_slave_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (nios2_qsys_0_data_master_to_sram_0_avalon_sram_slave_cmd_width_adapter_src_data),          //          .data
		.out_channel          (nios2_qsys_0_data_master_to_sram_0_avalon_sram_slave_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (nios2_qsys_0_data_master_to_sram_0_avalon_sram_slave_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (nios2_qsys_0_data_master_to_sram_0_avalon_sram_slave_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (nios2_qsys_0_data_master_to_sram_0_avalon_sram_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                                    // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (76),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (79),
		.IN_PKT_BURSTWRAP_L            (77),
		.IN_PKT_BURST_SIZE_H           (82),
		.IN_PKT_BURST_SIZE_L           (80),
		.IN_PKT_RESPONSE_STATUS_H      (106),
		.IN_PKT_RESPONSE_STATUS_L      (105),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (84),
		.IN_PKT_BURST_TYPE_L           (83),
		.IN_PKT_ORI_BURST_SIZE_L       (107),
		.IN_PKT_ORI_BURST_SIZE_H       (109),
		.IN_ST_DATA_W                  (110),
		.OUT_PKT_ADDR_H                (40),
		.OUT_PKT_ADDR_L                (9),
		.OUT_PKT_DATA_H                (7),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (8),
		.OUT_PKT_BYTEEN_L              (8),
		.OUT_PKT_BYTE_CNT_H            (49),
		.OUT_PKT_BYTE_CNT_L            (47),
		.OUT_PKT_TRANS_COMPRESSED_READ (41),
		.OUT_PKT_BURST_SIZE_H          (55),
		.OUT_PKT_BURST_SIZE_L          (53),
		.OUT_PKT_RESPONSE_STATUS_H     (79),
		.OUT_PKT_RESPONSE_STATUS_L     (78),
		.OUT_PKT_TRANS_EXCLUSIVE       (46),
		.OUT_PKT_BURST_TYPE_H          (57),
		.OUT_PKT_BURST_TYPE_L          (56),
		.OUT_PKT_ORI_BURST_SIZE_L      (80),
		.OUT_PKT_ORI_BURST_SIZE_H      (82),
		.OUT_ST_DATA_W                 (83),
		.ST_CHANNEL_W                  (12),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) nios2_qsys_0_data_master_to_video_character_buffer_with_dma_0_avalon_char_buffer_slave_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                                                                                              //       clk.clk
		.reset                (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset),                                                                 // clk_reset.reset
		.in_valid             (cmd_demux_001_src1_valid),                                                                                                   //      sink.valid
		.in_channel           (cmd_demux_001_src1_channel),                                                                                                 //          .channel
		.in_startofpacket     (cmd_demux_001_src1_startofpacket),                                                                                           //          .startofpacket
		.in_endofpacket       (cmd_demux_001_src1_endofpacket),                                                                                             //          .endofpacket
		.in_ready             (cmd_demux_001_src1_ready),                                                                                                   //          .ready
		.in_data              (cmd_demux_001_src1_data),                                                                                                    //          .data
		.out_endofpacket      (nios2_qsys_0_data_master_to_video_character_buffer_with_dma_0_avalon_char_buffer_slave_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (nios2_qsys_0_data_master_to_video_character_buffer_with_dma_0_avalon_char_buffer_slave_cmd_width_adapter_src_data),          //          .data
		.out_channel          (nios2_qsys_0_data_master_to_video_character_buffer_with_dma_0_avalon_char_buffer_slave_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (nios2_qsys_0_data_master_to_video_character_buffer_with_dma_0_avalon_char_buffer_slave_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (nios2_qsys_0_data_master_to_video_character_buffer_with_dma_0_avalon_char_buffer_slave_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (nios2_qsys_0_data_master_to_video_character_buffer_with_dma_0_avalon_char_buffer_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                                                                      // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (76),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (79),
		.IN_PKT_BURSTWRAP_L            (77),
		.IN_PKT_BURST_SIZE_H           (82),
		.IN_PKT_BURST_SIZE_L           (80),
		.IN_PKT_RESPONSE_STATUS_H      (106),
		.IN_PKT_RESPONSE_STATUS_L      (105),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (84),
		.IN_PKT_BURST_TYPE_L           (83),
		.IN_PKT_ORI_BURST_SIZE_L       (107),
		.IN_PKT_ORI_BURST_SIZE_H       (109),
		.IN_ST_DATA_W                  (110),
		.OUT_PKT_ADDR_H                (40),
		.OUT_PKT_ADDR_L                (9),
		.OUT_PKT_DATA_H                (7),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (8),
		.OUT_PKT_BYTEEN_L              (8),
		.OUT_PKT_BYTE_CNT_H            (49),
		.OUT_PKT_BYTE_CNT_L            (47),
		.OUT_PKT_TRANS_COMPRESSED_READ (41),
		.OUT_PKT_BURST_SIZE_H          (55),
		.OUT_PKT_BURST_SIZE_L          (53),
		.OUT_PKT_RESPONSE_STATUS_H     (79),
		.OUT_PKT_RESPONSE_STATUS_L     (78),
		.OUT_PKT_TRANS_EXCLUSIVE       (46),
		.OUT_PKT_BURST_TYPE_H          (57),
		.OUT_PKT_BURST_TYPE_L          (56),
		.OUT_PKT_ORI_BURST_SIZE_L      (80),
		.OUT_PKT_ORI_BURST_SIZE_H      (82),
		.OUT_ST_DATA_W                 (83),
		.ST_CHANNEL_W                  (12),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) nios2_qsys_0_data_master_to_generic_tristate_controller_0_uas_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                                                                     //       clk.clk
		.reset                (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset),                                        // clk_reset.reset
		.in_valid             (cmd_demux_001_src11_valid),                                                                         //      sink.valid
		.in_channel           (cmd_demux_001_src11_channel),                                                                       //          .channel
		.in_startofpacket     (cmd_demux_001_src11_startofpacket),                                                                 //          .startofpacket
		.in_endofpacket       (cmd_demux_001_src11_endofpacket),                                                                   //          .endofpacket
		.in_ready             (cmd_demux_001_src11_ready),                                                                         //          .ready
		.in_data              (cmd_demux_001_src11_data),                                                                          //          .data
		.out_endofpacket      (nios2_qsys_0_data_master_to_generic_tristate_controller_0_uas_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (nios2_qsys_0_data_master_to_generic_tristate_controller_0_uas_cmd_width_adapter_src_data),          //          .data
		.out_channel          (nios2_qsys_0_data_master_to_generic_tristate_controller_0_uas_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (nios2_qsys_0_data_master_to_generic_tristate_controller_0_uas_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (nios2_qsys_0_data_master_to_generic_tristate_controller_0_uas_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (nios2_qsys_0_data_master_to_generic_tristate_controller_0_uas_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                                             // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (49),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (58),
		.IN_PKT_BYTE_CNT_L             (56),
		.IN_PKT_TRANS_COMPRESSED_READ  (50),
		.IN_PKT_TRANS_WRITE            (52),
		.IN_PKT_BURSTWRAP_H            (61),
		.IN_PKT_BURSTWRAP_L            (59),
		.IN_PKT_BURST_SIZE_H           (64),
		.IN_PKT_BURST_SIZE_L           (62),
		.IN_PKT_RESPONSE_STATUS_H      (88),
		.IN_PKT_RESPONSE_STATUS_L      (87),
		.IN_PKT_TRANS_EXCLUSIVE        (55),
		.IN_PKT_BURST_TYPE_H           (66),
		.IN_PKT_BURST_TYPE_L           (65),
		.IN_PKT_ORI_BURST_SIZE_L       (89),
		.IN_PKT_ORI_BURST_SIZE_H       (91),
		.IN_ST_DATA_W                  (92),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (76),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (82),
		.OUT_PKT_BURST_SIZE_L          (80),
		.OUT_PKT_RESPONSE_STATUS_H     (106),
		.OUT_PKT_RESPONSE_STATUS_L     (105),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (84),
		.OUT_PKT_BURST_TYPE_L          (83),
		.OUT_PKT_ORI_BURST_SIZE_L      (107),
		.OUT_PKT_ORI_BURST_SIZE_H      (109),
		.OUT_ST_DATA_W                 (110),
		.ST_CHANNEL_W                  (12),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) sram_0_avalon_sram_slave_to_nios2_qsys_0_data_master_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                                                            //       clk.clk
		.reset                (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset),                               // clk_reset.reset
		.in_valid             (rsp_demux_src1_valid),                                                                     //      sink.valid
		.in_channel           (rsp_demux_src1_channel),                                                                   //          .channel
		.in_startofpacket     (rsp_demux_src1_startofpacket),                                                             //          .startofpacket
		.in_endofpacket       (rsp_demux_src1_endofpacket),                                                               //          .endofpacket
		.in_ready             (rsp_demux_src1_ready),                                                                     //          .ready
		.in_data              (rsp_demux_src1_data),                                                                      //          .data
		.out_endofpacket      (sram_0_avalon_sram_slave_to_nios2_qsys_0_data_master_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sram_0_avalon_sram_slave_to_nios2_qsys_0_data_master_rsp_width_adapter_src_data),          //          .data
		.out_channel          (sram_0_avalon_sram_slave_to_nios2_qsys_0_data_master_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (sram_0_avalon_sram_slave_to_nios2_qsys_0_data_master_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (sram_0_avalon_sram_slave_to_nios2_qsys_0_data_master_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sram_0_avalon_sram_slave_to_nios2_qsys_0_data_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                                    // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (40),
		.IN_PKT_ADDR_L                 (9),
		.IN_PKT_DATA_H                 (7),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (8),
		.IN_PKT_BYTEEN_L               (8),
		.IN_PKT_BYTE_CNT_H             (49),
		.IN_PKT_BYTE_CNT_L             (47),
		.IN_PKT_TRANS_COMPRESSED_READ  (41),
		.IN_PKT_TRANS_WRITE            (43),
		.IN_PKT_BURSTWRAP_H            (52),
		.IN_PKT_BURSTWRAP_L            (50),
		.IN_PKT_BURST_SIZE_H           (55),
		.IN_PKT_BURST_SIZE_L           (53),
		.IN_PKT_RESPONSE_STATUS_H      (79),
		.IN_PKT_RESPONSE_STATUS_L      (78),
		.IN_PKT_TRANS_EXCLUSIVE        (46),
		.IN_PKT_BURST_TYPE_H           (57),
		.IN_PKT_BURST_TYPE_L           (56),
		.IN_PKT_ORI_BURST_SIZE_L       (80),
		.IN_PKT_ORI_BURST_SIZE_H       (82),
		.IN_ST_DATA_W                  (83),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (76),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (82),
		.OUT_PKT_BURST_SIZE_L          (80),
		.OUT_PKT_RESPONSE_STATUS_H     (106),
		.OUT_PKT_RESPONSE_STATUS_L     (105),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (84),
		.OUT_PKT_BURST_TYPE_L          (83),
		.OUT_PKT_ORI_BURST_SIZE_L      (107),
		.OUT_PKT_ORI_BURST_SIZE_H      (109),
		.OUT_ST_DATA_W                 (110),
		.ST_CHANNEL_W                  (12),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) video_character_buffer_with_dma_0_avalon_char_buffer_slave_to_nios2_qsys_0_data_master_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                                                                                              //       clk.clk
		.reset                (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset),                                                                 // clk_reset.reset
		.in_valid             (rsp_demux_001_src0_valid),                                                                                                   //      sink.valid
		.in_channel           (rsp_demux_001_src0_channel),                                                                                                 //          .channel
		.in_startofpacket     (rsp_demux_001_src0_startofpacket),                                                                                           //          .startofpacket
		.in_endofpacket       (rsp_demux_001_src0_endofpacket),                                                                                             //          .endofpacket
		.in_ready             (rsp_demux_001_src0_ready),                                                                                                   //          .ready
		.in_data              (rsp_demux_001_src0_data),                                                                                                    //          .data
		.out_endofpacket      (video_character_buffer_with_dma_0_avalon_char_buffer_slave_to_nios2_qsys_0_data_master_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (video_character_buffer_with_dma_0_avalon_char_buffer_slave_to_nios2_qsys_0_data_master_rsp_width_adapter_src_data),          //          .data
		.out_channel          (video_character_buffer_with_dma_0_avalon_char_buffer_slave_to_nios2_qsys_0_data_master_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (video_character_buffer_with_dma_0_avalon_char_buffer_slave_to_nios2_qsys_0_data_master_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (video_character_buffer_with_dma_0_avalon_char_buffer_slave_to_nios2_qsys_0_data_master_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (video_character_buffer_with_dma_0_avalon_char_buffer_slave_to_nios2_qsys_0_data_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                                                                      // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (40),
		.IN_PKT_ADDR_L                 (9),
		.IN_PKT_DATA_H                 (7),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (8),
		.IN_PKT_BYTEEN_L               (8),
		.IN_PKT_BYTE_CNT_H             (49),
		.IN_PKT_BYTE_CNT_L             (47),
		.IN_PKT_TRANS_COMPRESSED_READ  (41),
		.IN_PKT_TRANS_WRITE            (43),
		.IN_PKT_BURSTWRAP_H            (52),
		.IN_PKT_BURSTWRAP_L            (50),
		.IN_PKT_BURST_SIZE_H           (55),
		.IN_PKT_BURST_SIZE_L           (53),
		.IN_PKT_RESPONSE_STATUS_H      (79),
		.IN_PKT_RESPONSE_STATUS_L      (78),
		.IN_PKT_TRANS_EXCLUSIVE        (46),
		.IN_PKT_BURST_TYPE_H           (57),
		.IN_PKT_BURST_TYPE_L           (56),
		.IN_PKT_ORI_BURST_SIZE_L       (80),
		.IN_PKT_ORI_BURST_SIZE_H       (82),
		.IN_ST_DATA_W                  (83),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (76),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (82),
		.OUT_PKT_BURST_SIZE_L          (80),
		.OUT_PKT_RESPONSE_STATUS_H     (106),
		.OUT_PKT_RESPONSE_STATUS_L     (105),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (84),
		.OUT_PKT_BURST_TYPE_L          (83),
		.OUT_PKT_ORI_BURST_SIZE_L      (107),
		.OUT_PKT_ORI_BURST_SIZE_H      (109),
		.OUT_ST_DATA_W                 (110),
		.ST_CHANNEL_W                  (12),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) generic_tristate_controller_0_uas_to_nios2_qsys_0_data_master_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                                                                     //       clk.clk
		.reset                (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset),                                        // clk_reset.reset
		.in_valid             (rsp_demux_011_src0_valid),                                                                          //      sink.valid
		.in_channel           (rsp_demux_011_src0_channel),                                                                        //          .channel
		.in_startofpacket     (rsp_demux_011_src0_startofpacket),                                                                  //          .startofpacket
		.in_endofpacket       (rsp_demux_011_src0_endofpacket),                                                                    //          .endofpacket
		.in_ready             (rsp_demux_011_src0_ready),                                                                          //          .ready
		.in_data              (rsp_demux_011_src0_data),                                                                           //          .data
		.out_endofpacket      (generic_tristate_controller_0_uas_to_nios2_qsys_0_data_master_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (generic_tristate_controller_0_uas_to_nios2_qsys_0_data_master_rsp_width_adapter_src_data),          //          .data
		.out_channel          (generic_tristate_controller_0_uas_to_nios2_qsys_0_data_master_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (generic_tristate_controller_0_uas_to_nios2_qsys_0_data_master_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (generic_tristate_controller_0_uas_to_nios2_qsys_0_data_master_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (generic_tristate_controller_0_uas_to_nios2_qsys_0_data_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                                             // (terminated)
	);

	nios_system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (18),
		.inUsePackets    (0),
		.inDataWidth     (18),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (18),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (clk_0_clk_clk),                                              // in_clk_0.clk
		.in_rst_0_reset (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (sram_0_avalon_sram_slave_agent_rdata_fifo_out_data),         //     in_0.data
		.in_0_valid     (sram_0_avalon_sram_slave_agent_rdata_fifo_out_valid),        //         .valid
		.in_0_ready     (sram_0_avalon_sram_slave_agent_rdata_fifo_out_ready),        //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                               //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                              //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                              //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                               //         .error
	);

	nios_system_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (10),
		.inUsePackets    (0),
		.inDataWidth     (10),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (10),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_clk_0_clk   (clk_0_clk_clk),                                                                         // in_clk_0.clk
		.in_rst_0_reset (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset),                            // in_rst_0.reset
		.in_0_data      (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (video_character_buffer_with_dma_0_avalon_char_buffer_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_001_out_0_data),                                                      //    out_0.data
		.out_0_valid    (avalon_st_adapter_001_out_0_valid),                                                     //         .valid
		.out_0_ready    (avalon_st_adapter_001_out_0_ready),                                                     //         .ready
		.out_0_error    (avalon_st_adapter_001_out_0_error)                                                      //         .error
	);

	nios_system_mm_interconnect_0_avalon_st_adapter_002 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_002 (
		.in_clk_0_clk   (clk_0_clk_clk),                                                                          // in_clk_0.clk
		.in_rst_0_reset (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset),                             // in_rst_0.reset
		.in_0_data      (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (video_character_buffer_with_dma_0_avalon_char_control_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_002_out_0_data),                                                       //    out_0.data
		.out_0_valid    (avalon_st_adapter_002_out_0_valid),                                                      //         .valid
		.out_0_ready    (avalon_st_adapter_002_out_0_ready),                                                      //         .ready
		.out_0_error    (avalon_st_adapter_002_out_0_error)                                                       //         .error
	);

	nios_system_mm_interconnect_0_avalon_st_adapter_002 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_003 (
		.in_clk_0_clk   (clk_0_clk_clk),                                                            // in_clk_0.clk
		.in_rst_0_reset (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset),               // in_rst_0.reset
		.in_0_data      (video_pixel_buffer_dma_0_avalon_control_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (video_pixel_buffer_dma_0_avalon_control_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (video_pixel_buffer_dma_0_avalon_control_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_003_out_0_data),                                         //    out_0.data
		.out_0_valid    (avalon_st_adapter_003_out_0_valid),                                        //         .valid
		.out_0_ready    (avalon_st_adapter_003_out_0_ready),                                        //         .ready
		.out_0_error    (avalon_st_adapter_003_out_0_error)                                         //         .error
	);

	nios_system_mm_interconnect_0_avalon_st_adapter_002 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_004 (
		.in_clk_0_clk   (clk_0_clk_clk),                                              // in_clk_0.clk
		.in_rst_0_reset (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_data),    //     in_0.data
		.in_0_valid     (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_valid),   //         .valid
		.in_0_ready     (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_ready),   //         .ready
		.out_0_data     (avalon_st_adapter_004_out_0_data),                           //    out_0.data
		.out_0_valid    (avalon_st_adapter_004_out_0_valid),                          //         .valid
		.out_0_ready    (avalon_st_adapter_004_out_0_ready),                          //         .ready
		.out_0_error    (avalon_st_adapter_004_out_0_error)                           //         .error
	);

	nios_system_mm_interconnect_0_avalon_st_adapter_002 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_005 (
		.in_clk_0_clk   (clk_0_clk_clk),                                                  // in_clk_0.clk
		.in_rst_0_reset (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset),     // in_rst_0.reset
		.in_0_data      (performance_counter_0_control_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (performance_counter_0_control_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (performance_counter_0_control_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_005_out_0_data),                               //    out_0.data
		.out_0_valid    (avalon_st_adapter_005_out_0_valid),                              //         .valid
		.out_0_ready    (avalon_st_adapter_005_out_0_ready),                              //         .ready
		.out_0_error    (avalon_st_adapter_005_out_0_error)                               //         .error
	);

	nios_system_mm_interconnect_0_avalon_st_adapter_002 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_006 (
		.in_clk_0_clk   (clk_0_clk_clk),                                              // in_clk_0.clk
		.in_rst_0_reset (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (nios2_qsys_0_jtag_debug_module_agent_rdata_fifo_src_data),   //     in_0.data
		.in_0_valid     (nios2_qsys_0_jtag_debug_module_agent_rdata_fifo_src_valid),  //         .valid
		.in_0_ready     (nios2_qsys_0_jtag_debug_module_agent_rdata_fifo_src_ready),  //         .ready
		.out_0_data     (avalon_st_adapter_006_out_0_data),                           //    out_0.data
		.out_0_valid    (avalon_st_adapter_006_out_0_valid),                          //         .valid
		.out_0_ready    (avalon_st_adapter_006_out_0_ready),                          //         .ready
		.out_0_error    (avalon_st_adapter_006_out_0_error)                           //         .error
	);

	nios_system_mm_interconnect_0_avalon_st_adapter_002 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_007 (
		.in_clk_0_clk   (clk_0_clk_clk),                                              // in_clk_0.clk
		.in_rst_0_reset (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (new_sdram_controller_0_s1_agent_rdata_fifo_src_data),        //     in_0.data
		.in_0_valid     (new_sdram_controller_0_s1_agent_rdata_fifo_src_valid),       //         .valid
		.in_0_ready     (new_sdram_controller_0_s1_agent_rdata_fifo_src_ready),       //         .ready
		.out_0_data     (avalon_st_adapter_007_out_0_data),                           //    out_0.data
		.out_0_valid    (avalon_st_adapter_007_out_0_valid),                          //         .valid
		.out_0_ready    (avalon_st_adapter_007_out_0_ready),                          //         .ready
		.out_0_error    (avalon_st_adapter_007_out_0_error)                           //         .error
	);

	nios_system_mm_interconnect_0_avalon_st_adapter_002 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_008 (
		.in_clk_0_clk   (clk_0_clk_clk),                                              // in_clk_0.clk
		.in_rst_0_reset (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (rleds_s1_agent_rdata_fifo_src_data),                         //     in_0.data
		.in_0_valid     (rleds_s1_agent_rdata_fifo_src_valid),                        //         .valid
		.in_0_ready     (rleds_s1_agent_rdata_fifo_src_ready),                        //         .ready
		.out_0_data     (avalon_st_adapter_008_out_0_data),                           //    out_0.data
		.out_0_valid    (avalon_st_adapter_008_out_0_valid),                          //         .valid
		.out_0_ready    (avalon_st_adapter_008_out_0_ready),                          //         .ready
		.out_0_error    (avalon_st_adapter_008_out_0_error)                           //         .error
	);

	nios_system_mm_interconnect_0_avalon_st_adapter_002 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_009 (
		.in_clk_0_clk   (clk_0_clk_clk),                                              // in_clk_0.clk
		.in_rst_0_reset (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (gleds_s1_agent_rdata_fifo_src_data),                         //     in_0.data
		.in_0_valid     (gleds_s1_agent_rdata_fifo_src_valid),                        //         .valid
		.in_0_ready     (gleds_s1_agent_rdata_fifo_src_ready),                        //         .ready
		.out_0_data     (avalon_st_adapter_009_out_0_data),                           //    out_0.data
		.out_0_valid    (avalon_st_adapter_009_out_0_valid),                          //         .valid
		.out_0_ready    (avalon_st_adapter_009_out_0_ready),                          //         .ready
		.out_0_error    (avalon_st_adapter_009_out_0_error)                           //         .error
	);

	nios_system_mm_interconnect_0_avalon_st_adapter_002 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_010 (
		.in_clk_0_clk   (clk_0_clk_clk),                                              // in_clk_0.clk
		.in_rst_0_reset (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (switches_s1_agent_rdata_fifo_src_data),                      //     in_0.data
		.in_0_valid     (switches_s1_agent_rdata_fifo_src_valid),                     //         .valid
		.in_0_ready     (switches_s1_agent_rdata_fifo_src_ready),                     //         .ready
		.out_0_data     (avalon_st_adapter_010_out_0_data),                           //    out_0.data
		.out_0_valid    (avalon_st_adapter_010_out_0_valid),                          //         .valid
		.out_0_ready    (avalon_st_adapter_010_out_0_ready),                          //         .ready
		.out_0_error    (avalon_st_adapter_010_out_0_error)                           //         .error
	);

	nios_system_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (10),
		.inUsePackets    (0),
		.inDataWidth     (10),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (10),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_011 (
		.in_clk_0_clk   (clk_0_clk_clk),                                                // in_clk_0.clk
		.in_rst_0_reset (video_pixel_buffer_dma_0_reset_reset_bridge_in_reset_reset),   // in_rst_0.reset
		.in_0_data      (generic_tristate_controller_0_uas_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (generic_tristate_controller_0_uas_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (generic_tristate_controller_0_uas_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_011_out_0_data),                             //    out_0.data
		.out_0_valid    (avalon_st_adapter_011_out_0_valid),                            //         .valid
		.out_0_ready    (avalon_st_adapter_011_out_0_ready),                            //         .ready
		.out_0_error    (avalon_st_adapter_011_out_0_error)                             //         .error
	);

endmodule
