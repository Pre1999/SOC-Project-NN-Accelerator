
demo_board_123.elf:     file format elf32-littlenios2
demo_board_123.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x080001c0

Program Header:
    LOAD off    0x00001000 vaddr 0x08000000 paddr 0x08000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x08000020 paddr 0x08000020 align 2**12
         filesz 0x00006850 memsz 0x00006850 flags r-x
    LOAD off    0x00007870 vaddr 0x08006870 paddr 0x08008330 align 2**12
         filesz 0x00001ac0 memsz 0x00001ac0 flags rw-
    LOAD off    0x00009df0 vaddr 0x08009df0 paddr 0x08009df0 align 2**12
         filesz 0x00000000 memsz 0x00000150 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08000000  08000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   000001a0  08000020  08000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00006620  080001c0  080001c0  000011c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000090  080067e0  080067e0  000077e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001ac0  08006870  08008330  00007870  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000150  08009df0  08009df0  00009df0  2**2
                  ALLOC, SMALL_DATA
  6 .new_sdram_controller_0 00000000  08009f40  08009f40  00009330  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00009330  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000a08  00000000  00000000  00009358  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00016ef7  00000000  00000000  00009d60  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00006029  00000000  00000000  00020c57  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00006dfa  00000000  00000000  00026c80  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  0000176c  00000000  00000000  0002da7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000025f2  00000000  00000000  0002f1e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00004ada  00000000  00000000  000317da  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  000362b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000668  00000000  00000000  000362c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00038ffa  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00038ffd  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00039009  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0003900a  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  0003900b  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  00039016  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  00039021  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000b  00000000  00000000  0003902c  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000022  00000000  00000000  00039037  2**0
                  CONTENTS, READONLY
 26 .jdi          0000426c  00000000  00000000  00039059  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     000550e8  00000000  00000000  0003d2c5  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08000000 l    d  .entry	00000000 .entry
08000020 l    d  .exceptions	00000000 .exceptions
080001c0 l    d  .text	00000000 .text
080067e0 l    d  .rodata	00000000 .rodata
08006870 l    d  .rwdata	00000000 .rwdata
08009df0 l    d  .bss	00000000 .bss
08009f40 l    d  .new_sdram_controller_0	00000000 .new_sdram_controller_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../demo_board_123_bsp//obj/HAL/src/crt0.o
080001f8 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
08000094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
080003f4 l     F .text	00000008 __fp_unlock
08000408 l     F .text	0000019c __sinit.part.1
080005a4 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
08006870 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_close.c
08003094 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
080031a8 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
080031d4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
080032c8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
080033b0 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0800349c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
08003678 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
08008320 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
080038ec l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
08003a28 l     F .text	00000034 alt_dev_reg
08007244 l     O .rwdata	00001060 jtag_uart_0
080082a4 l     O .rwdata	00000054 video_pixel_buffer_dma_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
08003edc l     F .text	0000020c altera_avalon_jtag_uart_irq
080040e8 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_pixel_buffer_dma.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
080057e4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
08005cd4 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
08005e34 l     F .text	0000003c alt_get_errno
08005e70 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
08002e64 g     F .text	00000054 _isatty_r
080035b4 g     F .text	0000007c alt_main
0800505c g     F .text	0000026c alt_up_pixel_buffer_dma_draw_vline
08000288 g     F .text	000000c0 _puts_r
08009e40 g     O .bss	00000100 alt_irq
08002b8c g     F .text	00000060 _lseek_r
08008330 g       *ABS*	00000000 __flash_rwdata_start
08009f40 g       *ABS*	00000000 __alt_heap_start
08002140 g     F .text	0000005c __sseek
08000754 g     F .text	00000010 __sinit
080005ac g     F .text	00000078 __sfmoreglue
08003654 g     F .text	00000024 __malloc_unlock
0800182c g     F .text	0000015c memmove
0800073c g     F .text	00000018 _cleanup
0800475c g     F .text	000001a8 alt_up_pixel_buffer_dma_draw
08004720 g     F .text	0000003c alt_up_pixel_buffer_dma_open_dev
08000000 g     F .entry	0000000c __reset
08000020 g       *ABS*	00000000 __flash_exceptions_start
08002e08 g     F .text	0000005c _fstat_r
08009dfc g     O .bss	00000004 errno
080020bc g     F .text	00000008 __seofread
08009e04 g     O .bss	00000004 alt_argv
080102f8 g       *ABS*	00000000 _gp
08004904 g     F .text	0000005c alt_up_pixel_buffer_dma_change_back_buffer_address
080070c4 g     O .rwdata	00000180 alt_fd_list
08005984 g     F .text	00000090 alt_find_dev
080016e4 g     F .text	00000148 memcpy
080003fc g     F .text	0000000c _cleanup_r
08005db8 g     F .text	0000007c alt_io_redirect
080067e0 g       *ABS*	00000000 __DTOR_END__
08000348 g     F .text	00000014 puts
080049c0 g     F .text	00000034 alt_up_pixel_buffer_dma_check_swap_buffers_status
080042e0 g     F .text	0000021c altera_avalon_jtag_uart_read
08002fb0 g     F .text	00000064 .hidden __udivsi3
08003304 g     F .text	000000ac isatty
08004e2c g     F .text	00000230 alt_up_pixel_buffer_dma_draw_hline
08009df8 g     O .bss	00000004 __malloc_top_pad
080007a4 g     F .text	000004c8 __sfvwrite_r
08002014 g     F .text	00000054 _sbrk_r
08005390 g     F .text	000000c0 helper_plot_pixel
08002da8 g     F .text	00000060 _read_r
08008318 g     O .rwdata	00000004 alt_max_fd
080023ac g     F .text	000000f0 _fclose_r
08002728 g     F .text	00000030 fflush
08009df4 g     O .bss	00000004 __malloc_max_sbrked_mem
080049f4 g     F .text	0000013c alt_up_pixel_buffer_dma_clear_screen
080034d8 g     F .text	000000dc lseek
080082f8 g     O .rwdata	00000004 _global_impure_ptr
08001ab0 g     F .text	00000564 _realloc_r
08009f40 g       *ABS*	00000000 __bss_end
08005be4 g     F .text	000000f0 alt_iic_isr_register
08004b30 g     F .text	000002fc alt_up_pixel_buffer_dma_draw_box
08006154 g     F .text	00000108 alt_tick
08000774 g     F .text	00000018 __fp_lock_all
08005b98 g     F .text	0000004c alt_ic_irq_enabled
080060b8 g     F .text	0000009c alt_alarm_stop
08009e0c g     O .bss	00000004 alt_irq_active
080000ec g     F .exceptions	000000d4 alt_irq_handler
0800709c g     O .rwdata	00000028 alt_dev_null
080057c4 g     F .text	00000020 alt_dcache_flush_all
080052c8 g     F .text	000000c8 alt_up_pixel_buffer_dma_draw_rectangle
08008330 g       *ABS*	00000000 __ram_rwdata_end
08008310 g     O .rwdata	00000008 alt_dev_list
08003928 g     F .text	00000100 write
08005450 g     F .text	00000248 alt_up_pixel_buffer_dma_draw_line
08006870 g       *ABS*	00000000 __ram_rodata_end
08003210 g     F .text	000000b8 fstat
08003014 g     F .text	00000058 .hidden __umodsi3
08009f40 g       *ABS*	00000000 end
08003e1c g     F .text	000000c0 altera_avalon_jtag_uart_init
080067e0 g       *ABS*	00000000 __CTOR_LIST__
10000000 g       *ABS*	00000000 __alt_stack_pointer
080044fc g     F .text	00000224 altera_avalon_jtag_uart_write
08000764 g     F .text	00000004 __sfp_lock_acquire
08001600 g     F .text	000000e4 memchr
0800287c g     F .text	00000310 _free_r
0800662c g     F .text	00000180 __call_exitprocs
08008300 g     O .rwdata	00000004 __malloc_sbrk_base
080001c0 g     F .text	0000003c _start
08009e10 g     O .bss	00000004 _alt_tick_rate
08009e14 g     O .bss	00000004 _alt_nticks
080036b4 g     F .text	00000104 read
08003a94 g     F .text	00000224 alt_sys_init
08006514 g     F .text	00000118 __register_exitproc
08004188 g     F .text	00000068 altera_avalon_jtag_uart_close
0800306c g     F .text	00000028 .hidden __mulsi3
08006870 g       *ABS*	00000000 __ram_rwdata_start
080067e0 g       *ABS*	00000000 __ram_rodata_start
08009e18 g     O .bss	00000028 __malloc_current_mallinfo
08003cb8 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
08006388 g     F .text	000000c4 alt_get_fd
08002358 g     F .text	00000054 _close_r
08006498 g     F .text	0000007c memcmp
08003d78 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
08009f40 g       *ABS*	00000000 __alt_stack_base
08003dc8 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
08002204 g     F .text	00000154 __swsetup_r
08000624 g     F .text	00000118 __sfp
08006c94 g     O .rwdata	00000408 __malloc_av_
08000770 g     F .text	00000004 __sinit_lock_release
08002068 g     F .text	00000054 __sread
08006280 g     F .text	00000108 alt_find_file
08005820 g     F .text	000000a4 alt_dev_llist_insert
08003630 g     F .text	00000024 __malloc_lock
0800383c g     F .text	000000b0 sbrk
080026cc g     F .text	0000005c _fflush_r
08009df0 g       *ABS*	00000000 __bss_start
08001988 g     F .text	00000128 memset
080001fc g     F .text	0000008c main
08009e08 g     O .bss	00000004 alt_envp
08009df0 g     O .bss	00000004 __malloc_max_total_mem
08004960 g     F .text	00000060 alt_up_pixel_buffer_dma_swap_buffers
08003d18 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0800219c g     F .text	00000008 __sclose
10000000 g       *ABS*	00000000 __alt_heap_limit
0800249c g     F .text	00000014 fclose
08000df4 g     F .text	0000080c _malloc_r
0800831c g     O .rwdata	00000004 alt_errno
08000c6c g     F .text	000000c4 _fwalk
08002eb8 g     F .text	00000084 .hidden __divsi3
08002758 g     F .text	00000124 _malloc_trim_r
080067e0 g       *ABS*	00000000 __CTOR_END__
080067e0 g       *ABS*	00000000 __flash_rodata_start
080067e0 g       *ABS*	00000000 __DTOR_LIST__
08003a5c g     F .text	00000038 alt_irq_init
080037b8 g     F .text	00000084 alt_release_fd
0800644c g     F .text	00000014 atexit
080021a4 g     F .text	00000060 _write_r
080082fc g     O .rwdata	00000004 _impure_ptr
08009e00 g     O .bss	00000004 alt_argc
080024b0 g     F .text	0000021c __sflush_r
08005924 g     F .text	00000060 _do_dtors
08000020 g       .exceptions	00000000 alt_irq_entry
0800078c g     F .text	00000018 __fp_unlock_all
08008308 g     O .rwdata	00000008 alt_fs_list
08000020 g       *ABS*	00000000 __ram_exceptions_start
08000000 g       *ABS*	00000000 __alt_mem_new_sdram_controller_0
08005a34 g     F .text	00000050 alt_ic_isr_register
08008330 g       *ABS*	00000000 _edata
08009f40 g       *ABS*	00000000 _end
080001c0 g       *ABS*	00000000 __ram_exceptions_end
080041f0 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
08005b0c g     F .text	0000008c alt_ic_irq_disable
080020c4 g     F .text	0000007c __swrite
08008304 g     O .rwdata	00000004 __malloc_trim_threshold
0800625c g     F .text	00000024 altera_nios2_qsys_irq_init
08006460 g     F .text	00000038 exit
08000d30 g     F .text	000000c4 _fwalk_reent
08002f3c g     F .text	00000074 .hidden __modsi3
10000000 g       *ABS*	00000000 __alt_data_end
08000020 g     F .exceptions	00000000 alt_exception
08000768 g     F .text	00000004 __sfp_lock_release
080067ac g     F .text	00000034 _exit
08005698 g     F .text	0000012c alt_alarm_start
08002bec g     F .text	000001bc __smakebuf_r
0800035c g     F .text	00000098 strlen
08005f5c g     F .text	0000015c open
08005a14 g     F .text	00000020 alt_icache_flush_all
08008324 g     O .rwdata	00000004 alt_priority_mask
08005a84 g     F .text	00000088 alt_ic_irq_enable
08008328 g     O .rwdata	00000008 alt_alarm_list
080058c4 g     F .text	00000060 _do_ctors
080030d0 g     F .text	000000d8 close
08003418 g     F .text	00000084 alt_load
0800076c g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

08000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8000000:	00420034 	movhi	at,2048
    ori r1, r1, %lo(_start)
 8000004:	08407014 	ori	at,at,448
    jmp r1
 8000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

08000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 8000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 8000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 8000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 800002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 8000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 8000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 8000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 800003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 8000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 8000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 8000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 800004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 8000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 8000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 8000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 800005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 8000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 8000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 8000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 800006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 8000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 8000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 8000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 800007c:	10000326 	beq	r2,zero,800008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 8000080:	20000226 	beq	r4,zero,800008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 8000084:	80000ec0 	call	80000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 8000088:	00000306 	br	8000098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 800008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 8000090:	e8bfff17 	ldw	r2,-4(ea)

08000094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 8000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 8000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 800009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 80000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 80000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 80000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 80000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 80000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 80000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 80000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 80000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 80000c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 80000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 80000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 80000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 80000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 80000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 80000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 80000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 80000e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 80000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 80000e8:	ef80083a 	eret

080000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 80000ec:	defff904 	addi	sp,sp,-28
 80000f0:	dfc00615 	stw	ra,24(sp)
 80000f4:	df000515 	stw	fp,20(sp)
 80000f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 80000fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 8000100:	0005313a 	rdctl	r2,ipending
 8000104:	e0bffe15 	stw	r2,-8(fp)

  return active;
 8000108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 800010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 8000110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 8000114:	00800044 	movi	r2,1
 8000118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 800011c:	e0fffb17 	ldw	r3,-20(fp)
 8000120:	e0bffc17 	ldw	r2,-16(fp)
 8000124:	1884703a 	and	r2,r3,r2
 8000128:	10001426 	beq	r2,zero,800017c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 800012c:	00820074 	movhi	r2,2049
 8000130:	10a79004 	addi	r2,r2,-25024
 8000134:	e0fffd17 	ldw	r3,-12(fp)
 8000138:	180690fa 	slli	r3,r3,3
 800013c:	10c5883a 	add	r2,r2,r3
 8000140:	10c00017 	ldw	r3,0(r2)
 8000144:	00820074 	movhi	r2,2049
 8000148:	10a79004 	addi	r2,r2,-25024
 800014c:	e13ffd17 	ldw	r4,-12(fp)
 8000150:	200890fa 	slli	r4,r4,3
 8000154:	1105883a 	add	r2,r2,r4
 8000158:	10800104 	addi	r2,r2,4
 800015c:	10800017 	ldw	r2,0(r2)
 8000160:	1009883a 	mov	r4,r2
 8000164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 8000168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 800016c:	0005313a 	rdctl	r2,ipending
 8000170:	e0bfff15 	stw	r2,-4(fp)

  return active;
 8000174:	e0bfff17 	ldw	r2,-4(fp)
 8000178:	00000706 	br	8000198 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 800017c:	e0bffc17 	ldw	r2,-16(fp)
 8000180:	1085883a 	add	r2,r2,r2
 8000184:	e0bffc15 	stw	r2,-16(fp)
      i++;
 8000188:	e0bffd17 	ldw	r2,-12(fp)
 800018c:	10800044 	addi	r2,r2,1
 8000190:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 8000194:	003fe106 	br	800011c <alt_irq_handler+0x30>

    active = alt_irq_pending ();
 8000198:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 800019c:	e0bffb17 	ldw	r2,-20(fp)
 80001a0:	103fdb1e 	bne	r2,zero,8000110 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 80001a4:	0001883a 	nop
}
 80001a8:	0001883a 	nop
 80001ac:	e037883a 	mov	sp,fp
 80001b0:	dfc00117 	ldw	ra,4(sp)
 80001b4:	df000017 	ldw	fp,0(sp)
 80001b8:	dec00204 	addi	sp,sp,8
 80001bc:	f800283a 	ret

Disassembly of section .text:

080001c0 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 80001c0:	06c40034 	movhi	sp,4096
    ori sp, sp, %lo(__alt_stack_pointer)
 80001c4:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 80001c8:	06820074 	movhi	gp,2049
    ori gp, gp, %lo(_gp)
 80001cc:	d680be14 	ori	gp,gp,760
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 80001d0:	00820034 	movhi	r2,2048
    ori r2, r2, %lo(__bss_start)
 80001d4:	10a77c14 	ori	r2,r2,40432

    movhi r3, %hi(__bss_end)
 80001d8:	00c20034 	movhi	r3,2048
    ori r3, r3, %lo(__bss_end)
 80001dc:	18e7d014 	ori	r3,r3,40768

    beq r2, r3, 1f
 80001e0:	10c00326 	beq	r2,r3,80001f0 <_start+0x30>

0:
    stw zero, (r2)
 80001e4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 80001e8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 80001ec:	10fffd36 	bltu	r2,r3,80001e4 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 80001f0:	80034180 	call	8003418 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 80001f4:	80035b40 	call	80035b4 <alt_main>

080001f8 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 80001f8:	003fff06 	br	80001f8 <alt_after_alt_main>

080001fc <main>:
#include <stdio.h>
#include "altera_up_avalon_video_pixel_buffer_dma.h"
int main()
{
 80001fc:	defff804 	addi	sp,sp,-32
 8000200:	dfc00715 	stw	ra,28(sp)
 8000204:	df000615 	stw	fp,24(sp)
 8000208:	df000604 	addi	fp,sp,24
int *LEDS = (int *)0x090201020;
 800020c:	00a40834 	movhi	r2,36896
 8000210:	10840804 	addi	r2,r2,4128
 8000214:	e0bffd15 	stw	r2,-12(fp)
volatile int *Switches = (int *)0x090201050;
 8000218:	00a40834 	movhi	r2,36896
 800021c:	10841404 	addi	r2,r2,4176
 8000220:	e0bffe15 	stw	r2,-8(fp)
alt_up_pixel_buffer_dma_dev *pb =
 8000224:	01020034 	movhi	r4,2048
 8000228:	2119f804 	addi	r4,r4,26592
 800022c:	80047200 	call	8004720 <alt_up_pixel_buffer_dma_open_dev>
 8000230:	e0bfff15 	stw	r2,-4(fp)
alt_up_pixel_buffer_dma_open_dev("/dev/video_pixel_buffer_dma_0");
alt_up_pixel_buffer_dma_clear_screen(pb, 0);
 8000234:	000b883a 	mov	r5,zero
 8000238:	e13fff17 	ldw	r4,-4(fp)
 800023c:	80049f40 	call	80049f4 <alt_up_pixel_buffer_dma_clear_screen>
alt_up_pixel_buffer_dma_draw_box (pb, 0, 0, 0xFF, 0xFF, 0x001F, 0);
 8000240:	d8000215 	stw	zero,8(sp)
 8000244:	008007c4 	movi	r2,31
 8000248:	d8800115 	stw	r2,4(sp)
 800024c:	00803fc4 	movi	r2,255
 8000250:	d8800015 	stw	r2,0(sp)
 8000254:	01c03fc4 	movi	r7,255
 8000258:	000d883a 	mov	r6,zero
 800025c:	000b883a 	mov	r5,zero
 8000260:	e13fff17 	ldw	r4,-4(fp)
 8000264:	8004b300 	call	8004b30 <alt_up_pixel_buffer_dma_draw_box>
printf("Hello from Nios II!\n");
 8000268:	01020034 	movhi	r4,2048
 800026c:	211a0004 	addi	r4,r4,26624
 8000270:	80003480 	call	8000348 <puts>
while (1){
*LEDS = *Switches;
 8000274:	e0bffe17 	ldw	r2,-8(fp)
 8000278:	10c00017 	ldw	r3,0(r2)
 800027c:	e0bffd17 	ldw	r2,-12(fp)
 8000280:	10c00015 	stw	r3,0(r2)
}
 8000284:	003ffb06 	br	8000274 <main+0x78>

08000288 <_puts_r>:
 8000288:	defff604 	addi	sp,sp,-40
 800028c:	dc000715 	stw	r16,28(sp)
 8000290:	2021883a 	mov	r16,r4
 8000294:	2809883a 	mov	r4,r5
 8000298:	dc400815 	stw	r17,32(sp)
 800029c:	dfc00915 	stw	ra,36(sp)
 80002a0:	2823883a 	mov	r17,r5
 80002a4:	800035c0 	call	800035c <strlen>
 80002a8:	10c00044 	addi	r3,r2,1
 80002ac:	d8800115 	stw	r2,4(sp)
 80002b0:	00820034 	movhi	r2,2048
 80002b4:	109a0504 	addi	r2,r2,26644
 80002b8:	d8800215 	stw	r2,8(sp)
 80002bc:	00800044 	movi	r2,1
 80002c0:	d8800315 	stw	r2,12(sp)
 80002c4:	00800084 	movi	r2,2
 80002c8:	dc400015 	stw	r17,0(sp)
 80002cc:	d8c00615 	stw	r3,24(sp)
 80002d0:	dec00415 	stw	sp,16(sp)
 80002d4:	d8800515 	stw	r2,20(sp)
 80002d8:	80000226 	beq	r16,zero,80002e4 <_puts_r+0x5c>
 80002dc:	80800e17 	ldw	r2,56(r16)
 80002e0:	10001426 	beq	r2,zero,8000334 <_puts_r+0xac>
 80002e4:	81400217 	ldw	r5,8(r16)
 80002e8:	2880030b 	ldhu	r2,12(r5)
 80002ec:	10c8000c 	andi	r3,r2,8192
 80002f0:	1800061e 	bne	r3,zero,800030c <_puts_r+0x84>
 80002f4:	29001917 	ldw	r4,100(r5)
 80002f8:	00f7ffc4 	movi	r3,-8193
 80002fc:	10880014 	ori	r2,r2,8192
 8000300:	20c6703a 	and	r3,r4,r3
 8000304:	2880030d 	sth	r2,12(r5)
 8000308:	28c01915 	stw	r3,100(r5)
 800030c:	d9800404 	addi	r6,sp,16
 8000310:	8009883a 	mov	r4,r16
 8000314:	80007a40 	call	80007a4 <__sfvwrite_r>
 8000318:	1000091e 	bne	r2,zero,8000340 <_puts_r+0xb8>
 800031c:	00800284 	movi	r2,10
 8000320:	dfc00917 	ldw	ra,36(sp)
 8000324:	dc400817 	ldw	r17,32(sp)
 8000328:	dc000717 	ldw	r16,28(sp)
 800032c:	dec00a04 	addi	sp,sp,40
 8000330:	f800283a 	ret
 8000334:	8009883a 	mov	r4,r16
 8000338:	80007540 	call	8000754 <__sinit>
 800033c:	003fe906 	br	80002e4 <_puts_r+0x5c>
 8000340:	00bfffc4 	movi	r2,-1
 8000344:	003ff606 	br	8000320 <_puts_r+0x98>

08000348 <puts>:
 8000348:	00820074 	movhi	r2,2049
 800034c:	10a0bf04 	addi	r2,r2,-32004
 8000350:	200b883a 	mov	r5,r4
 8000354:	11000017 	ldw	r4,0(r2)
 8000358:	80002881 	jmpi	8000288 <_puts_r>

0800035c <strlen>:
 800035c:	208000cc 	andi	r2,r4,3
 8000360:	10002026 	beq	r2,zero,80003e4 <strlen+0x88>
 8000364:	20800007 	ldb	r2,0(r4)
 8000368:	10002026 	beq	r2,zero,80003ec <strlen+0x90>
 800036c:	2005883a 	mov	r2,r4
 8000370:	00000206 	br	800037c <strlen+0x20>
 8000374:	10c00007 	ldb	r3,0(r2)
 8000378:	18001826 	beq	r3,zero,80003dc <strlen+0x80>
 800037c:	10800044 	addi	r2,r2,1
 8000380:	10c000cc 	andi	r3,r2,3
 8000384:	183ffb1e 	bne	r3,zero,8000374 <strlen+0x18>
 8000388:	10c00017 	ldw	r3,0(r2)
 800038c:	01ffbff4 	movhi	r7,65279
 8000390:	39ffbfc4 	addi	r7,r7,-257
 8000394:	00ca303a 	nor	r5,zero,r3
 8000398:	01a02074 	movhi	r6,32897
 800039c:	19c7883a 	add	r3,r3,r7
 80003a0:	31a02004 	addi	r6,r6,-32640
 80003a4:	1946703a 	and	r3,r3,r5
 80003a8:	1986703a 	and	r3,r3,r6
 80003ac:	1800091e 	bne	r3,zero,80003d4 <strlen+0x78>
 80003b0:	10800104 	addi	r2,r2,4
 80003b4:	10c00017 	ldw	r3,0(r2)
 80003b8:	19cb883a 	add	r5,r3,r7
 80003bc:	00c6303a 	nor	r3,zero,r3
 80003c0:	28c6703a 	and	r3,r5,r3
 80003c4:	1986703a 	and	r3,r3,r6
 80003c8:	183ff926 	beq	r3,zero,80003b0 <strlen+0x54>
 80003cc:	00000106 	br	80003d4 <strlen+0x78>
 80003d0:	10800044 	addi	r2,r2,1
 80003d4:	10c00007 	ldb	r3,0(r2)
 80003d8:	183ffd1e 	bne	r3,zero,80003d0 <strlen+0x74>
 80003dc:	1105c83a 	sub	r2,r2,r4
 80003e0:	f800283a 	ret
 80003e4:	2005883a 	mov	r2,r4
 80003e8:	003fe706 	br	8000388 <strlen+0x2c>
 80003ec:	0005883a 	mov	r2,zero
 80003f0:	f800283a 	ret

080003f4 <__fp_unlock>:
 80003f4:	0005883a 	mov	r2,zero
 80003f8:	f800283a 	ret

080003fc <_cleanup_r>:
 80003fc:	01420034 	movhi	r5,2048
 8000400:	2948eb04 	addi	r5,r5,9132
 8000404:	8000d301 	jmpi	8000d30 <_fwalk_reent>

08000408 <__sinit.part.1>:
 8000408:	defff704 	addi	sp,sp,-36
 800040c:	00c20034 	movhi	r3,2048
 8000410:	dfc00815 	stw	ra,32(sp)
 8000414:	ddc00715 	stw	r23,28(sp)
 8000418:	dd800615 	stw	r22,24(sp)
 800041c:	dd400515 	stw	r21,20(sp)
 8000420:	dd000415 	stw	r20,16(sp)
 8000424:	dcc00315 	stw	r19,12(sp)
 8000428:	dc800215 	stw	r18,8(sp)
 800042c:	dc400115 	stw	r17,4(sp)
 8000430:	dc000015 	stw	r16,0(sp)
 8000434:	18c0ff04 	addi	r3,r3,1020
 8000438:	24000117 	ldw	r16,4(r4)
 800043c:	20c00f15 	stw	r3,60(r4)
 8000440:	2080bb04 	addi	r2,r4,748
 8000444:	00c000c4 	movi	r3,3
 8000448:	20c0b915 	stw	r3,740(r4)
 800044c:	2080ba15 	stw	r2,744(r4)
 8000450:	2000b815 	stw	zero,736(r4)
 8000454:	05c00204 	movi	r23,8
 8000458:	00800104 	movi	r2,4
 800045c:	2025883a 	mov	r18,r4
 8000460:	b80d883a 	mov	r6,r23
 8000464:	81001704 	addi	r4,r16,92
 8000468:	000b883a 	mov	r5,zero
 800046c:	80000015 	stw	zero,0(r16)
 8000470:	80000115 	stw	zero,4(r16)
 8000474:	80000215 	stw	zero,8(r16)
 8000478:	8080030d 	sth	r2,12(r16)
 800047c:	80001915 	stw	zero,100(r16)
 8000480:	8000038d 	sth	zero,14(r16)
 8000484:	80000415 	stw	zero,16(r16)
 8000488:	80000515 	stw	zero,20(r16)
 800048c:	80000615 	stw	zero,24(r16)
 8000490:	80019880 	call	8001988 <memset>
 8000494:	05820034 	movhi	r22,2048
 8000498:	94400217 	ldw	r17,8(r18)
 800049c:	05420034 	movhi	r21,2048
 80004a0:	05020034 	movhi	r20,2048
 80004a4:	04c20034 	movhi	r19,2048
 80004a8:	b5881a04 	addi	r22,r22,8296
 80004ac:	ad483104 	addi	r21,r21,8388
 80004b0:	a5085004 	addi	r20,r20,8512
 80004b4:	9cc86704 	addi	r19,r19,8604
 80004b8:	85800815 	stw	r22,32(r16)
 80004bc:	85400915 	stw	r21,36(r16)
 80004c0:	85000a15 	stw	r20,40(r16)
 80004c4:	84c00b15 	stw	r19,44(r16)
 80004c8:	84000715 	stw	r16,28(r16)
 80004cc:	00800284 	movi	r2,10
 80004d0:	8880030d 	sth	r2,12(r17)
 80004d4:	00800044 	movi	r2,1
 80004d8:	b80d883a 	mov	r6,r23
 80004dc:	89001704 	addi	r4,r17,92
 80004e0:	000b883a 	mov	r5,zero
 80004e4:	88000015 	stw	zero,0(r17)
 80004e8:	88000115 	stw	zero,4(r17)
 80004ec:	88000215 	stw	zero,8(r17)
 80004f0:	88001915 	stw	zero,100(r17)
 80004f4:	8880038d 	sth	r2,14(r17)
 80004f8:	88000415 	stw	zero,16(r17)
 80004fc:	88000515 	stw	zero,20(r17)
 8000500:	88000615 	stw	zero,24(r17)
 8000504:	80019880 	call	8001988 <memset>
 8000508:	94000317 	ldw	r16,12(r18)
 800050c:	00800484 	movi	r2,18
 8000510:	8c400715 	stw	r17,28(r17)
 8000514:	8d800815 	stw	r22,32(r17)
 8000518:	8d400915 	stw	r21,36(r17)
 800051c:	8d000a15 	stw	r20,40(r17)
 8000520:	8cc00b15 	stw	r19,44(r17)
 8000524:	8080030d 	sth	r2,12(r16)
 8000528:	00800084 	movi	r2,2
 800052c:	80000015 	stw	zero,0(r16)
 8000530:	80000115 	stw	zero,4(r16)
 8000534:	80000215 	stw	zero,8(r16)
 8000538:	80001915 	stw	zero,100(r16)
 800053c:	8080038d 	sth	r2,14(r16)
 8000540:	80000415 	stw	zero,16(r16)
 8000544:	80000515 	stw	zero,20(r16)
 8000548:	80000615 	stw	zero,24(r16)
 800054c:	b80d883a 	mov	r6,r23
 8000550:	000b883a 	mov	r5,zero
 8000554:	81001704 	addi	r4,r16,92
 8000558:	80019880 	call	8001988 <memset>
 800055c:	00800044 	movi	r2,1
 8000560:	84000715 	stw	r16,28(r16)
 8000564:	85800815 	stw	r22,32(r16)
 8000568:	85400915 	stw	r21,36(r16)
 800056c:	85000a15 	stw	r20,40(r16)
 8000570:	84c00b15 	stw	r19,44(r16)
 8000574:	90800e15 	stw	r2,56(r18)
 8000578:	dfc00817 	ldw	ra,32(sp)
 800057c:	ddc00717 	ldw	r23,28(sp)
 8000580:	dd800617 	ldw	r22,24(sp)
 8000584:	dd400517 	ldw	r21,20(sp)
 8000588:	dd000417 	ldw	r20,16(sp)
 800058c:	dcc00317 	ldw	r19,12(sp)
 8000590:	dc800217 	ldw	r18,8(sp)
 8000594:	dc400117 	ldw	r17,4(sp)
 8000598:	dc000017 	ldw	r16,0(sp)
 800059c:	dec00904 	addi	sp,sp,36
 80005a0:	f800283a 	ret

080005a4 <__fp_lock>:
 80005a4:	0005883a 	mov	r2,zero
 80005a8:	f800283a 	ret

080005ac <__sfmoreglue>:
 80005ac:	defffc04 	addi	sp,sp,-16
 80005b0:	dc800215 	stw	r18,8(sp)
 80005b4:	2825883a 	mov	r18,r5
 80005b8:	dc000015 	stw	r16,0(sp)
 80005bc:	01401a04 	movi	r5,104
 80005c0:	2021883a 	mov	r16,r4
 80005c4:	913fffc4 	addi	r4,r18,-1
 80005c8:	dfc00315 	stw	ra,12(sp)
 80005cc:	dc400115 	stw	r17,4(sp)
 80005d0:	800306c0 	call	800306c <__mulsi3>
 80005d4:	8009883a 	mov	r4,r16
 80005d8:	11401d04 	addi	r5,r2,116
 80005dc:	1023883a 	mov	r17,r2
 80005e0:	8000df40 	call	8000df4 <_malloc_r>
 80005e4:	1021883a 	mov	r16,r2
 80005e8:	10000726 	beq	r2,zero,8000608 <__sfmoreglue+0x5c>
 80005ec:	11000304 	addi	r4,r2,12
 80005f0:	10000015 	stw	zero,0(r2)
 80005f4:	14800115 	stw	r18,4(r2)
 80005f8:	11000215 	stw	r4,8(r2)
 80005fc:	89801a04 	addi	r6,r17,104
 8000600:	000b883a 	mov	r5,zero
 8000604:	80019880 	call	8001988 <memset>
 8000608:	8005883a 	mov	r2,r16
 800060c:	dfc00317 	ldw	ra,12(sp)
 8000610:	dc800217 	ldw	r18,8(sp)
 8000614:	dc400117 	ldw	r17,4(sp)
 8000618:	dc000017 	ldw	r16,0(sp)
 800061c:	dec00404 	addi	sp,sp,16
 8000620:	f800283a 	ret

08000624 <__sfp>:
 8000624:	defffb04 	addi	sp,sp,-20
 8000628:	dc000015 	stw	r16,0(sp)
 800062c:	04020074 	movhi	r16,2049
 8000630:	8420be04 	addi	r16,r16,-32008
 8000634:	dcc00315 	stw	r19,12(sp)
 8000638:	2027883a 	mov	r19,r4
 800063c:	81000017 	ldw	r4,0(r16)
 8000640:	dfc00415 	stw	ra,16(sp)
 8000644:	dc800215 	stw	r18,8(sp)
 8000648:	20800e17 	ldw	r2,56(r4)
 800064c:	dc400115 	stw	r17,4(sp)
 8000650:	1000021e 	bne	r2,zero,800065c <__sfp+0x38>
 8000654:	80004080 	call	8000408 <__sinit.part.1>
 8000658:	81000017 	ldw	r4,0(r16)
 800065c:	2480b804 	addi	r18,r4,736
 8000660:	047fffc4 	movi	r17,-1
 8000664:	91000117 	ldw	r4,4(r18)
 8000668:	94000217 	ldw	r16,8(r18)
 800066c:	213fffc4 	addi	r4,r4,-1
 8000670:	20000a16 	blt	r4,zero,800069c <__sfp+0x78>
 8000674:	8080030f 	ldh	r2,12(r16)
 8000678:	10000c26 	beq	r2,zero,80006ac <__sfp+0x88>
 800067c:	80c01d04 	addi	r3,r16,116
 8000680:	00000206 	br	800068c <__sfp+0x68>
 8000684:	18bfe60f 	ldh	r2,-104(r3)
 8000688:	10000826 	beq	r2,zero,80006ac <__sfp+0x88>
 800068c:	213fffc4 	addi	r4,r4,-1
 8000690:	1c3ffd04 	addi	r16,r3,-12
 8000694:	18c01a04 	addi	r3,r3,104
 8000698:	247ffa1e 	bne	r4,r17,8000684 <__sfp+0x60>
 800069c:	90800017 	ldw	r2,0(r18)
 80006a0:	10001d26 	beq	r2,zero,8000718 <__sfp+0xf4>
 80006a4:	1025883a 	mov	r18,r2
 80006a8:	003fee06 	br	8000664 <__sfp+0x40>
 80006ac:	00bfffc4 	movi	r2,-1
 80006b0:	8080038d 	sth	r2,14(r16)
 80006b4:	00800044 	movi	r2,1
 80006b8:	8080030d 	sth	r2,12(r16)
 80006bc:	80001915 	stw	zero,100(r16)
 80006c0:	80000015 	stw	zero,0(r16)
 80006c4:	80000215 	stw	zero,8(r16)
 80006c8:	80000115 	stw	zero,4(r16)
 80006cc:	80000415 	stw	zero,16(r16)
 80006d0:	80000515 	stw	zero,20(r16)
 80006d4:	80000615 	stw	zero,24(r16)
 80006d8:	01800204 	movi	r6,8
 80006dc:	000b883a 	mov	r5,zero
 80006e0:	81001704 	addi	r4,r16,92
 80006e4:	80019880 	call	8001988 <memset>
 80006e8:	8005883a 	mov	r2,r16
 80006ec:	80000c15 	stw	zero,48(r16)
 80006f0:	80000d15 	stw	zero,52(r16)
 80006f4:	80001115 	stw	zero,68(r16)
 80006f8:	80001215 	stw	zero,72(r16)
 80006fc:	dfc00417 	ldw	ra,16(sp)
 8000700:	dcc00317 	ldw	r19,12(sp)
 8000704:	dc800217 	ldw	r18,8(sp)
 8000708:	dc400117 	ldw	r17,4(sp)
 800070c:	dc000017 	ldw	r16,0(sp)
 8000710:	dec00504 	addi	sp,sp,20
 8000714:	f800283a 	ret
 8000718:	01400104 	movi	r5,4
 800071c:	9809883a 	mov	r4,r19
 8000720:	80005ac0 	call	80005ac <__sfmoreglue>
 8000724:	90800015 	stw	r2,0(r18)
 8000728:	103fde1e 	bne	r2,zero,80006a4 <__sfp+0x80>
 800072c:	00800304 	movi	r2,12
 8000730:	98800015 	stw	r2,0(r19)
 8000734:	0005883a 	mov	r2,zero
 8000738:	003ff006 	br	80006fc <__sfp+0xd8>

0800073c <_cleanup>:
 800073c:	00820074 	movhi	r2,2049
 8000740:	10a0be04 	addi	r2,r2,-32008
 8000744:	11000017 	ldw	r4,0(r2)
 8000748:	01420034 	movhi	r5,2048
 800074c:	2948eb04 	addi	r5,r5,9132
 8000750:	8000d301 	jmpi	8000d30 <_fwalk_reent>

08000754 <__sinit>:
 8000754:	20800e17 	ldw	r2,56(r4)
 8000758:	10000126 	beq	r2,zero,8000760 <__sinit+0xc>
 800075c:	f800283a 	ret
 8000760:	80004081 	jmpi	8000408 <__sinit.part.1>

08000764 <__sfp_lock_acquire>:
 8000764:	f800283a 	ret

08000768 <__sfp_lock_release>:
 8000768:	f800283a 	ret

0800076c <__sinit_lock_acquire>:
 800076c:	f800283a 	ret

08000770 <__sinit_lock_release>:
 8000770:	f800283a 	ret

08000774 <__fp_lock_all>:
 8000774:	00820074 	movhi	r2,2049
 8000778:	10a0bf04 	addi	r2,r2,-32004
 800077c:	11000017 	ldw	r4,0(r2)
 8000780:	01420034 	movhi	r5,2048
 8000784:	29416904 	addi	r5,r5,1444
 8000788:	8000c6c1 	jmpi	8000c6c <_fwalk>

0800078c <__fp_unlock_all>:
 800078c:	00820074 	movhi	r2,2049
 8000790:	10a0bf04 	addi	r2,r2,-32004
 8000794:	11000017 	ldw	r4,0(r2)
 8000798:	01420034 	movhi	r5,2048
 800079c:	2940fd04 	addi	r5,r5,1012
 80007a0:	8000c6c1 	jmpi	8000c6c <_fwalk>

080007a4 <__sfvwrite_r>:
 80007a4:	30800217 	ldw	r2,8(r6)
 80007a8:	10006726 	beq	r2,zero,8000948 <__sfvwrite_r+0x1a4>
 80007ac:	28c0030b 	ldhu	r3,12(r5)
 80007b0:	defff404 	addi	sp,sp,-48
 80007b4:	dd400715 	stw	r21,28(sp)
 80007b8:	dd000615 	stw	r20,24(sp)
 80007bc:	dc000215 	stw	r16,8(sp)
 80007c0:	dfc00b15 	stw	ra,44(sp)
 80007c4:	df000a15 	stw	fp,40(sp)
 80007c8:	ddc00915 	stw	r23,36(sp)
 80007cc:	dd800815 	stw	r22,32(sp)
 80007d0:	dcc00515 	stw	r19,20(sp)
 80007d4:	dc800415 	stw	r18,16(sp)
 80007d8:	dc400315 	stw	r17,12(sp)
 80007dc:	1880020c 	andi	r2,r3,8
 80007e0:	2821883a 	mov	r16,r5
 80007e4:	202b883a 	mov	r21,r4
 80007e8:	3029883a 	mov	r20,r6
 80007ec:	10002726 	beq	r2,zero,800088c <__sfvwrite_r+0xe8>
 80007f0:	28800417 	ldw	r2,16(r5)
 80007f4:	10002526 	beq	r2,zero,800088c <__sfvwrite_r+0xe8>
 80007f8:	1880008c 	andi	r2,r3,2
 80007fc:	a4400017 	ldw	r17,0(r20)
 8000800:	10002a26 	beq	r2,zero,80008ac <__sfvwrite_r+0x108>
 8000804:	05a00034 	movhi	r22,32768
 8000808:	0027883a 	mov	r19,zero
 800080c:	0025883a 	mov	r18,zero
 8000810:	b5bf0004 	addi	r22,r22,-1024
 8000814:	980d883a 	mov	r6,r19
 8000818:	a809883a 	mov	r4,r21
 800081c:	90004626 	beq	r18,zero,8000938 <__sfvwrite_r+0x194>
 8000820:	900f883a 	mov	r7,r18
 8000824:	b480022e 	bgeu	r22,r18,8000830 <__sfvwrite_r+0x8c>
 8000828:	01e00034 	movhi	r7,32768
 800082c:	39ff0004 	addi	r7,r7,-1024
 8000830:	80800917 	ldw	r2,36(r16)
 8000834:	81400717 	ldw	r5,28(r16)
 8000838:	103ee83a 	callr	r2
 800083c:	00805a0e 	bge	zero,r2,80009a8 <__sfvwrite_r+0x204>
 8000840:	a0c00217 	ldw	r3,8(r20)
 8000844:	98a7883a 	add	r19,r19,r2
 8000848:	90a5c83a 	sub	r18,r18,r2
 800084c:	1885c83a 	sub	r2,r3,r2
 8000850:	a0800215 	stw	r2,8(r20)
 8000854:	103fef1e 	bne	r2,zero,8000814 <__sfvwrite_r+0x70>
 8000858:	0005883a 	mov	r2,zero
 800085c:	dfc00b17 	ldw	ra,44(sp)
 8000860:	df000a17 	ldw	fp,40(sp)
 8000864:	ddc00917 	ldw	r23,36(sp)
 8000868:	dd800817 	ldw	r22,32(sp)
 800086c:	dd400717 	ldw	r21,28(sp)
 8000870:	dd000617 	ldw	r20,24(sp)
 8000874:	dcc00517 	ldw	r19,20(sp)
 8000878:	dc800417 	ldw	r18,16(sp)
 800087c:	dc400317 	ldw	r17,12(sp)
 8000880:	dc000217 	ldw	r16,8(sp)
 8000884:	dec00c04 	addi	sp,sp,48
 8000888:	f800283a 	ret
 800088c:	800b883a 	mov	r5,r16
 8000890:	a809883a 	mov	r4,r21
 8000894:	80022040 	call	8002204 <__swsetup_r>
 8000898:	1000ee1e 	bne	r2,zero,8000c54 <__sfvwrite_r+0x4b0>
 800089c:	80c0030b 	ldhu	r3,12(r16)
 80008a0:	a4400017 	ldw	r17,0(r20)
 80008a4:	1880008c 	andi	r2,r3,2
 80008a8:	103fd61e 	bne	r2,zero,8000804 <__sfvwrite_r+0x60>
 80008ac:	1880004c 	andi	r2,r3,1
 80008b0:	1000421e 	bne	r2,zero,80009bc <__sfvwrite_r+0x218>
 80008b4:	0039883a 	mov	fp,zero
 80008b8:	0025883a 	mov	r18,zero
 80008bc:	90001a26 	beq	r18,zero,8000928 <__sfvwrite_r+0x184>
 80008c0:	1880800c 	andi	r2,r3,512
 80008c4:	84c00217 	ldw	r19,8(r16)
 80008c8:	10002126 	beq	r2,zero,8000950 <__sfvwrite_r+0x1ac>
 80008cc:	982f883a 	mov	r23,r19
 80008d0:	94c09636 	bltu	r18,r19,8000b2c <__sfvwrite_r+0x388>
 80008d4:	1881200c 	andi	r2,r3,1152
 80008d8:	1000a11e 	bne	r2,zero,8000b60 <__sfvwrite_r+0x3bc>
 80008dc:	81000017 	ldw	r4,0(r16)
 80008e0:	b80d883a 	mov	r6,r23
 80008e4:	e00b883a 	mov	r5,fp
 80008e8:	800182c0 	call	800182c <memmove>
 80008ec:	80c00217 	ldw	r3,8(r16)
 80008f0:	81000017 	ldw	r4,0(r16)
 80008f4:	9005883a 	mov	r2,r18
 80008f8:	1ce7c83a 	sub	r19,r3,r19
 80008fc:	25cf883a 	add	r7,r4,r23
 8000900:	84c00215 	stw	r19,8(r16)
 8000904:	81c00015 	stw	r7,0(r16)
 8000908:	a0c00217 	ldw	r3,8(r20)
 800090c:	e0b9883a 	add	fp,fp,r2
 8000910:	90a5c83a 	sub	r18,r18,r2
 8000914:	18a7c83a 	sub	r19,r3,r2
 8000918:	a4c00215 	stw	r19,8(r20)
 800091c:	983fce26 	beq	r19,zero,8000858 <__sfvwrite_r+0xb4>
 8000920:	80c0030b 	ldhu	r3,12(r16)
 8000924:	903fe61e 	bne	r18,zero,80008c0 <__sfvwrite_r+0x11c>
 8000928:	8f000017 	ldw	fp,0(r17)
 800092c:	8c800117 	ldw	r18,4(r17)
 8000930:	8c400204 	addi	r17,r17,8
 8000934:	003fe106 	br	80008bc <__sfvwrite_r+0x118>
 8000938:	8cc00017 	ldw	r19,0(r17)
 800093c:	8c800117 	ldw	r18,4(r17)
 8000940:	8c400204 	addi	r17,r17,8
 8000944:	003fb306 	br	8000814 <__sfvwrite_r+0x70>
 8000948:	0005883a 	mov	r2,zero
 800094c:	f800283a 	ret
 8000950:	81000017 	ldw	r4,0(r16)
 8000954:	80800417 	ldw	r2,16(r16)
 8000958:	11005a36 	bltu	r2,r4,8000ac4 <__sfvwrite_r+0x320>
 800095c:	85c00517 	ldw	r23,20(r16)
 8000960:	95c05836 	bltu	r18,r23,8000ac4 <__sfvwrite_r+0x320>
 8000964:	00a00034 	movhi	r2,32768
 8000968:	10bfffc4 	addi	r2,r2,-1
 800096c:	9009883a 	mov	r4,r18
 8000970:	1480012e 	bgeu	r2,r18,8000978 <__sfvwrite_r+0x1d4>
 8000974:	1009883a 	mov	r4,r2
 8000978:	b80b883a 	mov	r5,r23
 800097c:	8002eb80 	call	8002eb8 <__divsi3>
 8000980:	b80b883a 	mov	r5,r23
 8000984:	1009883a 	mov	r4,r2
 8000988:	800306c0 	call	800306c <__mulsi3>
 800098c:	81400717 	ldw	r5,28(r16)
 8000990:	80c00917 	ldw	r3,36(r16)
 8000994:	100f883a 	mov	r7,r2
 8000998:	e00d883a 	mov	r6,fp
 800099c:	a809883a 	mov	r4,r21
 80009a0:	183ee83a 	callr	r3
 80009a4:	00bfd816 	blt	zero,r2,8000908 <__sfvwrite_r+0x164>
 80009a8:	8080030b 	ldhu	r2,12(r16)
 80009ac:	10801014 	ori	r2,r2,64
 80009b0:	8080030d 	sth	r2,12(r16)
 80009b4:	00bfffc4 	movi	r2,-1
 80009b8:	003fa806 	br	800085c <__sfvwrite_r+0xb8>
 80009bc:	0027883a 	mov	r19,zero
 80009c0:	0011883a 	mov	r8,zero
 80009c4:	0039883a 	mov	fp,zero
 80009c8:	0025883a 	mov	r18,zero
 80009cc:	90001f26 	beq	r18,zero,8000a4c <__sfvwrite_r+0x2a8>
 80009d0:	40005a26 	beq	r8,zero,8000b3c <__sfvwrite_r+0x398>
 80009d4:	982d883a 	mov	r22,r19
 80009d8:	94c0012e 	bgeu	r18,r19,80009e0 <__sfvwrite_r+0x23c>
 80009dc:	902d883a 	mov	r22,r18
 80009e0:	81000017 	ldw	r4,0(r16)
 80009e4:	80800417 	ldw	r2,16(r16)
 80009e8:	b02f883a 	mov	r23,r22
 80009ec:	81c00517 	ldw	r7,20(r16)
 80009f0:	1100032e 	bgeu	r2,r4,8000a00 <__sfvwrite_r+0x25c>
 80009f4:	80c00217 	ldw	r3,8(r16)
 80009f8:	38c7883a 	add	r3,r7,r3
 80009fc:	1d801816 	blt	r3,r22,8000a60 <__sfvwrite_r+0x2bc>
 8000a00:	b1c03e16 	blt	r22,r7,8000afc <__sfvwrite_r+0x358>
 8000a04:	80800917 	ldw	r2,36(r16)
 8000a08:	81400717 	ldw	r5,28(r16)
 8000a0c:	e00d883a 	mov	r6,fp
 8000a10:	da000115 	stw	r8,4(sp)
 8000a14:	a809883a 	mov	r4,r21
 8000a18:	103ee83a 	callr	r2
 8000a1c:	102f883a 	mov	r23,r2
 8000a20:	da000117 	ldw	r8,4(sp)
 8000a24:	00bfe00e 	bge	zero,r2,80009a8 <__sfvwrite_r+0x204>
 8000a28:	9de7c83a 	sub	r19,r19,r23
 8000a2c:	98001f26 	beq	r19,zero,8000aac <__sfvwrite_r+0x308>
 8000a30:	a0800217 	ldw	r2,8(r20)
 8000a34:	e5f9883a 	add	fp,fp,r23
 8000a38:	95e5c83a 	sub	r18,r18,r23
 8000a3c:	15efc83a 	sub	r23,r2,r23
 8000a40:	a5c00215 	stw	r23,8(r20)
 8000a44:	b83f8426 	beq	r23,zero,8000858 <__sfvwrite_r+0xb4>
 8000a48:	903fe11e 	bne	r18,zero,80009d0 <__sfvwrite_r+0x22c>
 8000a4c:	8f000017 	ldw	fp,0(r17)
 8000a50:	8c800117 	ldw	r18,4(r17)
 8000a54:	0011883a 	mov	r8,zero
 8000a58:	8c400204 	addi	r17,r17,8
 8000a5c:	003fdb06 	br	80009cc <__sfvwrite_r+0x228>
 8000a60:	180d883a 	mov	r6,r3
 8000a64:	e00b883a 	mov	r5,fp
 8000a68:	da000115 	stw	r8,4(sp)
 8000a6c:	d8c00015 	stw	r3,0(sp)
 8000a70:	800182c0 	call	800182c <memmove>
 8000a74:	d8c00017 	ldw	r3,0(sp)
 8000a78:	80800017 	ldw	r2,0(r16)
 8000a7c:	800b883a 	mov	r5,r16
 8000a80:	a809883a 	mov	r4,r21
 8000a84:	10c5883a 	add	r2,r2,r3
 8000a88:	80800015 	stw	r2,0(r16)
 8000a8c:	d8c00015 	stw	r3,0(sp)
 8000a90:	80026cc0 	call	80026cc <_fflush_r>
 8000a94:	d8c00017 	ldw	r3,0(sp)
 8000a98:	da000117 	ldw	r8,4(sp)
 8000a9c:	103fc21e 	bne	r2,zero,80009a8 <__sfvwrite_r+0x204>
 8000aa0:	182f883a 	mov	r23,r3
 8000aa4:	9de7c83a 	sub	r19,r19,r23
 8000aa8:	983fe11e 	bne	r19,zero,8000a30 <__sfvwrite_r+0x28c>
 8000aac:	800b883a 	mov	r5,r16
 8000ab0:	a809883a 	mov	r4,r21
 8000ab4:	80026cc0 	call	80026cc <_fflush_r>
 8000ab8:	103fbb1e 	bne	r2,zero,80009a8 <__sfvwrite_r+0x204>
 8000abc:	0011883a 	mov	r8,zero
 8000ac0:	003fdb06 	br	8000a30 <__sfvwrite_r+0x28c>
 8000ac4:	94c0012e 	bgeu	r18,r19,8000acc <__sfvwrite_r+0x328>
 8000ac8:	9027883a 	mov	r19,r18
 8000acc:	980d883a 	mov	r6,r19
 8000ad0:	e00b883a 	mov	r5,fp
 8000ad4:	800182c0 	call	800182c <memmove>
 8000ad8:	80800217 	ldw	r2,8(r16)
 8000adc:	80c00017 	ldw	r3,0(r16)
 8000ae0:	14c5c83a 	sub	r2,r2,r19
 8000ae4:	1cc7883a 	add	r3,r3,r19
 8000ae8:	80800215 	stw	r2,8(r16)
 8000aec:	80c00015 	stw	r3,0(r16)
 8000af0:	10004326 	beq	r2,zero,8000c00 <__sfvwrite_r+0x45c>
 8000af4:	9805883a 	mov	r2,r19
 8000af8:	003f8306 	br	8000908 <__sfvwrite_r+0x164>
 8000afc:	b00d883a 	mov	r6,r22
 8000b00:	e00b883a 	mov	r5,fp
 8000b04:	da000115 	stw	r8,4(sp)
 8000b08:	800182c0 	call	800182c <memmove>
 8000b0c:	80800217 	ldw	r2,8(r16)
 8000b10:	80c00017 	ldw	r3,0(r16)
 8000b14:	da000117 	ldw	r8,4(sp)
 8000b18:	1585c83a 	sub	r2,r2,r22
 8000b1c:	1dad883a 	add	r22,r3,r22
 8000b20:	80800215 	stw	r2,8(r16)
 8000b24:	85800015 	stw	r22,0(r16)
 8000b28:	003fbf06 	br	8000a28 <__sfvwrite_r+0x284>
 8000b2c:	81000017 	ldw	r4,0(r16)
 8000b30:	9027883a 	mov	r19,r18
 8000b34:	902f883a 	mov	r23,r18
 8000b38:	003f6906 	br	80008e0 <__sfvwrite_r+0x13c>
 8000b3c:	900d883a 	mov	r6,r18
 8000b40:	01400284 	movi	r5,10
 8000b44:	e009883a 	mov	r4,fp
 8000b48:	80016000 	call	8001600 <memchr>
 8000b4c:	10003e26 	beq	r2,zero,8000c48 <__sfvwrite_r+0x4a4>
 8000b50:	10800044 	addi	r2,r2,1
 8000b54:	1727c83a 	sub	r19,r2,fp
 8000b58:	02000044 	movi	r8,1
 8000b5c:	003f9d06 	br	80009d4 <__sfvwrite_r+0x230>
 8000b60:	80800517 	ldw	r2,20(r16)
 8000b64:	81400417 	ldw	r5,16(r16)
 8000b68:	81c00017 	ldw	r7,0(r16)
 8000b6c:	10a7883a 	add	r19,r2,r2
 8000b70:	9885883a 	add	r2,r19,r2
 8000b74:	1026d7fa 	srli	r19,r2,31
 8000b78:	396dc83a 	sub	r22,r7,r5
 8000b7c:	b1000044 	addi	r4,r22,1
 8000b80:	9885883a 	add	r2,r19,r2
 8000b84:	1027d07a 	srai	r19,r2,1
 8000b88:	2485883a 	add	r2,r4,r18
 8000b8c:	980d883a 	mov	r6,r19
 8000b90:	9880022e 	bgeu	r19,r2,8000b9c <__sfvwrite_r+0x3f8>
 8000b94:	1027883a 	mov	r19,r2
 8000b98:	100d883a 	mov	r6,r2
 8000b9c:	18c1000c 	andi	r3,r3,1024
 8000ba0:	18001c26 	beq	r3,zero,8000c14 <__sfvwrite_r+0x470>
 8000ba4:	300b883a 	mov	r5,r6
 8000ba8:	a809883a 	mov	r4,r21
 8000bac:	8000df40 	call	8000df4 <_malloc_r>
 8000bb0:	102f883a 	mov	r23,r2
 8000bb4:	10002926 	beq	r2,zero,8000c5c <__sfvwrite_r+0x4b8>
 8000bb8:	81400417 	ldw	r5,16(r16)
 8000bbc:	b00d883a 	mov	r6,r22
 8000bc0:	1009883a 	mov	r4,r2
 8000bc4:	80016e40 	call	80016e4 <memcpy>
 8000bc8:	8080030b 	ldhu	r2,12(r16)
 8000bcc:	00fedfc4 	movi	r3,-1153
 8000bd0:	10c4703a 	and	r2,r2,r3
 8000bd4:	10802014 	ori	r2,r2,128
 8000bd8:	8080030d 	sth	r2,12(r16)
 8000bdc:	bd89883a 	add	r4,r23,r22
 8000be0:	9d8fc83a 	sub	r7,r19,r22
 8000be4:	85c00415 	stw	r23,16(r16)
 8000be8:	84c00515 	stw	r19,20(r16)
 8000bec:	81000015 	stw	r4,0(r16)
 8000bf0:	9027883a 	mov	r19,r18
 8000bf4:	81c00215 	stw	r7,8(r16)
 8000bf8:	902f883a 	mov	r23,r18
 8000bfc:	003f3806 	br	80008e0 <__sfvwrite_r+0x13c>
 8000c00:	800b883a 	mov	r5,r16
 8000c04:	a809883a 	mov	r4,r21
 8000c08:	80026cc0 	call	80026cc <_fflush_r>
 8000c0c:	103fb926 	beq	r2,zero,8000af4 <__sfvwrite_r+0x350>
 8000c10:	003f6506 	br	80009a8 <__sfvwrite_r+0x204>
 8000c14:	a809883a 	mov	r4,r21
 8000c18:	8001ab00 	call	8001ab0 <_realloc_r>
 8000c1c:	102f883a 	mov	r23,r2
 8000c20:	103fee1e 	bne	r2,zero,8000bdc <__sfvwrite_r+0x438>
 8000c24:	81400417 	ldw	r5,16(r16)
 8000c28:	a809883a 	mov	r4,r21
 8000c2c:	800287c0 	call	800287c <_free_r>
 8000c30:	8080030b 	ldhu	r2,12(r16)
 8000c34:	00ffdfc4 	movi	r3,-129
 8000c38:	1884703a 	and	r2,r3,r2
 8000c3c:	00c00304 	movi	r3,12
 8000c40:	a8c00015 	stw	r3,0(r21)
 8000c44:	003f5906 	br	80009ac <__sfvwrite_r+0x208>
 8000c48:	94c00044 	addi	r19,r18,1
 8000c4c:	02000044 	movi	r8,1
 8000c50:	003f6006 	br	80009d4 <__sfvwrite_r+0x230>
 8000c54:	00bfffc4 	movi	r2,-1
 8000c58:	003f0006 	br	800085c <__sfvwrite_r+0xb8>
 8000c5c:	00800304 	movi	r2,12
 8000c60:	a8800015 	stw	r2,0(r21)
 8000c64:	8080030b 	ldhu	r2,12(r16)
 8000c68:	003f5006 	br	80009ac <__sfvwrite_r+0x208>

08000c6c <_fwalk>:
 8000c6c:	defff704 	addi	sp,sp,-36
 8000c70:	dd000415 	stw	r20,16(sp)
 8000c74:	dfc00815 	stw	ra,32(sp)
 8000c78:	ddc00715 	stw	r23,28(sp)
 8000c7c:	dd800615 	stw	r22,24(sp)
 8000c80:	dd400515 	stw	r21,20(sp)
 8000c84:	dcc00315 	stw	r19,12(sp)
 8000c88:	dc800215 	stw	r18,8(sp)
 8000c8c:	dc400115 	stw	r17,4(sp)
 8000c90:	dc000015 	stw	r16,0(sp)
 8000c94:	2500b804 	addi	r20,r4,736
 8000c98:	a0002326 	beq	r20,zero,8000d28 <_fwalk+0xbc>
 8000c9c:	282b883a 	mov	r21,r5
 8000ca0:	002f883a 	mov	r23,zero
 8000ca4:	05800044 	movi	r22,1
 8000ca8:	04ffffc4 	movi	r19,-1
 8000cac:	a4400117 	ldw	r17,4(r20)
 8000cb0:	a4800217 	ldw	r18,8(r20)
 8000cb4:	8c7fffc4 	addi	r17,r17,-1
 8000cb8:	88000d16 	blt	r17,zero,8000cf0 <_fwalk+0x84>
 8000cbc:	94000304 	addi	r16,r18,12
 8000cc0:	94800384 	addi	r18,r18,14
 8000cc4:	8080000b 	ldhu	r2,0(r16)
 8000cc8:	8c7fffc4 	addi	r17,r17,-1
 8000ccc:	813ffd04 	addi	r4,r16,-12
 8000cd0:	b080042e 	bgeu	r22,r2,8000ce4 <_fwalk+0x78>
 8000cd4:	9080000f 	ldh	r2,0(r18)
 8000cd8:	14c00226 	beq	r2,r19,8000ce4 <_fwalk+0x78>
 8000cdc:	a83ee83a 	callr	r21
 8000ce0:	b8aeb03a 	or	r23,r23,r2
 8000ce4:	84001a04 	addi	r16,r16,104
 8000ce8:	94801a04 	addi	r18,r18,104
 8000cec:	8cfff51e 	bne	r17,r19,8000cc4 <_fwalk+0x58>
 8000cf0:	a5000017 	ldw	r20,0(r20)
 8000cf4:	a03fed1e 	bne	r20,zero,8000cac <_fwalk+0x40>
 8000cf8:	b805883a 	mov	r2,r23
 8000cfc:	dfc00817 	ldw	ra,32(sp)
 8000d00:	ddc00717 	ldw	r23,28(sp)
 8000d04:	dd800617 	ldw	r22,24(sp)
 8000d08:	dd400517 	ldw	r21,20(sp)
 8000d0c:	dd000417 	ldw	r20,16(sp)
 8000d10:	dcc00317 	ldw	r19,12(sp)
 8000d14:	dc800217 	ldw	r18,8(sp)
 8000d18:	dc400117 	ldw	r17,4(sp)
 8000d1c:	dc000017 	ldw	r16,0(sp)
 8000d20:	dec00904 	addi	sp,sp,36
 8000d24:	f800283a 	ret
 8000d28:	002f883a 	mov	r23,zero
 8000d2c:	003ff206 	br	8000cf8 <_fwalk+0x8c>

08000d30 <_fwalk_reent>:
 8000d30:	defff704 	addi	sp,sp,-36
 8000d34:	dd000415 	stw	r20,16(sp)
 8000d38:	dfc00815 	stw	ra,32(sp)
 8000d3c:	ddc00715 	stw	r23,28(sp)
 8000d40:	dd800615 	stw	r22,24(sp)
 8000d44:	dd400515 	stw	r21,20(sp)
 8000d48:	dcc00315 	stw	r19,12(sp)
 8000d4c:	dc800215 	stw	r18,8(sp)
 8000d50:	dc400115 	stw	r17,4(sp)
 8000d54:	dc000015 	stw	r16,0(sp)
 8000d58:	2500b804 	addi	r20,r4,736
 8000d5c:	a0002326 	beq	r20,zero,8000dec <_fwalk_reent+0xbc>
 8000d60:	282b883a 	mov	r21,r5
 8000d64:	2027883a 	mov	r19,r4
 8000d68:	002f883a 	mov	r23,zero
 8000d6c:	05800044 	movi	r22,1
 8000d70:	04bfffc4 	movi	r18,-1
 8000d74:	a4400117 	ldw	r17,4(r20)
 8000d78:	a4000217 	ldw	r16,8(r20)
 8000d7c:	8c7fffc4 	addi	r17,r17,-1
 8000d80:	88000c16 	blt	r17,zero,8000db4 <_fwalk_reent+0x84>
 8000d84:	84000304 	addi	r16,r16,12
 8000d88:	8080000b 	ldhu	r2,0(r16)
 8000d8c:	8c7fffc4 	addi	r17,r17,-1
 8000d90:	817ffd04 	addi	r5,r16,-12
 8000d94:	b080052e 	bgeu	r22,r2,8000dac <_fwalk_reent+0x7c>
 8000d98:	8080008f 	ldh	r2,2(r16)
 8000d9c:	9809883a 	mov	r4,r19
 8000da0:	14800226 	beq	r2,r18,8000dac <_fwalk_reent+0x7c>
 8000da4:	a83ee83a 	callr	r21
 8000da8:	b8aeb03a 	or	r23,r23,r2
 8000dac:	84001a04 	addi	r16,r16,104
 8000db0:	8cbff51e 	bne	r17,r18,8000d88 <_fwalk_reent+0x58>
 8000db4:	a5000017 	ldw	r20,0(r20)
 8000db8:	a03fee1e 	bne	r20,zero,8000d74 <_fwalk_reent+0x44>
 8000dbc:	b805883a 	mov	r2,r23
 8000dc0:	dfc00817 	ldw	ra,32(sp)
 8000dc4:	ddc00717 	ldw	r23,28(sp)
 8000dc8:	dd800617 	ldw	r22,24(sp)
 8000dcc:	dd400517 	ldw	r21,20(sp)
 8000dd0:	dd000417 	ldw	r20,16(sp)
 8000dd4:	dcc00317 	ldw	r19,12(sp)
 8000dd8:	dc800217 	ldw	r18,8(sp)
 8000ddc:	dc400117 	ldw	r17,4(sp)
 8000de0:	dc000017 	ldw	r16,0(sp)
 8000de4:	dec00904 	addi	sp,sp,36
 8000de8:	f800283a 	ret
 8000dec:	002f883a 	mov	r23,zero
 8000df0:	003ff206 	br	8000dbc <_fwalk_reent+0x8c>

08000df4 <_malloc_r>:
 8000df4:	defff504 	addi	sp,sp,-44
 8000df8:	dc800315 	stw	r18,12(sp)
 8000dfc:	dfc00a15 	stw	ra,40(sp)
 8000e00:	df000915 	stw	fp,36(sp)
 8000e04:	ddc00815 	stw	r23,32(sp)
 8000e08:	dd800715 	stw	r22,28(sp)
 8000e0c:	dd400615 	stw	r21,24(sp)
 8000e10:	dd000515 	stw	r20,20(sp)
 8000e14:	dcc00415 	stw	r19,16(sp)
 8000e18:	dc400215 	stw	r17,8(sp)
 8000e1c:	dc000115 	stw	r16,4(sp)
 8000e20:	288002c4 	addi	r2,r5,11
 8000e24:	00c00584 	movi	r3,22
 8000e28:	2025883a 	mov	r18,r4
 8000e2c:	18807f2e 	bgeu	r3,r2,800102c <_malloc_r+0x238>
 8000e30:	047ffe04 	movi	r17,-8
 8000e34:	1462703a 	and	r17,r2,r17
 8000e38:	8800a316 	blt	r17,zero,80010c8 <_malloc_r+0x2d4>
 8000e3c:	8940a236 	bltu	r17,r5,80010c8 <_malloc_r+0x2d4>
 8000e40:	80036300 	call	8003630 <__malloc_lock>
 8000e44:	00807dc4 	movi	r2,503
 8000e48:	1441e92e 	bgeu	r2,r17,80015f0 <_malloc_r+0x7fc>
 8000e4c:	8804d27a 	srli	r2,r17,9
 8000e50:	1000a126 	beq	r2,zero,80010d8 <_malloc_r+0x2e4>
 8000e54:	00c00104 	movi	r3,4
 8000e58:	18811e36 	bltu	r3,r2,80012d4 <_malloc_r+0x4e0>
 8000e5c:	8804d1ba 	srli	r2,r17,6
 8000e60:	12000e44 	addi	r8,r2,57
 8000e64:	11c00e04 	addi	r7,r2,56
 8000e68:	4209883a 	add	r4,r8,r8
 8000e6c:	04c20034 	movhi	r19,2048
 8000e70:	2109883a 	add	r4,r4,r4
 8000e74:	9cdb2504 	addi	r19,r19,27796
 8000e78:	2109883a 	add	r4,r4,r4
 8000e7c:	9909883a 	add	r4,r19,r4
 8000e80:	24000117 	ldw	r16,4(r4)
 8000e84:	213ffe04 	addi	r4,r4,-8
 8000e88:	24009726 	beq	r4,r16,80010e8 <_malloc_r+0x2f4>
 8000e8c:	80800117 	ldw	r2,4(r16)
 8000e90:	01bfff04 	movi	r6,-4
 8000e94:	014003c4 	movi	r5,15
 8000e98:	1184703a 	and	r2,r2,r6
 8000e9c:	1447c83a 	sub	r3,r2,r17
 8000ea0:	28c00716 	blt	r5,r3,8000ec0 <_malloc_r+0xcc>
 8000ea4:	1800920e 	bge	r3,zero,80010f0 <_malloc_r+0x2fc>
 8000ea8:	84000317 	ldw	r16,12(r16)
 8000eac:	24008e26 	beq	r4,r16,80010e8 <_malloc_r+0x2f4>
 8000eb0:	80800117 	ldw	r2,4(r16)
 8000eb4:	1184703a 	and	r2,r2,r6
 8000eb8:	1447c83a 	sub	r3,r2,r17
 8000ebc:	28fff90e 	bge	r5,r3,8000ea4 <_malloc_r+0xb0>
 8000ec0:	3809883a 	mov	r4,r7
 8000ec4:	01820034 	movhi	r6,2048
 8000ec8:	9c000417 	ldw	r16,16(r19)
 8000ecc:	319b2504 	addi	r6,r6,27796
 8000ed0:	32000204 	addi	r8,r6,8
 8000ed4:	82013426 	beq	r16,r8,80013a8 <_malloc_r+0x5b4>
 8000ed8:	80c00117 	ldw	r3,4(r16)
 8000edc:	00bfff04 	movi	r2,-4
 8000ee0:	188e703a 	and	r7,r3,r2
 8000ee4:	3c45c83a 	sub	r2,r7,r17
 8000ee8:	00c003c4 	movi	r3,15
 8000eec:	18811f16 	blt	r3,r2,800136c <_malloc_r+0x578>
 8000ef0:	32000515 	stw	r8,20(r6)
 8000ef4:	32000415 	stw	r8,16(r6)
 8000ef8:	10007f0e 	bge	r2,zero,80010f8 <_malloc_r+0x304>
 8000efc:	00807fc4 	movi	r2,511
 8000f00:	11c0fd36 	bltu	r2,r7,80012f8 <_malloc_r+0x504>
 8000f04:	3806d0fa 	srli	r3,r7,3
 8000f08:	01c00044 	movi	r7,1
 8000f0c:	30800117 	ldw	r2,4(r6)
 8000f10:	19400044 	addi	r5,r3,1
 8000f14:	294b883a 	add	r5,r5,r5
 8000f18:	1807d0ba 	srai	r3,r3,2
 8000f1c:	294b883a 	add	r5,r5,r5
 8000f20:	294b883a 	add	r5,r5,r5
 8000f24:	298b883a 	add	r5,r5,r6
 8000f28:	38c6983a 	sll	r3,r7,r3
 8000f2c:	29c00017 	ldw	r7,0(r5)
 8000f30:	2a7ffe04 	addi	r9,r5,-8
 8000f34:	1886b03a 	or	r3,r3,r2
 8000f38:	82400315 	stw	r9,12(r16)
 8000f3c:	81c00215 	stw	r7,8(r16)
 8000f40:	30c00115 	stw	r3,4(r6)
 8000f44:	2c000015 	stw	r16,0(r5)
 8000f48:	3c000315 	stw	r16,12(r7)
 8000f4c:	2005d0ba 	srai	r2,r4,2
 8000f50:	01400044 	movi	r5,1
 8000f54:	288a983a 	sll	r5,r5,r2
 8000f58:	19406f36 	bltu	r3,r5,8001118 <_malloc_r+0x324>
 8000f5c:	28c4703a 	and	r2,r5,r3
 8000f60:	10000a1e 	bne	r2,zero,8000f8c <_malloc_r+0x198>
 8000f64:	00bfff04 	movi	r2,-4
 8000f68:	294b883a 	add	r5,r5,r5
 8000f6c:	2088703a 	and	r4,r4,r2
 8000f70:	28c4703a 	and	r2,r5,r3
 8000f74:	21000104 	addi	r4,r4,4
 8000f78:	1000041e 	bne	r2,zero,8000f8c <_malloc_r+0x198>
 8000f7c:	294b883a 	add	r5,r5,r5
 8000f80:	28c4703a 	and	r2,r5,r3
 8000f84:	21000104 	addi	r4,r4,4
 8000f88:	103ffc26 	beq	r2,zero,8000f7c <_malloc_r+0x188>
 8000f8c:	02bfff04 	movi	r10,-4
 8000f90:	024003c4 	movi	r9,15
 8000f94:	21800044 	addi	r6,r4,1
 8000f98:	318d883a 	add	r6,r6,r6
 8000f9c:	318d883a 	add	r6,r6,r6
 8000fa0:	318d883a 	add	r6,r6,r6
 8000fa4:	998d883a 	add	r6,r19,r6
 8000fa8:	333ffe04 	addi	r12,r6,-8
 8000fac:	2017883a 	mov	r11,r4
 8000fb0:	31800104 	addi	r6,r6,4
 8000fb4:	34000017 	ldw	r16,0(r6)
 8000fb8:	31fffd04 	addi	r7,r6,-12
 8000fbc:	81c0041e 	bne	r16,r7,8000fd0 <_malloc_r+0x1dc>
 8000fc0:	0000fb06 	br	80013b0 <_malloc_r+0x5bc>
 8000fc4:	1801030e 	bge	r3,zero,80013d4 <_malloc_r+0x5e0>
 8000fc8:	84000317 	ldw	r16,12(r16)
 8000fcc:	81c0f826 	beq	r16,r7,80013b0 <_malloc_r+0x5bc>
 8000fd0:	80800117 	ldw	r2,4(r16)
 8000fd4:	1284703a 	and	r2,r2,r10
 8000fd8:	1447c83a 	sub	r3,r2,r17
 8000fdc:	48fff90e 	bge	r9,r3,8000fc4 <_malloc_r+0x1d0>
 8000fe0:	80800317 	ldw	r2,12(r16)
 8000fe4:	81000217 	ldw	r4,8(r16)
 8000fe8:	89400054 	ori	r5,r17,1
 8000fec:	81400115 	stw	r5,4(r16)
 8000ff0:	20800315 	stw	r2,12(r4)
 8000ff4:	11000215 	stw	r4,8(r2)
 8000ff8:	8463883a 	add	r17,r16,r17
 8000ffc:	9c400515 	stw	r17,20(r19)
 8001000:	9c400415 	stw	r17,16(r19)
 8001004:	18800054 	ori	r2,r3,1
 8001008:	88800115 	stw	r2,4(r17)
 800100c:	8a000315 	stw	r8,12(r17)
 8001010:	8a000215 	stw	r8,8(r17)
 8001014:	88e3883a 	add	r17,r17,r3
 8001018:	88c00015 	stw	r3,0(r17)
 800101c:	9009883a 	mov	r4,r18
 8001020:	80036540 	call	8003654 <__malloc_unlock>
 8001024:	80800204 	addi	r2,r16,8
 8001028:	00001b06 	br	8001098 <_malloc_r+0x2a4>
 800102c:	04400404 	movi	r17,16
 8001030:	89402536 	bltu	r17,r5,80010c8 <_malloc_r+0x2d4>
 8001034:	80036300 	call	8003630 <__malloc_lock>
 8001038:	00800184 	movi	r2,6
 800103c:	01000084 	movi	r4,2
 8001040:	04c20034 	movhi	r19,2048
 8001044:	1085883a 	add	r2,r2,r2
 8001048:	9cdb2504 	addi	r19,r19,27796
 800104c:	1085883a 	add	r2,r2,r2
 8001050:	9885883a 	add	r2,r19,r2
 8001054:	14000117 	ldw	r16,4(r2)
 8001058:	10fffe04 	addi	r3,r2,-8
 800105c:	80c0d926 	beq	r16,r3,80013c4 <_malloc_r+0x5d0>
 8001060:	80c00117 	ldw	r3,4(r16)
 8001064:	81000317 	ldw	r4,12(r16)
 8001068:	00bfff04 	movi	r2,-4
 800106c:	1884703a 	and	r2,r3,r2
 8001070:	81400217 	ldw	r5,8(r16)
 8001074:	8085883a 	add	r2,r16,r2
 8001078:	10c00117 	ldw	r3,4(r2)
 800107c:	29000315 	stw	r4,12(r5)
 8001080:	21400215 	stw	r5,8(r4)
 8001084:	18c00054 	ori	r3,r3,1
 8001088:	10c00115 	stw	r3,4(r2)
 800108c:	9009883a 	mov	r4,r18
 8001090:	80036540 	call	8003654 <__malloc_unlock>
 8001094:	80800204 	addi	r2,r16,8
 8001098:	dfc00a17 	ldw	ra,40(sp)
 800109c:	df000917 	ldw	fp,36(sp)
 80010a0:	ddc00817 	ldw	r23,32(sp)
 80010a4:	dd800717 	ldw	r22,28(sp)
 80010a8:	dd400617 	ldw	r21,24(sp)
 80010ac:	dd000517 	ldw	r20,20(sp)
 80010b0:	dcc00417 	ldw	r19,16(sp)
 80010b4:	dc800317 	ldw	r18,12(sp)
 80010b8:	dc400217 	ldw	r17,8(sp)
 80010bc:	dc000117 	ldw	r16,4(sp)
 80010c0:	dec00b04 	addi	sp,sp,44
 80010c4:	f800283a 	ret
 80010c8:	00800304 	movi	r2,12
 80010cc:	90800015 	stw	r2,0(r18)
 80010d0:	0005883a 	mov	r2,zero
 80010d4:	003ff006 	br	8001098 <_malloc_r+0x2a4>
 80010d8:	01002004 	movi	r4,128
 80010dc:	02001004 	movi	r8,64
 80010e0:	01c00fc4 	movi	r7,63
 80010e4:	003f6106 	br	8000e6c <_malloc_r+0x78>
 80010e8:	4009883a 	mov	r4,r8
 80010ec:	003f7506 	br	8000ec4 <_malloc_r+0xd0>
 80010f0:	81000317 	ldw	r4,12(r16)
 80010f4:	003fde06 	br	8001070 <_malloc_r+0x27c>
 80010f8:	81c5883a 	add	r2,r16,r7
 80010fc:	11400117 	ldw	r5,4(r2)
 8001100:	9009883a 	mov	r4,r18
 8001104:	29400054 	ori	r5,r5,1
 8001108:	11400115 	stw	r5,4(r2)
 800110c:	80036540 	call	8003654 <__malloc_unlock>
 8001110:	80800204 	addi	r2,r16,8
 8001114:	003fe006 	br	8001098 <_malloc_r+0x2a4>
 8001118:	9c000217 	ldw	r16,8(r19)
 800111c:	00bfff04 	movi	r2,-4
 8001120:	85800117 	ldw	r22,4(r16)
 8001124:	b0ac703a 	and	r22,r22,r2
 8001128:	b4400336 	bltu	r22,r17,8001138 <_malloc_r+0x344>
 800112c:	b445c83a 	sub	r2,r22,r17
 8001130:	00c003c4 	movi	r3,15
 8001134:	18805d16 	blt	r3,r2,80012ac <_malloc_r+0x4b8>
 8001138:	05c20074 	movhi	r23,2049
 800113c:	00820074 	movhi	r2,2049
 8001140:	10a77e04 	addi	r2,r2,-25096
 8001144:	bde0c004 	addi	r23,r23,-32000
 8001148:	15400017 	ldw	r21,0(r2)
 800114c:	b8c00017 	ldw	r3,0(r23)
 8001150:	00bfffc4 	movi	r2,-1
 8001154:	858d883a 	add	r6,r16,r22
 8001158:	8d6b883a 	add	r21,r17,r21
 800115c:	1880ea26 	beq	r3,r2,8001508 <_malloc_r+0x714>
 8001160:	ad4403c4 	addi	r21,r21,4111
 8001164:	00bc0004 	movi	r2,-4096
 8001168:	a8aa703a 	and	r21,r21,r2
 800116c:	a80b883a 	mov	r5,r21
 8001170:	9009883a 	mov	r4,r18
 8001174:	d9800015 	stw	r6,0(sp)
 8001178:	80020140 	call	8002014 <_sbrk_r>
 800117c:	1029883a 	mov	r20,r2
 8001180:	00bfffc4 	movi	r2,-1
 8001184:	d9800017 	ldw	r6,0(sp)
 8001188:	a080e826 	beq	r20,r2,800152c <_malloc_r+0x738>
 800118c:	a180a636 	bltu	r20,r6,8001428 <_malloc_r+0x634>
 8001190:	07020074 	movhi	fp,2049
 8001194:	e7278604 	addi	fp,fp,-25064
 8001198:	e0800017 	ldw	r2,0(fp)
 800119c:	a887883a 	add	r3,r21,r2
 80011a0:	e0c00015 	stw	r3,0(fp)
 80011a4:	3500e626 	beq	r6,r20,8001540 <_malloc_r+0x74c>
 80011a8:	b9000017 	ldw	r4,0(r23)
 80011ac:	00bfffc4 	movi	r2,-1
 80011b0:	2080ee26 	beq	r4,r2,800156c <_malloc_r+0x778>
 80011b4:	a185c83a 	sub	r2,r20,r6
 80011b8:	10c5883a 	add	r2,r2,r3
 80011bc:	e0800015 	stw	r2,0(fp)
 80011c0:	a0c001cc 	andi	r3,r20,7
 80011c4:	1800bc26 	beq	r3,zero,80014b8 <_malloc_r+0x6c4>
 80011c8:	a0e9c83a 	sub	r20,r20,r3
 80011cc:	00840204 	movi	r2,4104
 80011d0:	a5000204 	addi	r20,r20,8
 80011d4:	10c7c83a 	sub	r3,r2,r3
 80011d8:	a545883a 	add	r2,r20,r21
 80011dc:	1083ffcc 	andi	r2,r2,4095
 80011e0:	18abc83a 	sub	r21,r3,r2
 80011e4:	a80b883a 	mov	r5,r21
 80011e8:	9009883a 	mov	r4,r18
 80011ec:	80020140 	call	8002014 <_sbrk_r>
 80011f0:	00ffffc4 	movi	r3,-1
 80011f4:	10c0e126 	beq	r2,r3,800157c <_malloc_r+0x788>
 80011f8:	1505c83a 	sub	r2,r2,r20
 80011fc:	1545883a 	add	r2,r2,r21
 8001200:	10800054 	ori	r2,r2,1
 8001204:	e0c00017 	ldw	r3,0(fp)
 8001208:	9d000215 	stw	r20,8(r19)
 800120c:	a0800115 	stw	r2,4(r20)
 8001210:	a8c7883a 	add	r3,r21,r3
 8001214:	e0c00015 	stw	r3,0(fp)
 8001218:	84c00e26 	beq	r16,r19,8001254 <_malloc_r+0x460>
 800121c:	018003c4 	movi	r6,15
 8001220:	3580a72e 	bgeu	r6,r22,80014c0 <_malloc_r+0x6cc>
 8001224:	81400117 	ldw	r5,4(r16)
 8001228:	013ffe04 	movi	r4,-8
 800122c:	b0bffd04 	addi	r2,r22,-12
 8001230:	1104703a 	and	r2,r2,r4
 8001234:	2900004c 	andi	r4,r5,1
 8001238:	2088b03a 	or	r4,r4,r2
 800123c:	81000115 	stw	r4,4(r16)
 8001240:	01400144 	movi	r5,5
 8001244:	8089883a 	add	r4,r16,r2
 8001248:	21400115 	stw	r5,4(r4)
 800124c:	21400215 	stw	r5,8(r4)
 8001250:	3080cd36 	bltu	r6,r2,8001588 <_malloc_r+0x794>
 8001254:	00820074 	movhi	r2,2049
 8001258:	10a77d04 	addi	r2,r2,-25100
 800125c:	11000017 	ldw	r4,0(r2)
 8001260:	20c0012e 	bgeu	r4,r3,8001268 <_malloc_r+0x474>
 8001264:	10c00015 	stw	r3,0(r2)
 8001268:	00820074 	movhi	r2,2049
 800126c:	10a77c04 	addi	r2,r2,-25104
 8001270:	11000017 	ldw	r4,0(r2)
 8001274:	9c000217 	ldw	r16,8(r19)
 8001278:	20c0012e 	bgeu	r4,r3,8001280 <_malloc_r+0x48c>
 800127c:	10c00015 	stw	r3,0(r2)
 8001280:	80c00117 	ldw	r3,4(r16)
 8001284:	00bfff04 	movi	r2,-4
 8001288:	1886703a 	and	r3,r3,r2
 800128c:	1c45c83a 	sub	r2,r3,r17
 8001290:	1c400236 	bltu	r3,r17,800129c <_malloc_r+0x4a8>
 8001294:	00c003c4 	movi	r3,15
 8001298:	18800416 	blt	r3,r2,80012ac <_malloc_r+0x4b8>
 800129c:	9009883a 	mov	r4,r18
 80012a0:	80036540 	call	8003654 <__malloc_unlock>
 80012a4:	0005883a 	mov	r2,zero
 80012a8:	003f7b06 	br	8001098 <_malloc_r+0x2a4>
 80012ac:	88c00054 	ori	r3,r17,1
 80012b0:	80c00115 	stw	r3,4(r16)
 80012b4:	8463883a 	add	r17,r16,r17
 80012b8:	10800054 	ori	r2,r2,1
 80012bc:	9c400215 	stw	r17,8(r19)
 80012c0:	88800115 	stw	r2,4(r17)
 80012c4:	9009883a 	mov	r4,r18
 80012c8:	80036540 	call	8003654 <__malloc_unlock>
 80012cc:	80800204 	addi	r2,r16,8
 80012d0:	003f7106 	br	8001098 <_malloc_r+0x2a4>
 80012d4:	00c00504 	movi	r3,20
 80012d8:	18804a2e 	bgeu	r3,r2,8001404 <_malloc_r+0x610>
 80012dc:	00c01504 	movi	r3,84
 80012e0:	18806e36 	bltu	r3,r2,800149c <_malloc_r+0x6a8>
 80012e4:	8804d33a 	srli	r2,r17,12
 80012e8:	12001bc4 	addi	r8,r2,111
 80012ec:	11c01b84 	addi	r7,r2,110
 80012f0:	4209883a 	add	r4,r8,r8
 80012f4:	003edd06 	br	8000e6c <_malloc_r+0x78>
 80012f8:	3804d27a 	srli	r2,r7,9
 80012fc:	00c00104 	movi	r3,4
 8001300:	1880442e 	bgeu	r3,r2,8001414 <_malloc_r+0x620>
 8001304:	00c00504 	movi	r3,20
 8001308:	18808136 	bltu	r3,r2,8001510 <_malloc_r+0x71c>
 800130c:	11401704 	addi	r5,r2,92
 8001310:	10c016c4 	addi	r3,r2,91
 8001314:	294b883a 	add	r5,r5,r5
 8001318:	294b883a 	add	r5,r5,r5
 800131c:	294b883a 	add	r5,r5,r5
 8001320:	994b883a 	add	r5,r19,r5
 8001324:	28800017 	ldw	r2,0(r5)
 8001328:	01820034 	movhi	r6,2048
 800132c:	297ffe04 	addi	r5,r5,-8
 8001330:	319b2504 	addi	r6,r6,27796
 8001334:	28806526 	beq	r5,r2,80014cc <_malloc_r+0x6d8>
 8001338:	01bfff04 	movi	r6,-4
 800133c:	10c00117 	ldw	r3,4(r2)
 8001340:	1986703a 	and	r3,r3,r6
 8001344:	38c0022e 	bgeu	r7,r3,8001350 <_malloc_r+0x55c>
 8001348:	10800217 	ldw	r2,8(r2)
 800134c:	28bffb1e 	bne	r5,r2,800133c <_malloc_r+0x548>
 8001350:	11400317 	ldw	r5,12(r2)
 8001354:	98c00117 	ldw	r3,4(r19)
 8001358:	81400315 	stw	r5,12(r16)
 800135c:	80800215 	stw	r2,8(r16)
 8001360:	2c000215 	stw	r16,8(r5)
 8001364:	14000315 	stw	r16,12(r2)
 8001368:	003ef806 	br	8000f4c <_malloc_r+0x158>
 800136c:	88c00054 	ori	r3,r17,1
 8001370:	80c00115 	stw	r3,4(r16)
 8001374:	8463883a 	add	r17,r16,r17
 8001378:	34400515 	stw	r17,20(r6)
 800137c:	34400415 	stw	r17,16(r6)
 8001380:	10c00054 	ori	r3,r2,1
 8001384:	8a000315 	stw	r8,12(r17)
 8001388:	8a000215 	stw	r8,8(r17)
 800138c:	88c00115 	stw	r3,4(r17)
 8001390:	88a3883a 	add	r17,r17,r2
 8001394:	88800015 	stw	r2,0(r17)
 8001398:	9009883a 	mov	r4,r18
 800139c:	80036540 	call	8003654 <__malloc_unlock>
 80013a0:	80800204 	addi	r2,r16,8
 80013a4:	003f3c06 	br	8001098 <_malloc_r+0x2a4>
 80013a8:	30c00117 	ldw	r3,4(r6)
 80013ac:	003ee706 	br	8000f4c <_malloc_r+0x158>
 80013b0:	5ac00044 	addi	r11,r11,1
 80013b4:	588000cc 	andi	r2,r11,3
 80013b8:	31800204 	addi	r6,r6,8
 80013bc:	103efd1e 	bne	r2,zero,8000fb4 <_malloc_r+0x1c0>
 80013c0:	00002406 	br	8001454 <_malloc_r+0x660>
 80013c4:	14000317 	ldw	r16,12(r2)
 80013c8:	143f251e 	bne	r2,r16,8001060 <_malloc_r+0x26c>
 80013cc:	21000084 	addi	r4,r4,2
 80013d0:	003ebc06 	br	8000ec4 <_malloc_r+0xd0>
 80013d4:	8085883a 	add	r2,r16,r2
 80013d8:	10c00117 	ldw	r3,4(r2)
 80013dc:	81000317 	ldw	r4,12(r16)
 80013e0:	81400217 	ldw	r5,8(r16)
 80013e4:	18c00054 	ori	r3,r3,1
 80013e8:	10c00115 	stw	r3,4(r2)
 80013ec:	29000315 	stw	r4,12(r5)
 80013f0:	21400215 	stw	r5,8(r4)
 80013f4:	9009883a 	mov	r4,r18
 80013f8:	80036540 	call	8003654 <__malloc_unlock>
 80013fc:	80800204 	addi	r2,r16,8
 8001400:	003f2506 	br	8001098 <_malloc_r+0x2a4>
 8001404:	12001704 	addi	r8,r2,92
 8001408:	11c016c4 	addi	r7,r2,91
 800140c:	4209883a 	add	r4,r8,r8
 8001410:	003e9606 	br	8000e6c <_malloc_r+0x78>
 8001414:	3804d1ba 	srli	r2,r7,6
 8001418:	11400e44 	addi	r5,r2,57
 800141c:	10c00e04 	addi	r3,r2,56
 8001420:	294b883a 	add	r5,r5,r5
 8001424:	003fbc06 	br	8001318 <_malloc_r+0x524>
 8001428:	84ff5926 	beq	r16,r19,8001190 <_malloc_r+0x39c>
 800142c:	00820034 	movhi	r2,2048
 8001430:	109b2504 	addi	r2,r2,27796
 8001434:	14000217 	ldw	r16,8(r2)
 8001438:	00bfff04 	movi	r2,-4
 800143c:	80c00117 	ldw	r3,4(r16)
 8001440:	1886703a 	and	r3,r3,r2
 8001444:	003f9106 	br	800128c <_malloc_r+0x498>
 8001448:	60800217 	ldw	r2,8(r12)
 800144c:	213fffc4 	addi	r4,r4,-1
 8001450:	1300651e 	bne	r2,r12,80015e8 <_malloc_r+0x7f4>
 8001454:	208000cc 	andi	r2,r4,3
 8001458:	633ffe04 	addi	r12,r12,-8
 800145c:	103ffa1e 	bne	r2,zero,8001448 <_malloc_r+0x654>
 8001460:	98800117 	ldw	r2,4(r19)
 8001464:	0146303a 	nor	r3,zero,r5
 8001468:	1884703a 	and	r2,r3,r2
 800146c:	98800115 	stw	r2,4(r19)
 8001470:	294b883a 	add	r5,r5,r5
 8001474:	117f2836 	bltu	r2,r5,8001118 <_malloc_r+0x324>
 8001478:	283f2726 	beq	r5,zero,8001118 <_malloc_r+0x324>
 800147c:	2886703a 	and	r3,r5,r2
 8001480:	5809883a 	mov	r4,r11
 8001484:	183ec31e 	bne	r3,zero,8000f94 <_malloc_r+0x1a0>
 8001488:	294b883a 	add	r5,r5,r5
 800148c:	2886703a 	and	r3,r5,r2
 8001490:	21000104 	addi	r4,r4,4
 8001494:	183ffc26 	beq	r3,zero,8001488 <_malloc_r+0x694>
 8001498:	003ebe06 	br	8000f94 <_malloc_r+0x1a0>
 800149c:	00c05504 	movi	r3,340
 80014a0:	18801236 	bltu	r3,r2,80014ec <_malloc_r+0x6f8>
 80014a4:	8804d3fa 	srli	r2,r17,15
 80014a8:	12001e04 	addi	r8,r2,120
 80014ac:	11c01dc4 	addi	r7,r2,119
 80014b0:	4209883a 	add	r4,r8,r8
 80014b4:	003e6d06 	br	8000e6c <_malloc_r+0x78>
 80014b8:	00c40004 	movi	r3,4096
 80014bc:	003f4606 	br	80011d8 <_malloc_r+0x3e4>
 80014c0:	00800044 	movi	r2,1
 80014c4:	a0800115 	stw	r2,4(r20)
 80014c8:	003f7406 	br	800129c <_malloc_r+0x4a8>
 80014cc:	1805d0ba 	srai	r2,r3,2
 80014d0:	01c00044 	movi	r7,1
 80014d4:	30c00117 	ldw	r3,4(r6)
 80014d8:	388e983a 	sll	r7,r7,r2
 80014dc:	2805883a 	mov	r2,r5
 80014e0:	38c6b03a 	or	r3,r7,r3
 80014e4:	30c00115 	stw	r3,4(r6)
 80014e8:	003f9b06 	br	8001358 <_malloc_r+0x564>
 80014ec:	00c15504 	movi	r3,1364
 80014f0:	18801a36 	bltu	r3,r2,800155c <_malloc_r+0x768>
 80014f4:	8804d4ba 	srli	r2,r17,18
 80014f8:	12001f44 	addi	r8,r2,125
 80014fc:	11c01f04 	addi	r7,r2,124
 8001500:	4209883a 	add	r4,r8,r8
 8001504:	003e5906 	br	8000e6c <_malloc_r+0x78>
 8001508:	ad400404 	addi	r21,r21,16
 800150c:	003f1706 	br	800116c <_malloc_r+0x378>
 8001510:	00c01504 	movi	r3,84
 8001514:	18802336 	bltu	r3,r2,80015a4 <_malloc_r+0x7b0>
 8001518:	3804d33a 	srli	r2,r7,12
 800151c:	11401bc4 	addi	r5,r2,111
 8001520:	10c01b84 	addi	r3,r2,110
 8001524:	294b883a 	add	r5,r5,r5
 8001528:	003f7b06 	br	8001318 <_malloc_r+0x524>
 800152c:	9c000217 	ldw	r16,8(r19)
 8001530:	00bfff04 	movi	r2,-4
 8001534:	80c00117 	ldw	r3,4(r16)
 8001538:	1886703a 	and	r3,r3,r2
 800153c:	003f5306 	br	800128c <_malloc_r+0x498>
 8001540:	3083ffcc 	andi	r2,r6,4095
 8001544:	103f181e 	bne	r2,zero,80011a8 <_malloc_r+0x3b4>
 8001548:	99000217 	ldw	r4,8(r19)
 800154c:	b545883a 	add	r2,r22,r21
 8001550:	10800054 	ori	r2,r2,1
 8001554:	20800115 	stw	r2,4(r4)
 8001558:	003f3e06 	br	8001254 <_malloc_r+0x460>
 800155c:	01003f84 	movi	r4,254
 8001560:	02001fc4 	movi	r8,127
 8001564:	01c01f84 	movi	r7,126
 8001568:	003e4006 	br	8000e6c <_malloc_r+0x78>
 800156c:	00820074 	movhi	r2,2049
 8001570:	10a0c004 	addi	r2,r2,-32000
 8001574:	15000015 	stw	r20,0(r2)
 8001578:	003f1106 	br	80011c0 <_malloc_r+0x3cc>
 800157c:	00800044 	movi	r2,1
 8001580:	002b883a 	mov	r21,zero
 8001584:	003f1f06 	br	8001204 <_malloc_r+0x410>
 8001588:	81400204 	addi	r5,r16,8
 800158c:	9009883a 	mov	r4,r18
 8001590:	800287c0 	call	800287c <_free_r>
 8001594:	00820074 	movhi	r2,2049
 8001598:	10a78604 	addi	r2,r2,-25064
 800159c:	10c00017 	ldw	r3,0(r2)
 80015a0:	003f2c06 	br	8001254 <_malloc_r+0x460>
 80015a4:	00c05504 	movi	r3,340
 80015a8:	18800536 	bltu	r3,r2,80015c0 <_malloc_r+0x7cc>
 80015ac:	3804d3fa 	srli	r2,r7,15
 80015b0:	11401e04 	addi	r5,r2,120
 80015b4:	10c01dc4 	addi	r3,r2,119
 80015b8:	294b883a 	add	r5,r5,r5
 80015bc:	003f5606 	br	8001318 <_malloc_r+0x524>
 80015c0:	00c15504 	movi	r3,1364
 80015c4:	18800536 	bltu	r3,r2,80015dc <_malloc_r+0x7e8>
 80015c8:	3804d4ba 	srli	r2,r7,18
 80015cc:	11401f44 	addi	r5,r2,125
 80015d0:	10c01f04 	addi	r3,r2,124
 80015d4:	294b883a 	add	r5,r5,r5
 80015d8:	003f4f06 	br	8001318 <_malloc_r+0x524>
 80015dc:	01403f84 	movi	r5,254
 80015e0:	00c01f84 	movi	r3,126
 80015e4:	003f4c06 	br	8001318 <_malloc_r+0x524>
 80015e8:	98800117 	ldw	r2,4(r19)
 80015ec:	003fa006 	br	8001470 <_malloc_r+0x67c>
 80015f0:	8808d0fa 	srli	r4,r17,3
 80015f4:	20800044 	addi	r2,r4,1
 80015f8:	1085883a 	add	r2,r2,r2
 80015fc:	003e9006 	br	8001040 <_malloc_r+0x24c>

08001600 <memchr>:
 8001600:	208000cc 	andi	r2,r4,3
 8001604:	280f883a 	mov	r7,r5
 8001608:	10003426 	beq	r2,zero,80016dc <memchr+0xdc>
 800160c:	30bfffc4 	addi	r2,r6,-1
 8001610:	30001a26 	beq	r6,zero,800167c <memchr+0x7c>
 8001614:	20c00003 	ldbu	r3,0(r4)
 8001618:	29803fcc 	andi	r6,r5,255
 800161c:	30c0051e 	bne	r6,r3,8001634 <memchr+0x34>
 8001620:	00001806 	br	8001684 <memchr+0x84>
 8001624:	10001526 	beq	r2,zero,800167c <memchr+0x7c>
 8001628:	20c00003 	ldbu	r3,0(r4)
 800162c:	10bfffc4 	addi	r2,r2,-1
 8001630:	30c01426 	beq	r6,r3,8001684 <memchr+0x84>
 8001634:	21000044 	addi	r4,r4,1
 8001638:	20c000cc 	andi	r3,r4,3
 800163c:	183ff91e 	bne	r3,zero,8001624 <memchr+0x24>
 8001640:	020000c4 	movi	r8,3
 8001644:	40801136 	bltu	r8,r2,800168c <memchr+0x8c>
 8001648:	10000c26 	beq	r2,zero,800167c <memchr+0x7c>
 800164c:	20c00003 	ldbu	r3,0(r4)
 8001650:	29403fcc 	andi	r5,r5,255
 8001654:	28c00b26 	beq	r5,r3,8001684 <memchr+0x84>
 8001658:	20c00044 	addi	r3,r4,1
 800165c:	39803fcc 	andi	r6,r7,255
 8001660:	2089883a 	add	r4,r4,r2
 8001664:	00000306 	br	8001674 <memchr+0x74>
 8001668:	18c00044 	addi	r3,r3,1
 800166c:	197fffc3 	ldbu	r5,-1(r3)
 8001670:	31400526 	beq	r6,r5,8001688 <memchr+0x88>
 8001674:	1805883a 	mov	r2,r3
 8001678:	20fffb1e 	bne	r4,r3,8001668 <memchr+0x68>
 800167c:	0005883a 	mov	r2,zero
 8001680:	f800283a 	ret
 8001684:	2005883a 	mov	r2,r4
 8001688:	f800283a 	ret
 800168c:	28c03fcc 	andi	r3,r5,255
 8001690:	1812923a 	slli	r9,r3,8
 8001694:	02ffbff4 	movhi	r11,65279
 8001698:	02a02074 	movhi	r10,32897
 800169c:	48d2b03a 	or	r9,r9,r3
 80016a0:	4806943a 	slli	r3,r9,16
 80016a4:	5affbfc4 	addi	r11,r11,-257
 80016a8:	52a02004 	addi	r10,r10,-32640
 80016ac:	48d2b03a 	or	r9,r9,r3
 80016b0:	20c00017 	ldw	r3,0(r4)
 80016b4:	48c6f03a 	xor	r3,r9,r3
 80016b8:	1acd883a 	add	r6,r3,r11
 80016bc:	00c6303a 	nor	r3,zero,r3
 80016c0:	30c6703a 	and	r3,r6,r3
 80016c4:	1a86703a 	and	r3,r3,r10
 80016c8:	183fe01e 	bne	r3,zero,800164c <memchr+0x4c>
 80016cc:	10bfff04 	addi	r2,r2,-4
 80016d0:	21000104 	addi	r4,r4,4
 80016d4:	40bff636 	bltu	r8,r2,80016b0 <memchr+0xb0>
 80016d8:	003fdb06 	br	8001648 <memchr+0x48>
 80016dc:	3005883a 	mov	r2,r6
 80016e0:	003fd706 	br	8001640 <memchr+0x40>

080016e4 <memcpy>:
 80016e4:	defffd04 	addi	sp,sp,-12
 80016e8:	dfc00215 	stw	ra,8(sp)
 80016ec:	dc400115 	stw	r17,4(sp)
 80016f0:	dc000015 	stw	r16,0(sp)
 80016f4:	00c003c4 	movi	r3,15
 80016f8:	2005883a 	mov	r2,r4
 80016fc:	1980452e 	bgeu	r3,r6,8001814 <memcpy+0x130>
 8001700:	2906b03a 	or	r3,r5,r4
 8001704:	18c000cc 	andi	r3,r3,3
 8001708:	1800441e 	bne	r3,zero,800181c <memcpy+0x138>
 800170c:	347ffc04 	addi	r17,r6,-16
 8001710:	8822d13a 	srli	r17,r17,4
 8001714:	28c00104 	addi	r3,r5,4
 8001718:	23400104 	addi	r13,r4,4
 800171c:	8820913a 	slli	r16,r17,4
 8001720:	2b000204 	addi	r12,r5,8
 8001724:	22c00204 	addi	r11,r4,8
 8001728:	84000504 	addi	r16,r16,20
 800172c:	2a800304 	addi	r10,r5,12
 8001730:	22400304 	addi	r9,r4,12
 8001734:	2c21883a 	add	r16,r5,r16
 8001738:	2811883a 	mov	r8,r5
 800173c:	200f883a 	mov	r7,r4
 8001740:	41000017 	ldw	r4,0(r8)
 8001744:	1fc00017 	ldw	ra,0(r3)
 8001748:	63c00017 	ldw	r15,0(r12)
 800174c:	39000015 	stw	r4,0(r7)
 8001750:	53800017 	ldw	r14,0(r10)
 8001754:	6fc00015 	stw	ra,0(r13)
 8001758:	5bc00015 	stw	r15,0(r11)
 800175c:	4b800015 	stw	r14,0(r9)
 8001760:	18c00404 	addi	r3,r3,16
 8001764:	39c00404 	addi	r7,r7,16
 8001768:	42000404 	addi	r8,r8,16
 800176c:	6b400404 	addi	r13,r13,16
 8001770:	63000404 	addi	r12,r12,16
 8001774:	5ac00404 	addi	r11,r11,16
 8001778:	52800404 	addi	r10,r10,16
 800177c:	4a400404 	addi	r9,r9,16
 8001780:	1c3fef1e 	bne	r3,r16,8001740 <memcpy+0x5c>
 8001784:	89c00044 	addi	r7,r17,1
 8001788:	380e913a 	slli	r7,r7,4
 800178c:	310003cc 	andi	r4,r6,15
 8001790:	02c000c4 	movi	r11,3
 8001794:	11c7883a 	add	r3,r2,r7
 8001798:	29cb883a 	add	r5,r5,r7
 800179c:	5900212e 	bgeu	r11,r4,8001824 <memcpy+0x140>
 80017a0:	1813883a 	mov	r9,r3
 80017a4:	2811883a 	mov	r8,r5
 80017a8:	200f883a 	mov	r7,r4
 80017ac:	42800017 	ldw	r10,0(r8)
 80017b0:	4a400104 	addi	r9,r9,4
 80017b4:	39ffff04 	addi	r7,r7,-4
 80017b8:	4abfff15 	stw	r10,-4(r9)
 80017bc:	42000104 	addi	r8,r8,4
 80017c0:	59fffa36 	bltu	r11,r7,80017ac <memcpy+0xc8>
 80017c4:	213fff04 	addi	r4,r4,-4
 80017c8:	2008d0ba 	srli	r4,r4,2
 80017cc:	318000cc 	andi	r6,r6,3
 80017d0:	21000044 	addi	r4,r4,1
 80017d4:	2109883a 	add	r4,r4,r4
 80017d8:	2109883a 	add	r4,r4,r4
 80017dc:	1907883a 	add	r3,r3,r4
 80017e0:	290b883a 	add	r5,r5,r4
 80017e4:	30000626 	beq	r6,zero,8001800 <memcpy+0x11c>
 80017e8:	198d883a 	add	r6,r3,r6
 80017ec:	29c00003 	ldbu	r7,0(r5)
 80017f0:	18c00044 	addi	r3,r3,1
 80017f4:	29400044 	addi	r5,r5,1
 80017f8:	19ffffc5 	stb	r7,-1(r3)
 80017fc:	19bffb1e 	bne	r3,r6,80017ec <memcpy+0x108>
 8001800:	dfc00217 	ldw	ra,8(sp)
 8001804:	dc400117 	ldw	r17,4(sp)
 8001808:	dc000017 	ldw	r16,0(sp)
 800180c:	dec00304 	addi	sp,sp,12
 8001810:	f800283a 	ret
 8001814:	2007883a 	mov	r3,r4
 8001818:	003ff206 	br	80017e4 <memcpy+0x100>
 800181c:	2007883a 	mov	r3,r4
 8001820:	003ff106 	br	80017e8 <memcpy+0x104>
 8001824:	200d883a 	mov	r6,r4
 8001828:	003fee06 	br	80017e4 <memcpy+0x100>

0800182c <memmove>:
 800182c:	2005883a 	mov	r2,r4
 8001830:	29000b2e 	bgeu	r5,r4,8001860 <memmove+0x34>
 8001834:	298f883a 	add	r7,r5,r6
 8001838:	21c0092e 	bgeu	r4,r7,8001860 <memmove+0x34>
 800183c:	2187883a 	add	r3,r4,r6
 8001840:	198bc83a 	sub	r5,r3,r6
 8001844:	30004826 	beq	r6,zero,8001968 <memmove+0x13c>
 8001848:	39ffffc4 	addi	r7,r7,-1
 800184c:	39000003 	ldbu	r4,0(r7)
 8001850:	18ffffc4 	addi	r3,r3,-1
 8001854:	19000005 	stb	r4,0(r3)
 8001858:	28fffb1e 	bne	r5,r3,8001848 <memmove+0x1c>
 800185c:	f800283a 	ret
 8001860:	00c003c4 	movi	r3,15
 8001864:	1980412e 	bgeu	r3,r6,800196c <memmove+0x140>
 8001868:	2886b03a 	or	r3,r5,r2
 800186c:	18c000cc 	andi	r3,r3,3
 8001870:	1800401e 	bne	r3,zero,8001974 <memmove+0x148>
 8001874:	33fffc04 	addi	r15,r6,-16
 8001878:	781ed13a 	srli	r15,r15,4
 800187c:	28c00104 	addi	r3,r5,4
 8001880:	13400104 	addi	r13,r2,4
 8001884:	781c913a 	slli	r14,r15,4
 8001888:	2b000204 	addi	r12,r5,8
 800188c:	12c00204 	addi	r11,r2,8
 8001890:	73800504 	addi	r14,r14,20
 8001894:	2a800304 	addi	r10,r5,12
 8001898:	12400304 	addi	r9,r2,12
 800189c:	2b9d883a 	add	r14,r5,r14
 80018a0:	2811883a 	mov	r8,r5
 80018a4:	100f883a 	mov	r7,r2
 80018a8:	41000017 	ldw	r4,0(r8)
 80018ac:	39c00404 	addi	r7,r7,16
 80018b0:	18c00404 	addi	r3,r3,16
 80018b4:	393ffc15 	stw	r4,-16(r7)
 80018b8:	193ffc17 	ldw	r4,-16(r3)
 80018bc:	6b400404 	addi	r13,r13,16
 80018c0:	5ac00404 	addi	r11,r11,16
 80018c4:	693ffc15 	stw	r4,-16(r13)
 80018c8:	61000017 	ldw	r4,0(r12)
 80018cc:	4a400404 	addi	r9,r9,16
 80018d0:	42000404 	addi	r8,r8,16
 80018d4:	593ffc15 	stw	r4,-16(r11)
 80018d8:	51000017 	ldw	r4,0(r10)
 80018dc:	63000404 	addi	r12,r12,16
 80018e0:	52800404 	addi	r10,r10,16
 80018e4:	493ffc15 	stw	r4,-16(r9)
 80018e8:	1bbfef1e 	bne	r3,r14,80018a8 <memmove+0x7c>
 80018ec:	79000044 	addi	r4,r15,1
 80018f0:	2008913a 	slli	r4,r4,4
 80018f4:	328003cc 	andi	r10,r6,15
 80018f8:	02c000c4 	movi	r11,3
 80018fc:	1107883a 	add	r3,r2,r4
 8001900:	290b883a 	add	r5,r5,r4
 8001904:	5a801e2e 	bgeu	r11,r10,8001980 <memmove+0x154>
 8001908:	1813883a 	mov	r9,r3
 800190c:	2811883a 	mov	r8,r5
 8001910:	500f883a 	mov	r7,r10
 8001914:	41000017 	ldw	r4,0(r8)
 8001918:	4a400104 	addi	r9,r9,4
 800191c:	39ffff04 	addi	r7,r7,-4
 8001920:	493fff15 	stw	r4,-4(r9)
 8001924:	42000104 	addi	r8,r8,4
 8001928:	59fffa36 	bltu	r11,r7,8001914 <memmove+0xe8>
 800192c:	513fff04 	addi	r4,r10,-4
 8001930:	2008d0ba 	srli	r4,r4,2
 8001934:	318000cc 	andi	r6,r6,3
 8001938:	21000044 	addi	r4,r4,1
 800193c:	2109883a 	add	r4,r4,r4
 8001940:	2109883a 	add	r4,r4,r4
 8001944:	1907883a 	add	r3,r3,r4
 8001948:	290b883a 	add	r5,r5,r4
 800194c:	30000b26 	beq	r6,zero,800197c <memmove+0x150>
 8001950:	198d883a 	add	r6,r3,r6
 8001954:	29c00003 	ldbu	r7,0(r5)
 8001958:	18c00044 	addi	r3,r3,1
 800195c:	29400044 	addi	r5,r5,1
 8001960:	19ffffc5 	stb	r7,-1(r3)
 8001964:	19bffb1e 	bne	r3,r6,8001954 <memmove+0x128>
 8001968:	f800283a 	ret
 800196c:	1007883a 	mov	r3,r2
 8001970:	003ff606 	br	800194c <memmove+0x120>
 8001974:	1007883a 	mov	r3,r2
 8001978:	003ff506 	br	8001950 <memmove+0x124>
 800197c:	f800283a 	ret
 8001980:	500d883a 	mov	r6,r10
 8001984:	003ff106 	br	800194c <memmove+0x120>

08001988 <memset>:
 8001988:	20c000cc 	andi	r3,r4,3
 800198c:	2005883a 	mov	r2,r4
 8001990:	18004426 	beq	r3,zero,8001aa4 <memset+0x11c>
 8001994:	31ffffc4 	addi	r7,r6,-1
 8001998:	30004026 	beq	r6,zero,8001a9c <memset+0x114>
 800199c:	2813883a 	mov	r9,r5
 80019a0:	200d883a 	mov	r6,r4
 80019a4:	2007883a 	mov	r3,r4
 80019a8:	00000406 	br	80019bc <memset+0x34>
 80019ac:	3a3fffc4 	addi	r8,r7,-1
 80019b0:	31800044 	addi	r6,r6,1
 80019b4:	38003926 	beq	r7,zero,8001a9c <memset+0x114>
 80019b8:	400f883a 	mov	r7,r8
 80019bc:	18c00044 	addi	r3,r3,1
 80019c0:	32400005 	stb	r9,0(r6)
 80019c4:	1a0000cc 	andi	r8,r3,3
 80019c8:	403ff81e 	bne	r8,zero,80019ac <memset+0x24>
 80019cc:	010000c4 	movi	r4,3
 80019d0:	21c02d2e 	bgeu	r4,r7,8001a88 <memset+0x100>
 80019d4:	29003fcc 	andi	r4,r5,255
 80019d8:	200c923a 	slli	r6,r4,8
 80019dc:	3108b03a 	or	r4,r6,r4
 80019e0:	200c943a 	slli	r6,r4,16
 80019e4:	218cb03a 	or	r6,r4,r6
 80019e8:	010003c4 	movi	r4,15
 80019ec:	21c0182e 	bgeu	r4,r7,8001a50 <memset+0xc8>
 80019f0:	3b3ffc04 	addi	r12,r7,-16
 80019f4:	6018d13a 	srli	r12,r12,4
 80019f8:	1a000104 	addi	r8,r3,4
 80019fc:	1ac00204 	addi	r11,r3,8
 8001a00:	6008913a 	slli	r4,r12,4
 8001a04:	1a800304 	addi	r10,r3,12
 8001a08:	1813883a 	mov	r9,r3
 8001a0c:	21000504 	addi	r4,r4,20
 8001a10:	1909883a 	add	r4,r3,r4
 8001a14:	49800015 	stw	r6,0(r9)
 8001a18:	41800015 	stw	r6,0(r8)
 8001a1c:	59800015 	stw	r6,0(r11)
 8001a20:	51800015 	stw	r6,0(r10)
 8001a24:	42000404 	addi	r8,r8,16
 8001a28:	4a400404 	addi	r9,r9,16
 8001a2c:	5ac00404 	addi	r11,r11,16
 8001a30:	52800404 	addi	r10,r10,16
 8001a34:	413ff71e 	bne	r8,r4,8001a14 <memset+0x8c>
 8001a38:	63000044 	addi	r12,r12,1
 8001a3c:	6018913a 	slli	r12,r12,4
 8001a40:	39c003cc 	andi	r7,r7,15
 8001a44:	010000c4 	movi	r4,3
 8001a48:	1b07883a 	add	r3,r3,r12
 8001a4c:	21c00e2e 	bgeu	r4,r7,8001a88 <memset+0x100>
 8001a50:	1813883a 	mov	r9,r3
 8001a54:	3811883a 	mov	r8,r7
 8001a58:	010000c4 	movi	r4,3
 8001a5c:	49800015 	stw	r6,0(r9)
 8001a60:	423fff04 	addi	r8,r8,-4
 8001a64:	4a400104 	addi	r9,r9,4
 8001a68:	223ffc36 	bltu	r4,r8,8001a5c <memset+0xd4>
 8001a6c:	393fff04 	addi	r4,r7,-4
 8001a70:	2008d0ba 	srli	r4,r4,2
 8001a74:	39c000cc 	andi	r7,r7,3
 8001a78:	21000044 	addi	r4,r4,1
 8001a7c:	2109883a 	add	r4,r4,r4
 8001a80:	2109883a 	add	r4,r4,r4
 8001a84:	1907883a 	add	r3,r3,r4
 8001a88:	38000526 	beq	r7,zero,8001aa0 <memset+0x118>
 8001a8c:	19cf883a 	add	r7,r3,r7
 8001a90:	19400005 	stb	r5,0(r3)
 8001a94:	18c00044 	addi	r3,r3,1
 8001a98:	38fffd1e 	bne	r7,r3,8001a90 <memset+0x108>
 8001a9c:	f800283a 	ret
 8001aa0:	f800283a 	ret
 8001aa4:	2007883a 	mov	r3,r4
 8001aa8:	300f883a 	mov	r7,r6
 8001aac:	003fc706 	br	80019cc <memset+0x44>

08001ab0 <_realloc_r>:
 8001ab0:	defff604 	addi	sp,sp,-40
 8001ab4:	dc800215 	stw	r18,8(sp)
 8001ab8:	dfc00915 	stw	ra,36(sp)
 8001abc:	df000815 	stw	fp,32(sp)
 8001ac0:	ddc00715 	stw	r23,28(sp)
 8001ac4:	dd800615 	stw	r22,24(sp)
 8001ac8:	dd400515 	stw	r21,20(sp)
 8001acc:	dd000415 	stw	r20,16(sp)
 8001ad0:	dcc00315 	stw	r19,12(sp)
 8001ad4:	dc400115 	stw	r17,4(sp)
 8001ad8:	dc000015 	stw	r16,0(sp)
 8001adc:	3025883a 	mov	r18,r6
 8001ae0:	2800b726 	beq	r5,zero,8001dc0 <_realloc_r+0x310>
 8001ae4:	282b883a 	mov	r21,r5
 8001ae8:	2029883a 	mov	r20,r4
 8001aec:	80036300 	call	8003630 <__malloc_lock>
 8001af0:	a8bfff17 	ldw	r2,-4(r21)
 8001af4:	043fff04 	movi	r16,-4
 8001af8:	90c002c4 	addi	r3,r18,11
 8001afc:	01000584 	movi	r4,22
 8001b00:	acfffe04 	addi	r19,r21,-8
 8001b04:	1420703a 	and	r16,r2,r16
 8001b08:	20c0332e 	bgeu	r4,r3,8001bd8 <_realloc_r+0x128>
 8001b0c:	047ffe04 	movi	r17,-8
 8001b10:	1c62703a 	and	r17,r3,r17
 8001b14:	8807883a 	mov	r3,r17
 8001b18:	88005816 	blt	r17,zero,8001c7c <_realloc_r+0x1cc>
 8001b1c:	8c805736 	bltu	r17,r18,8001c7c <_realloc_r+0x1cc>
 8001b20:	80c0300e 	bge	r16,r3,8001be4 <_realloc_r+0x134>
 8001b24:	07020034 	movhi	fp,2048
 8001b28:	e71b2504 	addi	fp,fp,27796
 8001b2c:	e1c00217 	ldw	r7,8(fp)
 8001b30:	9c09883a 	add	r4,r19,r16
 8001b34:	22000117 	ldw	r8,4(r4)
 8001b38:	21c06326 	beq	r4,r7,8001cc8 <_realloc_r+0x218>
 8001b3c:	017fff84 	movi	r5,-2
 8001b40:	414a703a 	and	r5,r8,r5
 8001b44:	214b883a 	add	r5,r4,r5
 8001b48:	29800117 	ldw	r6,4(r5)
 8001b4c:	3180004c 	andi	r6,r6,1
 8001b50:	30003f26 	beq	r6,zero,8001c50 <_realloc_r+0x1a0>
 8001b54:	1080004c 	andi	r2,r2,1
 8001b58:	10008326 	beq	r2,zero,8001d68 <_realloc_r+0x2b8>
 8001b5c:	900b883a 	mov	r5,r18
 8001b60:	a009883a 	mov	r4,r20
 8001b64:	8000df40 	call	8000df4 <_malloc_r>
 8001b68:	1025883a 	mov	r18,r2
 8001b6c:	10011e26 	beq	r2,zero,8001fe8 <_realloc_r+0x538>
 8001b70:	a93fff17 	ldw	r4,-4(r21)
 8001b74:	10fffe04 	addi	r3,r2,-8
 8001b78:	00bfff84 	movi	r2,-2
 8001b7c:	2084703a 	and	r2,r4,r2
 8001b80:	9885883a 	add	r2,r19,r2
 8001b84:	1880ee26 	beq	r3,r2,8001f40 <_realloc_r+0x490>
 8001b88:	81bfff04 	addi	r6,r16,-4
 8001b8c:	00800904 	movi	r2,36
 8001b90:	1180b836 	bltu	r2,r6,8001e74 <_realloc_r+0x3c4>
 8001b94:	00c004c4 	movi	r3,19
 8001b98:	19809636 	bltu	r3,r6,8001df4 <_realloc_r+0x344>
 8001b9c:	9005883a 	mov	r2,r18
 8001ba0:	a807883a 	mov	r3,r21
 8001ba4:	19000017 	ldw	r4,0(r3)
 8001ba8:	11000015 	stw	r4,0(r2)
 8001bac:	19000117 	ldw	r4,4(r3)
 8001bb0:	11000115 	stw	r4,4(r2)
 8001bb4:	18c00217 	ldw	r3,8(r3)
 8001bb8:	10c00215 	stw	r3,8(r2)
 8001bbc:	a80b883a 	mov	r5,r21
 8001bc0:	a009883a 	mov	r4,r20
 8001bc4:	800287c0 	call	800287c <_free_r>
 8001bc8:	a009883a 	mov	r4,r20
 8001bcc:	80036540 	call	8003654 <__malloc_unlock>
 8001bd0:	9005883a 	mov	r2,r18
 8001bd4:	00001206 	br	8001c20 <_realloc_r+0x170>
 8001bd8:	00c00404 	movi	r3,16
 8001bdc:	1823883a 	mov	r17,r3
 8001be0:	003fce06 	br	8001b1c <_realloc_r+0x6c>
 8001be4:	a825883a 	mov	r18,r21
 8001be8:	8445c83a 	sub	r2,r16,r17
 8001bec:	00c003c4 	movi	r3,15
 8001bf0:	18802636 	bltu	r3,r2,8001c8c <_realloc_r+0x1dc>
 8001bf4:	99800117 	ldw	r6,4(r19)
 8001bf8:	9c07883a 	add	r3,r19,r16
 8001bfc:	3180004c 	andi	r6,r6,1
 8001c00:	3420b03a 	or	r16,r6,r16
 8001c04:	9c000115 	stw	r16,4(r19)
 8001c08:	18800117 	ldw	r2,4(r3)
 8001c0c:	10800054 	ori	r2,r2,1
 8001c10:	18800115 	stw	r2,4(r3)
 8001c14:	a009883a 	mov	r4,r20
 8001c18:	80036540 	call	8003654 <__malloc_unlock>
 8001c1c:	9005883a 	mov	r2,r18
 8001c20:	dfc00917 	ldw	ra,36(sp)
 8001c24:	df000817 	ldw	fp,32(sp)
 8001c28:	ddc00717 	ldw	r23,28(sp)
 8001c2c:	dd800617 	ldw	r22,24(sp)
 8001c30:	dd400517 	ldw	r21,20(sp)
 8001c34:	dd000417 	ldw	r20,16(sp)
 8001c38:	dcc00317 	ldw	r19,12(sp)
 8001c3c:	dc800217 	ldw	r18,8(sp)
 8001c40:	dc400117 	ldw	r17,4(sp)
 8001c44:	dc000017 	ldw	r16,0(sp)
 8001c48:	dec00a04 	addi	sp,sp,40
 8001c4c:	f800283a 	ret
 8001c50:	017fff04 	movi	r5,-4
 8001c54:	414a703a 	and	r5,r8,r5
 8001c58:	814d883a 	add	r6,r16,r5
 8001c5c:	30c01f16 	blt	r6,r3,8001cdc <_realloc_r+0x22c>
 8001c60:	20800317 	ldw	r2,12(r4)
 8001c64:	20c00217 	ldw	r3,8(r4)
 8001c68:	a825883a 	mov	r18,r21
 8001c6c:	3021883a 	mov	r16,r6
 8001c70:	18800315 	stw	r2,12(r3)
 8001c74:	10c00215 	stw	r3,8(r2)
 8001c78:	003fdb06 	br	8001be8 <_realloc_r+0x138>
 8001c7c:	00800304 	movi	r2,12
 8001c80:	a0800015 	stw	r2,0(r20)
 8001c84:	0005883a 	mov	r2,zero
 8001c88:	003fe506 	br	8001c20 <_realloc_r+0x170>
 8001c8c:	98c00117 	ldw	r3,4(r19)
 8001c90:	9c4b883a 	add	r5,r19,r17
 8001c94:	11000054 	ori	r4,r2,1
 8001c98:	18c0004c 	andi	r3,r3,1
 8001c9c:	1c62b03a 	or	r17,r3,r17
 8001ca0:	9c400115 	stw	r17,4(r19)
 8001ca4:	29000115 	stw	r4,4(r5)
 8001ca8:	2885883a 	add	r2,r5,r2
 8001cac:	10c00117 	ldw	r3,4(r2)
 8001cb0:	29400204 	addi	r5,r5,8
 8001cb4:	a009883a 	mov	r4,r20
 8001cb8:	18c00054 	ori	r3,r3,1
 8001cbc:	10c00115 	stw	r3,4(r2)
 8001cc0:	800287c0 	call	800287c <_free_r>
 8001cc4:	003fd306 	br	8001c14 <_realloc_r+0x164>
 8001cc8:	017fff04 	movi	r5,-4
 8001ccc:	414a703a 	and	r5,r8,r5
 8001cd0:	89800404 	addi	r6,r17,16
 8001cd4:	8151883a 	add	r8,r16,r5
 8001cd8:	4180590e 	bge	r8,r6,8001e40 <_realloc_r+0x390>
 8001cdc:	1080004c 	andi	r2,r2,1
 8001ce0:	103f9e1e 	bne	r2,zero,8001b5c <_realloc_r+0xac>
 8001ce4:	adbffe17 	ldw	r22,-8(r21)
 8001ce8:	00bfff04 	movi	r2,-4
 8001cec:	9dadc83a 	sub	r22,r19,r22
 8001cf0:	b1800117 	ldw	r6,4(r22)
 8001cf4:	3084703a 	and	r2,r6,r2
 8001cf8:	20002026 	beq	r4,zero,8001d7c <_realloc_r+0x2cc>
 8001cfc:	80af883a 	add	r23,r16,r2
 8001d00:	b96f883a 	add	r23,r23,r5
 8001d04:	21c05f26 	beq	r4,r7,8001e84 <_realloc_r+0x3d4>
 8001d08:	b8c01c16 	blt	r23,r3,8001d7c <_realloc_r+0x2cc>
 8001d0c:	20800317 	ldw	r2,12(r4)
 8001d10:	20c00217 	ldw	r3,8(r4)
 8001d14:	81bfff04 	addi	r6,r16,-4
 8001d18:	01000904 	movi	r4,36
 8001d1c:	18800315 	stw	r2,12(r3)
 8001d20:	10c00215 	stw	r3,8(r2)
 8001d24:	b0c00217 	ldw	r3,8(r22)
 8001d28:	b0800317 	ldw	r2,12(r22)
 8001d2c:	b4800204 	addi	r18,r22,8
 8001d30:	18800315 	stw	r2,12(r3)
 8001d34:	10c00215 	stw	r3,8(r2)
 8001d38:	21801b36 	bltu	r4,r6,8001da8 <_realloc_r+0x2f8>
 8001d3c:	008004c4 	movi	r2,19
 8001d40:	1180352e 	bgeu	r2,r6,8001e18 <_realloc_r+0x368>
 8001d44:	a8800017 	ldw	r2,0(r21)
 8001d48:	b0800215 	stw	r2,8(r22)
 8001d4c:	a8800117 	ldw	r2,4(r21)
 8001d50:	b0800315 	stw	r2,12(r22)
 8001d54:	008006c4 	movi	r2,27
 8001d58:	11807f36 	bltu	r2,r6,8001f58 <_realloc_r+0x4a8>
 8001d5c:	b0800404 	addi	r2,r22,16
 8001d60:	ad400204 	addi	r21,r21,8
 8001d64:	00002d06 	br	8001e1c <_realloc_r+0x36c>
 8001d68:	adbffe17 	ldw	r22,-8(r21)
 8001d6c:	00bfff04 	movi	r2,-4
 8001d70:	9dadc83a 	sub	r22,r19,r22
 8001d74:	b1000117 	ldw	r4,4(r22)
 8001d78:	2084703a 	and	r2,r4,r2
 8001d7c:	b03f7726 	beq	r22,zero,8001b5c <_realloc_r+0xac>
 8001d80:	80af883a 	add	r23,r16,r2
 8001d84:	b8ff7516 	blt	r23,r3,8001b5c <_realloc_r+0xac>
 8001d88:	b0800317 	ldw	r2,12(r22)
 8001d8c:	b0c00217 	ldw	r3,8(r22)
 8001d90:	81bfff04 	addi	r6,r16,-4
 8001d94:	01000904 	movi	r4,36
 8001d98:	18800315 	stw	r2,12(r3)
 8001d9c:	10c00215 	stw	r3,8(r2)
 8001da0:	b4800204 	addi	r18,r22,8
 8001da4:	21bfe52e 	bgeu	r4,r6,8001d3c <_realloc_r+0x28c>
 8001da8:	a80b883a 	mov	r5,r21
 8001dac:	9009883a 	mov	r4,r18
 8001db0:	800182c0 	call	800182c <memmove>
 8001db4:	b821883a 	mov	r16,r23
 8001db8:	b027883a 	mov	r19,r22
 8001dbc:	003f8a06 	br	8001be8 <_realloc_r+0x138>
 8001dc0:	300b883a 	mov	r5,r6
 8001dc4:	dfc00917 	ldw	ra,36(sp)
 8001dc8:	df000817 	ldw	fp,32(sp)
 8001dcc:	ddc00717 	ldw	r23,28(sp)
 8001dd0:	dd800617 	ldw	r22,24(sp)
 8001dd4:	dd400517 	ldw	r21,20(sp)
 8001dd8:	dd000417 	ldw	r20,16(sp)
 8001ddc:	dcc00317 	ldw	r19,12(sp)
 8001de0:	dc800217 	ldw	r18,8(sp)
 8001de4:	dc400117 	ldw	r17,4(sp)
 8001de8:	dc000017 	ldw	r16,0(sp)
 8001dec:	dec00a04 	addi	sp,sp,40
 8001df0:	8000df41 	jmpi	8000df4 <_malloc_r>
 8001df4:	a8c00017 	ldw	r3,0(r21)
 8001df8:	90c00015 	stw	r3,0(r18)
 8001dfc:	a8c00117 	ldw	r3,4(r21)
 8001e00:	90c00115 	stw	r3,4(r18)
 8001e04:	00c006c4 	movi	r3,27
 8001e08:	19804536 	bltu	r3,r6,8001f20 <_realloc_r+0x470>
 8001e0c:	90800204 	addi	r2,r18,8
 8001e10:	a8c00204 	addi	r3,r21,8
 8001e14:	003f6306 	br	8001ba4 <_realloc_r+0xf4>
 8001e18:	9005883a 	mov	r2,r18
 8001e1c:	a8c00017 	ldw	r3,0(r21)
 8001e20:	b821883a 	mov	r16,r23
 8001e24:	b027883a 	mov	r19,r22
 8001e28:	10c00015 	stw	r3,0(r2)
 8001e2c:	a8c00117 	ldw	r3,4(r21)
 8001e30:	10c00115 	stw	r3,4(r2)
 8001e34:	a8c00217 	ldw	r3,8(r21)
 8001e38:	10c00215 	stw	r3,8(r2)
 8001e3c:	003f6a06 	br	8001be8 <_realloc_r+0x138>
 8001e40:	9c67883a 	add	r19,r19,r17
 8001e44:	4445c83a 	sub	r2,r8,r17
 8001e48:	e4c00215 	stw	r19,8(fp)
 8001e4c:	10800054 	ori	r2,r2,1
 8001e50:	98800115 	stw	r2,4(r19)
 8001e54:	a8bfff17 	ldw	r2,-4(r21)
 8001e58:	a009883a 	mov	r4,r20
 8001e5c:	1080004c 	andi	r2,r2,1
 8001e60:	1462b03a 	or	r17,r2,r17
 8001e64:	ac7fff15 	stw	r17,-4(r21)
 8001e68:	80036540 	call	8003654 <__malloc_unlock>
 8001e6c:	a805883a 	mov	r2,r21
 8001e70:	003f6b06 	br	8001c20 <_realloc_r+0x170>
 8001e74:	a80b883a 	mov	r5,r21
 8001e78:	9009883a 	mov	r4,r18
 8001e7c:	800182c0 	call	800182c <memmove>
 8001e80:	003f4e06 	br	8001bbc <_realloc_r+0x10c>
 8001e84:	89000404 	addi	r4,r17,16
 8001e88:	b93fbc16 	blt	r23,r4,8001d7c <_realloc_r+0x2cc>
 8001e8c:	b0800317 	ldw	r2,12(r22)
 8001e90:	b0c00217 	ldw	r3,8(r22)
 8001e94:	81bfff04 	addi	r6,r16,-4
 8001e98:	01000904 	movi	r4,36
 8001e9c:	18800315 	stw	r2,12(r3)
 8001ea0:	10c00215 	stw	r3,8(r2)
 8001ea4:	b4800204 	addi	r18,r22,8
 8001ea8:	21804336 	bltu	r4,r6,8001fb8 <_realloc_r+0x508>
 8001eac:	008004c4 	movi	r2,19
 8001eb0:	11803f2e 	bgeu	r2,r6,8001fb0 <_realloc_r+0x500>
 8001eb4:	a8800017 	ldw	r2,0(r21)
 8001eb8:	b0800215 	stw	r2,8(r22)
 8001ebc:	a8800117 	ldw	r2,4(r21)
 8001ec0:	b0800315 	stw	r2,12(r22)
 8001ec4:	008006c4 	movi	r2,27
 8001ec8:	11803f36 	bltu	r2,r6,8001fc8 <_realloc_r+0x518>
 8001ecc:	b0800404 	addi	r2,r22,16
 8001ed0:	ad400204 	addi	r21,r21,8
 8001ed4:	a8c00017 	ldw	r3,0(r21)
 8001ed8:	10c00015 	stw	r3,0(r2)
 8001edc:	a8c00117 	ldw	r3,4(r21)
 8001ee0:	10c00115 	stw	r3,4(r2)
 8001ee4:	a8c00217 	ldw	r3,8(r21)
 8001ee8:	10c00215 	stw	r3,8(r2)
 8001eec:	b447883a 	add	r3,r22,r17
 8001ef0:	bc45c83a 	sub	r2,r23,r17
 8001ef4:	e0c00215 	stw	r3,8(fp)
 8001ef8:	10800054 	ori	r2,r2,1
 8001efc:	18800115 	stw	r2,4(r3)
 8001f00:	b0800117 	ldw	r2,4(r22)
 8001f04:	a009883a 	mov	r4,r20
 8001f08:	1080004c 	andi	r2,r2,1
 8001f0c:	1462b03a 	or	r17,r2,r17
 8001f10:	b4400115 	stw	r17,4(r22)
 8001f14:	80036540 	call	8003654 <__malloc_unlock>
 8001f18:	9005883a 	mov	r2,r18
 8001f1c:	003f4006 	br	8001c20 <_realloc_r+0x170>
 8001f20:	a8c00217 	ldw	r3,8(r21)
 8001f24:	90c00215 	stw	r3,8(r18)
 8001f28:	a8c00317 	ldw	r3,12(r21)
 8001f2c:	90c00315 	stw	r3,12(r18)
 8001f30:	30801126 	beq	r6,r2,8001f78 <_realloc_r+0x4c8>
 8001f34:	90800404 	addi	r2,r18,16
 8001f38:	a8c00404 	addi	r3,r21,16
 8001f3c:	003f1906 	br	8001ba4 <_realloc_r+0xf4>
 8001f40:	90ffff17 	ldw	r3,-4(r18)
 8001f44:	00bfff04 	movi	r2,-4
 8001f48:	a825883a 	mov	r18,r21
 8001f4c:	1884703a 	and	r2,r3,r2
 8001f50:	80a1883a 	add	r16,r16,r2
 8001f54:	003f2406 	br	8001be8 <_realloc_r+0x138>
 8001f58:	a8800217 	ldw	r2,8(r21)
 8001f5c:	b0800415 	stw	r2,16(r22)
 8001f60:	a8800317 	ldw	r2,12(r21)
 8001f64:	b0800515 	stw	r2,20(r22)
 8001f68:	31000a26 	beq	r6,r4,8001f94 <_realloc_r+0x4e4>
 8001f6c:	b0800604 	addi	r2,r22,24
 8001f70:	ad400404 	addi	r21,r21,16
 8001f74:	003fa906 	br	8001e1c <_realloc_r+0x36c>
 8001f78:	a9000417 	ldw	r4,16(r21)
 8001f7c:	90800604 	addi	r2,r18,24
 8001f80:	a8c00604 	addi	r3,r21,24
 8001f84:	91000415 	stw	r4,16(r18)
 8001f88:	a9000517 	ldw	r4,20(r21)
 8001f8c:	91000515 	stw	r4,20(r18)
 8001f90:	003f0406 	br	8001ba4 <_realloc_r+0xf4>
 8001f94:	a8c00417 	ldw	r3,16(r21)
 8001f98:	ad400604 	addi	r21,r21,24
 8001f9c:	b0800804 	addi	r2,r22,32
 8001fa0:	b0c00615 	stw	r3,24(r22)
 8001fa4:	a8ffff17 	ldw	r3,-4(r21)
 8001fa8:	b0c00715 	stw	r3,28(r22)
 8001fac:	003f9b06 	br	8001e1c <_realloc_r+0x36c>
 8001fb0:	9005883a 	mov	r2,r18
 8001fb4:	003fc706 	br	8001ed4 <_realloc_r+0x424>
 8001fb8:	a80b883a 	mov	r5,r21
 8001fbc:	9009883a 	mov	r4,r18
 8001fc0:	800182c0 	call	800182c <memmove>
 8001fc4:	003fc906 	br	8001eec <_realloc_r+0x43c>
 8001fc8:	a8800217 	ldw	r2,8(r21)
 8001fcc:	b0800415 	stw	r2,16(r22)
 8001fd0:	a8800317 	ldw	r2,12(r21)
 8001fd4:	b0800515 	stw	r2,20(r22)
 8001fd8:	31000726 	beq	r6,r4,8001ff8 <_realloc_r+0x548>
 8001fdc:	b0800604 	addi	r2,r22,24
 8001fe0:	ad400404 	addi	r21,r21,16
 8001fe4:	003fbb06 	br	8001ed4 <_realloc_r+0x424>
 8001fe8:	a009883a 	mov	r4,r20
 8001fec:	80036540 	call	8003654 <__malloc_unlock>
 8001ff0:	0005883a 	mov	r2,zero
 8001ff4:	003f0a06 	br	8001c20 <_realloc_r+0x170>
 8001ff8:	a8c00417 	ldw	r3,16(r21)
 8001ffc:	ad400604 	addi	r21,r21,24
 8002000:	b0800804 	addi	r2,r22,32
 8002004:	b0c00615 	stw	r3,24(r22)
 8002008:	a8ffff17 	ldw	r3,-4(r21)
 800200c:	b0c00715 	stw	r3,28(r22)
 8002010:	003fb006 	br	8001ed4 <_realloc_r+0x424>

08002014 <_sbrk_r>:
 8002014:	defffd04 	addi	sp,sp,-12
 8002018:	dc000015 	stw	r16,0(sp)
 800201c:	04020074 	movhi	r16,2049
 8002020:	dc400115 	stw	r17,4(sp)
 8002024:	84277f04 	addi	r16,r16,-25092
 8002028:	2023883a 	mov	r17,r4
 800202c:	2809883a 	mov	r4,r5
 8002030:	dfc00215 	stw	ra,8(sp)
 8002034:	80000015 	stw	zero,0(r16)
 8002038:	800383c0 	call	800383c <sbrk>
 800203c:	00ffffc4 	movi	r3,-1
 8002040:	10c00526 	beq	r2,r3,8002058 <_sbrk_r+0x44>
 8002044:	dfc00217 	ldw	ra,8(sp)
 8002048:	dc400117 	ldw	r17,4(sp)
 800204c:	dc000017 	ldw	r16,0(sp)
 8002050:	dec00304 	addi	sp,sp,12
 8002054:	f800283a 	ret
 8002058:	80c00017 	ldw	r3,0(r16)
 800205c:	183ff926 	beq	r3,zero,8002044 <_sbrk_r+0x30>
 8002060:	88c00015 	stw	r3,0(r17)
 8002064:	003ff706 	br	8002044 <_sbrk_r+0x30>

08002068 <__sread>:
 8002068:	defffe04 	addi	sp,sp,-8
 800206c:	dc000015 	stw	r16,0(sp)
 8002070:	2821883a 	mov	r16,r5
 8002074:	2940038f 	ldh	r5,14(r5)
 8002078:	dfc00115 	stw	ra,4(sp)
 800207c:	8002da80 	call	8002da8 <_read_r>
 8002080:	10000716 	blt	r2,zero,80020a0 <__sread+0x38>
 8002084:	80c01417 	ldw	r3,80(r16)
 8002088:	1887883a 	add	r3,r3,r2
 800208c:	80c01415 	stw	r3,80(r16)
 8002090:	dfc00117 	ldw	ra,4(sp)
 8002094:	dc000017 	ldw	r16,0(sp)
 8002098:	dec00204 	addi	sp,sp,8
 800209c:	f800283a 	ret
 80020a0:	80c0030b 	ldhu	r3,12(r16)
 80020a4:	18fbffcc 	andi	r3,r3,61439
 80020a8:	80c0030d 	sth	r3,12(r16)
 80020ac:	dfc00117 	ldw	ra,4(sp)
 80020b0:	dc000017 	ldw	r16,0(sp)
 80020b4:	dec00204 	addi	sp,sp,8
 80020b8:	f800283a 	ret

080020bc <__seofread>:
 80020bc:	0005883a 	mov	r2,zero
 80020c0:	f800283a 	ret

080020c4 <__swrite>:
 80020c4:	2880030b 	ldhu	r2,12(r5)
 80020c8:	defffb04 	addi	sp,sp,-20
 80020cc:	dcc00315 	stw	r19,12(sp)
 80020d0:	dc800215 	stw	r18,8(sp)
 80020d4:	dc400115 	stw	r17,4(sp)
 80020d8:	dc000015 	stw	r16,0(sp)
 80020dc:	dfc00415 	stw	ra,16(sp)
 80020e0:	10c0400c 	andi	r3,r2,256
 80020e4:	2821883a 	mov	r16,r5
 80020e8:	2023883a 	mov	r17,r4
 80020ec:	3025883a 	mov	r18,r6
 80020f0:	3827883a 	mov	r19,r7
 80020f4:	18000526 	beq	r3,zero,800210c <__swrite+0x48>
 80020f8:	2940038f 	ldh	r5,14(r5)
 80020fc:	01c00084 	movi	r7,2
 8002100:	000d883a 	mov	r6,zero
 8002104:	8002b8c0 	call	8002b8c <_lseek_r>
 8002108:	8080030b 	ldhu	r2,12(r16)
 800210c:	8140038f 	ldh	r5,14(r16)
 8002110:	10bbffcc 	andi	r2,r2,61439
 8002114:	980f883a 	mov	r7,r19
 8002118:	900d883a 	mov	r6,r18
 800211c:	8809883a 	mov	r4,r17
 8002120:	8080030d 	sth	r2,12(r16)
 8002124:	dfc00417 	ldw	ra,16(sp)
 8002128:	dcc00317 	ldw	r19,12(sp)
 800212c:	dc800217 	ldw	r18,8(sp)
 8002130:	dc400117 	ldw	r17,4(sp)
 8002134:	dc000017 	ldw	r16,0(sp)
 8002138:	dec00504 	addi	sp,sp,20
 800213c:	80021a41 	jmpi	80021a4 <_write_r>

08002140 <__sseek>:
 8002140:	defffe04 	addi	sp,sp,-8
 8002144:	dc000015 	stw	r16,0(sp)
 8002148:	2821883a 	mov	r16,r5
 800214c:	2940038f 	ldh	r5,14(r5)
 8002150:	dfc00115 	stw	ra,4(sp)
 8002154:	8002b8c0 	call	8002b8c <_lseek_r>
 8002158:	00ffffc4 	movi	r3,-1
 800215c:	10c00826 	beq	r2,r3,8002180 <__sseek+0x40>
 8002160:	80c0030b 	ldhu	r3,12(r16)
 8002164:	80801415 	stw	r2,80(r16)
 8002168:	18c40014 	ori	r3,r3,4096
 800216c:	80c0030d 	sth	r3,12(r16)
 8002170:	dfc00117 	ldw	ra,4(sp)
 8002174:	dc000017 	ldw	r16,0(sp)
 8002178:	dec00204 	addi	sp,sp,8
 800217c:	f800283a 	ret
 8002180:	80c0030b 	ldhu	r3,12(r16)
 8002184:	18fbffcc 	andi	r3,r3,61439
 8002188:	80c0030d 	sth	r3,12(r16)
 800218c:	dfc00117 	ldw	ra,4(sp)
 8002190:	dc000017 	ldw	r16,0(sp)
 8002194:	dec00204 	addi	sp,sp,8
 8002198:	f800283a 	ret

0800219c <__sclose>:
 800219c:	2940038f 	ldh	r5,14(r5)
 80021a0:	80023581 	jmpi	8002358 <_close_r>

080021a4 <_write_r>:
 80021a4:	defffd04 	addi	sp,sp,-12
 80021a8:	2805883a 	mov	r2,r5
 80021ac:	dc000015 	stw	r16,0(sp)
 80021b0:	04020074 	movhi	r16,2049
 80021b4:	dc400115 	stw	r17,4(sp)
 80021b8:	300b883a 	mov	r5,r6
 80021bc:	84277f04 	addi	r16,r16,-25092
 80021c0:	2023883a 	mov	r17,r4
 80021c4:	380d883a 	mov	r6,r7
 80021c8:	1009883a 	mov	r4,r2
 80021cc:	dfc00215 	stw	ra,8(sp)
 80021d0:	80000015 	stw	zero,0(r16)
 80021d4:	80039280 	call	8003928 <write>
 80021d8:	00ffffc4 	movi	r3,-1
 80021dc:	10c00526 	beq	r2,r3,80021f4 <_write_r+0x50>
 80021e0:	dfc00217 	ldw	ra,8(sp)
 80021e4:	dc400117 	ldw	r17,4(sp)
 80021e8:	dc000017 	ldw	r16,0(sp)
 80021ec:	dec00304 	addi	sp,sp,12
 80021f0:	f800283a 	ret
 80021f4:	80c00017 	ldw	r3,0(r16)
 80021f8:	183ff926 	beq	r3,zero,80021e0 <_write_r+0x3c>
 80021fc:	88c00015 	stw	r3,0(r17)
 8002200:	003ff706 	br	80021e0 <_write_r+0x3c>

08002204 <__swsetup_r>:
 8002204:	00820074 	movhi	r2,2049
 8002208:	defffd04 	addi	sp,sp,-12
 800220c:	10a0bf04 	addi	r2,r2,-32004
 8002210:	dc400115 	stw	r17,4(sp)
 8002214:	2023883a 	mov	r17,r4
 8002218:	11000017 	ldw	r4,0(r2)
 800221c:	dc000015 	stw	r16,0(sp)
 8002220:	dfc00215 	stw	ra,8(sp)
 8002224:	2821883a 	mov	r16,r5
 8002228:	20000226 	beq	r4,zero,8002234 <__swsetup_r+0x30>
 800222c:	20800e17 	ldw	r2,56(r4)
 8002230:	10003126 	beq	r2,zero,80022f8 <__swsetup_r+0xf4>
 8002234:	8080030b 	ldhu	r2,12(r16)
 8002238:	10c0020c 	andi	r3,r2,8
 800223c:	1009883a 	mov	r4,r2
 8002240:	18000f26 	beq	r3,zero,8002280 <__swsetup_r+0x7c>
 8002244:	80c00417 	ldw	r3,16(r16)
 8002248:	18001526 	beq	r3,zero,80022a0 <__swsetup_r+0x9c>
 800224c:	1100004c 	andi	r4,r2,1
 8002250:	20001c1e 	bne	r4,zero,80022c4 <__swsetup_r+0xc0>
 8002254:	1080008c 	andi	r2,r2,2
 8002258:	1000291e 	bne	r2,zero,8002300 <__swsetup_r+0xfc>
 800225c:	80800517 	ldw	r2,20(r16)
 8002260:	80800215 	stw	r2,8(r16)
 8002264:	18001c26 	beq	r3,zero,80022d8 <__swsetup_r+0xd4>
 8002268:	0005883a 	mov	r2,zero
 800226c:	dfc00217 	ldw	ra,8(sp)
 8002270:	dc400117 	ldw	r17,4(sp)
 8002274:	dc000017 	ldw	r16,0(sp)
 8002278:	dec00304 	addi	sp,sp,12
 800227c:	f800283a 	ret
 8002280:	2080040c 	andi	r2,r4,16
 8002284:	10002e26 	beq	r2,zero,8002340 <__swsetup_r+0x13c>
 8002288:	2080010c 	andi	r2,r4,4
 800228c:	10001e1e 	bne	r2,zero,8002308 <__swsetup_r+0x104>
 8002290:	80c00417 	ldw	r3,16(r16)
 8002294:	20800214 	ori	r2,r4,8
 8002298:	8080030d 	sth	r2,12(r16)
 800229c:	183feb1e 	bne	r3,zero,800224c <__swsetup_r+0x48>
 80022a0:	1100a00c 	andi	r4,r2,640
 80022a4:	01408004 	movi	r5,512
 80022a8:	217fe826 	beq	r4,r5,800224c <__swsetup_r+0x48>
 80022ac:	800b883a 	mov	r5,r16
 80022b0:	8809883a 	mov	r4,r17
 80022b4:	8002bec0 	call	8002bec <__smakebuf_r>
 80022b8:	8080030b 	ldhu	r2,12(r16)
 80022bc:	80c00417 	ldw	r3,16(r16)
 80022c0:	003fe206 	br	800224c <__swsetup_r+0x48>
 80022c4:	80800517 	ldw	r2,20(r16)
 80022c8:	80000215 	stw	zero,8(r16)
 80022cc:	0085c83a 	sub	r2,zero,r2
 80022d0:	80800615 	stw	r2,24(r16)
 80022d4:	183fe41e 	bne	r3,zero,8002268 <__swsetup_r+0x64>
 80022d8:	80c0030b 	ldhu	r3,12(r16)
 80022dc:	0005883a 	mov	r2,zero
 80022e0:	1900200c 	andi	r4,r3,128
 80022e4:	203fe126 	beq	r4,zero,800226c <__swsetup_r+0x68>
 80022e8:	18c01014 	ori	r3,r3,64
 80022ec:	80c0030d 	sth	r3,12(r16)
 80022f0:	00bfffc4 	movi	r2,-1
 80022f4:	003fdd06 	br	800226c <__swsetup_r+0x68>
 80022f8:	80007540 	call	8000754 <__sinit>
 80022fc:	003fcd06 	br	8002234 <__swsetup_r+0x30>
 8002300:	0005883a 	mov	r2,zero
 8002304:	003fd606 	br	8002260 <__swsetup_r+0x5c>
 8002308:	81400c17 	ldw	r5,48(r16)
 800230c:	28000626 	beq	r5,zero,8002328 <__swsetup_r+0x124>
 8002310:	80801004 	addi	r2,r16,64
 8002314:	28800326 	beq	r5,r2,8002324 <__swsetup_r+0x120>
 8002318:	8809883a 	mov	r4,r17
 800231c:	800287c0 	call	800287c <_free_r>
 8002320:	8100030b 	ldhu	r4,12(r16)
 8002324:	80000c15 	stw	zero,48(r16)
 8002328:	80c00417 	ldw	r3,16(r16)
 800232c:	00bff6c4 	movi	r2,-37
 8002330:	1108703a 	and	r4,r2,r4
 8002334:	80000115 	stw	zero,4(r16)
 8002338:	80c00015 	stw	r3,0(r16)
 800233c:	003fd506 	br	8002294 <__swsetup_r+0x90>
 8002340:	00800244 	movi	r2,9
 8002344:	88800015 	stw	r2,0(r17)
 8002348:	20801014 	ori	r2,r4,64
 800234c:	8080030d 	sth	r2,12(r16)
 8002350:	00bfffc4 	movi	r2,-1
 8002354:	003fc506 	br	800226c <__swsetup_r+0x68>

08002358 <_close_r>:
 8002358:	defffd04 	addi	sp,sp,-12
 800235c:	dc000015 	stw	r16,0(sp)
 8002360:	04020074 	movhi	r16,2049
 8002364:	dc400115 	stw	r17,4(sp)
 8002368:	84277f04 	addi	r16,r16,-25092
 800236c:	2023883a 	mov	r17,r4
 8002370:	2809883a 	mov	r4,r5
 8002374:	dfc00215 	stw	ra,8(sp)
 8002378:	80000015 	stw	zero,0(r16)
 800237c:	80030d00 	call	80030d0 <close>
 8002380:	00ffffc4 	movi	r3,-1
 8002384:	10c00526 	beq	r2,r3,800239c <_close_r+0x44>
 8002388:	dfc00217 	ldw	ra,8(sp)
 800238c:	dc400117 	ldw	r17,4(sp)
 8002390:	dc000017 	ldw	r16,0(sp)
 8002394:	dec00304 	addi	sp,sp,12
 8002398:	f800283a 	ret
 800239c:	80c00017 	ldw	r3,0(r16)
 80023a0:	183ff926 	beq	r3,zero,8002388 <_close_r+0x30>
 80023a4:	88c00015 	stw	r3,0(r17)
 80023a8:	003ff706 	br	8002388 <_close_r+0x30>

080023ac <_fclose_r>:
 80023ac:	28003926 	beq	r5,zero,8002494 <_fclose_r+0xe8>
 80023b0:	defffc04 	addi	sp,sp,-16
 80023b4:	dc400115 	stw	r17,4(sp)
 80023b8:	dc000015 	stw	r16,0(sp)
 80023bc:	dfc00315 	stw	ra,12(sp)
 80023c0:	dc800215 	stw	r18,8(sp)
 80023c4:	2023883a 	mov	r17,r4
 80023c8:	2821883a 	mov	r16,r5
 80023cc:	20000226 	beq	r4,zero,80023d8 <_fclose_r+0x2c>
 80023d0:	20800e17 	ldw	r2,56(r4)
 80023d4:	10002726 	beq	r2,zero,8002474 <_fclose_r+0xc8>
 80023d8:	8080030f 	ldh	r2,12(r16)
 80023dc:	1000071e 	bne	r2,zero,80023fc <_fclose_r+0x50>
 80023e0:	0005883a 	mov	r2,zero
 80023e4:	dfc00317 	ldw	ra,12(sp)
 80023e8:	dc800217 	ldw	r18,8(sp)
 80023ec:	dc400117 	ldw	r17,4(sp)
 80023f0:	dc000017 	ldw	r16,0(sp)
 80023f4:	dec00404 	addi	sp,sp,16
 80023f8:	f800283a 	ret
 80023fc:	800b883a 	mov	r5,r16
 8002400:	8809883a 	mov	r4,r17
 8002404:	80024b00 	call	80024b0 <__sflush_r>
 8002408:	1025883a 	mov	r18,r2
 800240c:	80800b17 	ldw	r2,44(r16)
 8002410:	10000426 	beq	r2,zero,8002424 <_fclose_r+0x78>
 8002414:	81400717 	ldw	r5,28(r16)
 8002418:	8809883a 	mov	r4,r17
 800241c:	103ee83a 	callr	r2
 8002420:	10001616 	blt	r2,zero,800247c <_fclose_r+0xd0>
 8002424:	8080030b 	ldhu	r2,12(r16)
 8002428:	1080200c 	andi	r2,r2,128
 800242c:	1000151e 	bne	r2,zero,8002484 <_fclose_r+0xd8>
 8002430:	81400c17 	ldw	r5,48(r16)
 8002434:	28000526 	beq	r5,zero,800244c <_fclose_r+0xa0>
 8002438:	80801004 	addi	r2,r16,64
 800243c:	28800226 	beq	r5,r2,8002448 <_fclose_r+0x9c>
 8002440:	8809883a 	mov	r4,r17
 8002444:	800287c0 	call	800287c <_free_r>
 8002448:	80000c15 	stw	zero,48(r16)
 800244c:	81401117 	ldw	r5,68(r16)
 8002450:	28000326 	beq	r5,zero,8002460 <_fclose_r+0xb4>
 8002454:	8809883a 	mov	r4,r17
 8002458:	800287c0 	call	800287c <_free_r>
 800245c:	80001115 	stw	zero,68(r16)
 8002460:	80007640 	call	8000764 <__sfp_lock_acquire>
 8002464:	8000030d 	sth	zero,12(r16)
 8002468:	80007680 	call	8000768 <__sfp_lock_release>
 800246c:	9005883a 	mov	r2,r18
 8002470:	003fdc06 	br	80023e4 <_fclose_r+0x38>
 8002474:	80007540 	call	8000754 <__sinit>
 8002478:	003fd706 	br	80023d8 <_fclose_r+0x2c>
 800247c:	04bfffc4 	movi	r18,-1
 8002480:	003fe806 	br	8002424 <_fclose_r+0x78>
 8002484:	81400417 	ldw	r5,16(r16)
 8002488:	8809883a 	mov	r4,r17
 800248c:	800287c0 	call	800287c <_free_r>
 8002490:	003fe706 	br	8002430 <_fclose_r+0x84>
 8002494:	0005883a 	mov	r2,zero
 8002498:	f800283a 	ret

0800249c <fclose>:
 800249c:	00820074 	movhi	r2,2049
 80024a0:	10a0bf04 	addi	r2,r2,-32004
 80024a4:	200b883a 	mov	r5,r4
 80024a8:	11000017 	ldw	r4,0(r2)
 80024ac:	80023ac1 	jmpi	80023ac <_fclose_r>

080024b0 <__sflush_r>:
 80024b0:	2880030b 	ldhu	r2,12(r5)
 80024b4:	defffb04 	addi	sp,sp,-20
 80024b8:	dcc00315 	stw	r19,12(sp)
 80024bc:	dc400115 	stw	r17,4(sp)
 80024c0:	dfc00415 	stw	ra,16(sp)
 80024c4:	dc800215 	stw	r18,8(sp)
 80024c8:	dc000015 	stw	r16,0(sp)
 80024cc:	10c0020c 	andi	r3,r2,8
 80024d0:	2823883a 	mov	r17,r5
 80024d4:	2027883a 	mov	r19,r4
 80024d8:	1800311e 	bne	r3,zero,80025a0 <__sflush_r+0xf0>
 80024dc:	28c00117 	ldw	r3,4(r5)
 80024e0:	10820014 	ori	r2,r2,2048
 80024e4:	2880030d 	sth	r2,12(r5)
 80024e8:	00c04b0e 	bge	zero,r3,8002618 <__sflush_r+0x168>
 80024ec:	8a000a17 	ldw	r8,40(r17)
 80024f0:	40002326 	beq	r8,zero,8002580 <__sflush_r+0xd0>
 80024f4:	9c000017 	ldw	r16,0(r19)
 80024f8:	10c4000c 	andi	r3,r2,4096
 80024fc:	98000015 	stw	zero,0(r19)
 8002500:	18004826 	beq	r3,zero,8002624 <__sflush_r+0x174>
 8002504:	89801417 	ldw	r6,80(r17)
 8002508:	10c0010c 	andi	r3,r2,4
 800250c:	18000626 	beq	r3,zero,8002528 <__sflush_r+0x78>
 8002510:	88c00117 	ldw	r3,4(r17)
 8002514:	88800c17 	ldw	r2,48(r17)
 8002518:	30cdc83a 	sub	r6,r6,r3
 800251c:	10000226 	beq	r2,zero,8002528 <__sflush_r+0x78>
 8002520:	88800f17 	ldw	r2,60(r17)
 8002524:	308dc83a 	sub	r6,r6,r2
 8002528:	89400717 	ldw	r5,28(r17)
 800252c:	000f883a 	mov	r7,zero
 8002530:	9809883a 	mov	r4,r19
 8002534:	403ee83a 	callr	r8
 8002538:	00ffffc4 	movi	r3,-1
 800253c:	10c04426 	beq	r2,r3,8002650 <__sflush_r+0x1a0>
 8002540:	88c0030b 	ldhu	r3,12(r17)
 8002544:	89000417 	ldw	r4,16(r17)
 8002548:	88000115 	stw	zero,4(r17)
 800254c:	197dffcc 	andi	r5,r3,63487
 8002550:	8940030d 	sth	r5,12(r17)
 8002554:	89000015 	stw	r4,0(r17)
 8002558:	18c4000c 	andi	r3,r3,4096
 800255c:	18002c1e 	bne	r3,zero,8002610 <__sflush_r+0x160>
 8002560:	89400c17 	ldw	r5,48(r17)
 8002564:	9c000015 	stw	r16,0(r19)
 8002568:	28000526 	beq	r5,zero,8002580 <__sflush_r+0xd0>
 800256c:	88801004 	addi	r2,r17,64
 8002570:	28800226 	beq	r5,r2,800257c <__sflush_r+0xcc>
 8002574:	9809883a 	mov	r4,r19
 8002578:	800287c0 	call	800287c <_free_r>
 800257c:	88000c15 	stw	zero,48(r17)
 8002580:	0005883a 	mov	r2,zero
 8002584:	dfc00417 	ldw	ra,16(sp)
 8002588:	dcc00317 	ldw	r19,12(sp)
 800258c:	dc800217 	ldw	r18,8(sp)
 8002590:	dc400117 	ldw	r17,4(sp)
 8002594:	dc000017 	ldw	r16,0(sp)
 8002598:	dec00504 	addi	sp,sp,20
 800259c:	f800283a 	ret
 80025a0:	2c800417 	ldw	r18,16(r5)
 80025a4:	903ff626 	beq	r18,zero,8002580 <__sflush_r+0xd0>
 80025a8:	2c000017 	ldw	r16,0(r5)
 80025ac:	108000cc 	andi	r2,r2,3
 80025b0:	2c800015 	stw	r18,0(r5)
 80025b4:	84a1c83a 	sub	r16,r16,r18
 80025b8:	1000131e 	bne	r2,zero,8002608 <__sflush_r+0x158>
 80025bc:	28800517 	ldw	r2,20(r5)
 80025c0:	88800215 	stw	r2,8(r17)
 80025c4:	04000316 	blt	zero,r16,80025d4 <__sflush_r+0x124>
 80025c8:	003fed06 	br	8002580 <__sflush_r+0xd0>
 80025cc:	90a5883a 	add	r18,r18,r2
 80025d0:	043feb0e 	bge	zero,r16,8002580 <__sflush_r+0xd0>
 80025d4:	88800917 	ldw	r2,36(r17)
 80025d8:	89400717 	ldw	r5,28(r17)
 80025dc:	800f883a 	mov	r7,r16
 80025e0:	900d883a 	mov	r6,r18
 80025e4:	9809883a 	mov	r4,r19
 80025e8:	103ee83a 	callr	r2
 80025ec:	80a1c83a 	sub	r16,r16,r2
 80025f0:	00bff616 	blt	zero,r2,80025cc <__sflush_r+0x11c>
 80025f4:	88c0030b 	ldhu	r3,12(r17)
 80025f8:	00bfffc4 	movi	r2,-1
 80025fc:	18c01014 	ori	r3,r3,64
 8002600:	88c0030d 	sth	r3,12(r17)
 8002604:	003fdf06 	br	8002584 <__sflush_r+0xd4>
 8002608:	0005883a 	mov	r2,zero
 800260c:	003fec06 	br	80025c0 <__sflush_r+0x110>
 8002610:	88801415 	stw	r2,80(r17)
 8002614:	003fd206 	br	8002560 <__sflush_r+0xb0>
 8002618:	28c00f17 	ldw	r3,60(r5)
 800261c:	00ffb316 	blt	zero,r3,80024ec <__sflush_r+0x3c>
 8002620:	003fd706 	br	8002580 <__sflush_r+0xd0>
 8002624:	89400717 	ldw	r5,28(r17)
 8002628:	000d883a 	mov	r6,zero
 800262c:	01c00044 	movi	r7,1
 8002630:	9809883a 	mov	r4,r19
 8002634:	403ee83a 	callr	r8
 8002638:	100d883a 	mov	r6,r2
 800263c:	00bfffc4 	movi	r2,-1
 8002640:	30801426 	beq	r6,r2,8002694 <__sflush_r+0x1e4>
 8002644:	8880030b 	ldhu	r2,12(r17)
 8002648:	8a000a17 	ldw	r8,40(r17)
 800264c:	003fae06 	br	8002508 <__sflush_r+0x58>
 8002650:	98c00017 	ldw	r3,0(r19)
 8002654:	183fba26 	beq	r3,zero,8002540 <__sflush_r+0x90>
 8002658:	01000744 	movi	r4,29
 800265c:	19000626 	beq	r3,r4,8002678 <__sflush_r+0x1c8>
 8002660:	01000584 	movi	r4,22
 8002664:	19000426 	beq	r3,r4,8002678 <__sflush_r+0x1c8>
 8002668:	88c0030b 	ldhu	r3,12(r17)
 800266c:	18c01014 	ori	r3,r3,64
 8002670:	88c0030d 	sth	r3,12(r17)
 8002674:	003fc306 	br	8002584 <__sflush_r+0xd4>
 8002678:	8880030b 	ldhu	r2,12(r17)
 800267c:	88c00417 	ldw	r3,16(r17)
 8002680:	88000115 	stw	zero,4(r17)
 8002684:	10bdffcc 	andi	r2,r2,63487
 8002688:	8880030d 	sth	r2,12(r17)
 800268c:	88c00015 	stw	r3,0(r17)
 8002690:	003fb306 	br	8002560 <__sflush_r+0xb0>
 8002694:	98800017 	ldw	r2,0(r19)
 8002698:	103fea26 	beq	r2,zero,8002644 <__sflush_r+0x194>
 800269c:	00c00744 	movi	r3,29
 80026a0:	10c00226 	beq	r2,r3,80026ac <__sflush_r+0x1fc>
 80026a4:	00c00584 	movi	r3,22
 80026a8:	10c0031e 	bne	r2,r3,80026b8 <__sflush_r+0x208>
 80026ac:	9c000015 	stw	r16,0(r19)
 80026b0:	0005883a 	mov	r2,zero
 80026b4:	003fb306 	br	8002584 <__sflush_r+0xd4>
 80026b8:	88c0030b 	ldhu	r3,12(r17)
 80026bc:	3005883a 	mov	r2,r6
 80026c0:	18c01014 	ori	r3,r3,64
 80026c4:	88c0030d 	sth	r3,12(r17)
 80026c8:	003fae06 	br	8002584 <__sflush_r+0xd4>

080026cc <_fflush_r>:
 80026cc:	defffd04 	addi	sp,sp,-12
 80026d0:	dc000115 	stw	r16,4(sp)
 80026d4:	dfc00215 	stw	ra,8(sp)
 80026d8:	2021883a 	mov	r16,r4
 80026dc:	20000226 	beq	r4,zero,80026e8 <_fflush_r+0x1c>
 80026e0:	20800e17 	ldw	r2,56(r4)
 80026e4:	10000c26 	beq	r2,zero,8002718 <_fflush_r+0x4c>
 80026e8:	2880030f 	ldh	r2,12(r5)
 80026ec:	1000051e 	bne	r2,zero,8002704 <_fflush_r+0x38>
 80026f0:	0005883a 	mov	r2,zero
 80026f4:	dfc00217 	ldw	ra,8(sp)
 80026f8:	dc000117 	ldw	r16,4(sp)
 80026fc:	dec00304 	addi	sp,sp,12
 8002700:	f800283a 	ret
 8002704:	8009883a 	mov	r4,r16
 8002708:	dfc00217 	ldw	ra,8(sp)
 800270c:	dc000117 	ldw	r16,4(sp)
 8002710:	dec00304 	addi	sp,sp,12
 8002714:	80024b01 	jmpi	80024b0 <__sflush_r>
 8002718:	d9400015 	stw	r5,0(sp)
 800271c:	80007540 	call	8000754 <__sinit>
 8002720:	d9400017 	ldw	r5,0(sp)
 8002724:	003ff006 	br	80026e8 <_fflush_r+0x1c>

08002728 <fflush>:
 8002728:	20000526 	beq	r4,zero,8002740 <fflush+0x18>
 800272c:	00820074 	movhi	r2,2049
 8002730:	10a0bf04 	addi	r2,r2,-32004
 8002734:	200b883a 	mov	r5,r4
 8002738:	11000017 	ldw	r4,0(r2)
 800273c:	80026cc1 	jmpi	80026cc <_fflush_r>
 8002740:	00820074 	movhi	r2,2049
 8002744:	10a0be04 	addi	r2,r2,-32008
 8002748:	11000017 	ldw	r4,0(r2)
 800274c:	01420034 	movhi	r5,2048
 8002750:	2949b304 	addi	r5,r5,9932
 8002754:	8000d301 	jmpi	8000d30 <_fwalk_reent>

08002758 <_malloc_trim_r>:
 8002758:	defffb04 	addi	sp,sp,-20
 800275c:	dcc00315 	stw	r19,12(sp)
 8002760:	04c20034 	movhi	r19,2048
 8002764:	dc800215 	stw	r18,8(sp)
 8002768:	dc400115 	stw	r17,4(sp)
 800276c:	dc000015 	stw	r16,0(sp)
 8002770:	dfc00415 	stw	ra,16(sp)
 8002774:	2821883a 	mov	r16,r5
 8002778:	9cdb2504 	addi	r19,r19,27796
 800277c:	2025883a 	mov	r18,r4
 8002780:	80036300 	call	8003630 <__malloc_lock>
 8002784:	98800217 	ldw	r2,8(r19)
 8002788:	14400117 	ldw	r17,4(r2)
 800278c:	00bfff04 	movi	r2,-4
 8002790:	88a2703a 	and	r17,r17,r2
 8002794:	8c21c83a 	sub	r16,r17,r16
 8002798:	8403fbc4 	addi	r16,r16,4079
 800279c:	8020d33a 	srli	r16,r16,12
 80027a0:	0083ffc4 	movi	r2,4095
 80027a4:	843fffc4 	addi	r16,r16,-1
 80027a8:	8020933a 	slli	r16,r16,12
 80027ac:	1400060e 	bge	r2,r16,80027c8 <_malloc_trim_r+0x70>
 80027b0:	000b883a 	mov	r5,zero
 80027b4:	9009883a 	mov	r4,r18
 80027b8:	80020140 	call	8002014 <_sbrk_r>
 80027bc:	98c00217 	ldw	r3,8(r19)
 80027c0:	1c47883a 	add	r3,r3,r17
 80027c4:	10c00a26 	beq	r2,r3,80027f0 <_malloc_trim_r+0x98>
 80027c8:	9009883a 	mov	r4,r18
 80027cc:	80036540 	call	8003654 <__malloc_unlock>
 80027d0:	0005883a 	mov	r2,zero
 80027d4:	dfc00417 	ldw	ra,16(sp)
 80027d8:	dcc00317 	ldw	r19,12(sp)
 80027dc:	dc800217 	ldw	r18,8(sp)
 80027e0:	dc400117 	ldw	r17,4(sp)
 80027e4:	dc000017 	ldw	r16,0(sp)
 80027e8:	dec00504 	addi	sp,sp,20
 80027ec:	f800283a 	ret
 80027f0:	040bc83a 	sub	r5,zero,r16
 80027f4:	9009883a 	mov	r4,r18
 80027f8:	80020140 	call	8002014 <_sbrk_r>
 80027fc:	00ffffc4 	movi	r3,-1
 8002800:	10c00d26 	beq	r2,r3,8002838 <_malloc_trim_r+0xe0>
 8002804:	00c20074 	movhi	r3,2049
 8002808:	18e78604 	addi	r3,r3,-25064
 800280c:	18800017 	ldw	r2,0(r3)
 8002810:	99000217 	ldw	r4,8(r19)
 8002814:	8c23c83a 	sub	r17,r17,r16
 8002818:	8c400054 	ori	r17,r17,1
 800281c:	1421c83a 	sub	r16,r2,r16
 8002820:	24400115 	stw	r17,4(r4)
 8002824:	9009883a 	mov	r4,r18
 8002828:	1c000015 	stw	r16,0(r3)
 800282c:	80036540 	call	8003654 <__malloc_unlock>
 8002830:	00800044 	movi	r2,1
 8002834:	003fe706 	br	80027d4 <_malloc_trim_r+0x7c>
 8002838:	000b883a 	mov	r5,zero
 800283c:	9009883a 	mov	r4,r18
 8002840:	80020140 	call	8002014 <_sbrk_r>
 8002844:	99000217 	ldw	r4,8(r19)
 8002848:	014003c4 	movi	r5,15
 800284c:	1107c83a 	sub	r3,r2,r4
 8002850:	28ffdd0e 	bge	r5,r3,80027c8 <_malloc_trim_r+0x70>
 8002854:	01420074 	movhi	r5,2049
 8002858:	2960c004 	addi	r5,r5,-32000
 800285c:	29400017 	ldw	r5,0(r5)
 8002860:	18c00054 	ori	r3,r3,1
 8002864:	20c00115 	stw	r3,4(r4)
 8002868:	00c20074 	movhi	r3,2049
 800286c:	1145c83a 	sub	r2,r2,r5
 8002870:	18e78604 	addi	r3,r3,-25064
 8002874:	18800015 	stw	r2,0(r3)
 8002878:	003fd306 	br	80027c8 <_malloc_trim_r+0x70>

0800287c <_free_r>:
 800287c:	28004126 	beq	r5,zero,8002984 <_free_r+0x108>
 8002880:	defffd04 	addi	sp,sp,-12
 8002884:	dc400115 	stw	r17,4(sp)
 8002888:	dc000015 	stw	r16,0(sp)
 800288c:	2023883a 	mov	r17,r4
 8002890:	2821883a 	mov	r16,r5
 8002894:	dfc00215 	stw	ra,8(sp)
 8002898:	80036300 	call	8003630 <__malloc_lock>
 800289c:	81ffff17 	ldw	r7,-4(r16)
 80028a0:	00bfff84 	movi	r2,-2
 80028a4:	01020034 	movhi	r4,2048
 80028a8:	81bffe04 	addi	r6,r16,-8
 80028ac:	3884703a 	and	r2,r7,r2
 80028b0:	211b2504 	addi	r4,r4,27796
 80028b4:	308b883a 	add	r5,r6,r2
 80028b8:	2a400117 	ldw	r9,4(r5)
 80028bc:	22000217 	ldw	r8,8(r4)
 80028c0:	00ffff04 	movi	r3,-4
 80028c4:	48c6703a 	and	r3,r9,r3
 80028c8:	2a005726 	beq	r5,r8,8002a28 <_free_r+0x1ac>
 80028cc:	28c00115 	stw	r3,4(r5)
 80028d0:	39c0004c 	andi	r7,r7,1
 80028d4:	3800091e 	bne	r7,zero,80028fc <_free_r+0x80>
 80028d8:	823ffe17 	ldw	r8,-8(r16)
 80028dc:	22400204 	addi	r9,r4,8
 80028e0:	320dc83a 	sub	r6,r6,r8
 80028e4:	31c00217 	ldw	r7,8(r6)
 80028e8:	1205883a 	add	r2,r2,r8
 80028ec:	3a406526 	beq	r7,r9,8002a84 <_free_r+0x208>
 80028f0:	32000317 	ldw	r8,12(r6)
 80028f4:	3a000315 	stw	r8,12(r7)
 80028f8:	41c00215 	stw	r7,8(r8)
 80028fc:	28cf883a 	add	r7,r5,r3
 8002900:	39c00117 	ldw	r7,4(r7)
 8002904:	39c0004c 	andi	r7,r7,1
 8002908:	38003a26 	beq	r7,zero,80029f4 <_free_r+0x178>
 800290c:	10c00054 	ori	r3,r2,1
 8002910:	30c00115 	stw	r3,4(r6)
 8002914:	3087883a 	add	r3,r6,r2
 8002918:	18800015 	stw	r2,0(r3)
 800291c:	00c07fc4 	movi	r3,511
 8002920:	18801936 	bltu	r3,r2,8002988 <_free_r+0x10c>
 8002924:	1004d0fa 	srli	r2,r2,3
 8002928:	01c00044 	movi	r7,1
 800292c:	21400117 	ldw	r5,4(r4)
 8002930:	10c00044 	addi	r3,r2,1
 8002934:	18c7883a 	add	r3,r3,r3
 8002938:	1005d0ba 	srai	r2,r2,2
 800293c:	18c7883a 	add	r3,r3,r3
 8002940:	18c7883a 	add	r3,r3,r3
 8002944:	1907883a 	add	r3,r3,r4
 8002948:	3884983a 	sll	r2,r7,r2
 800294c:	19c00017 	ldw	r7,0(r3)
 8002950:	1a3ffe04 	addi	r8,r3,-8
 8002954:	1144b03a 	or	r2,r2,r5
 8002958:	32000315 	stw	r8,12(r6)
 800295c:	31c00215 	stw	r7,8(r6)
 8002960:	20800115 	stw	r2,4(r4)
 8002964:	19800015 	stw	r6,0(r3)
 8002968:	39800315 	stw	r6,12(r7)
 800296c:	8809883a 	mov	r4,r17
 8002970:	dfc00217 	ldw	ra,8(sp)
 8002974:	dc400117 	ldw	r17,4(sp)
 8002978:	dc000017 	ldw	r16,0(sp)
 800297c:	dec00304 	addi	sp,sp,12
 8002980:	80036541 	jmpi	8003654 <__malloc_unlock>
 8002984:	f800283a 	ret
 8002988:	100ad27a 	srli	r5,r2,9
 800298c:	00c00104 	movi	r3,4
 8002990:	19404a36 	bltu	r3,r5,8002abc <_free_r+0x240>
 8002994:	100ad1ba 	srli	r5,r2,6
 8002998:	28c00e44 	addi	r3,r5,57
 800299c:	18c7883a 	add	r3,r3,r3
 80029a0:	29400e04 	addi	r5,r5,56
 80029a4:	18c7883a 	add	r3,r3,r3
 80029a8:	18c7883a 	add	r3,r3,r3
 80029ac:	1909883a 	add	r4,r3,r4
 80029b0:	20c00017 	ldw	r3,0(r4)
 80029b4:	01c20034 	movhi	r7,2048
 80029b8:	213ffe04 	addi	r4,r4,-8
 80029bc:	39db2504 	addi	r7,r7,27796
 80029c0:	20c04426 	beq	r4,r3,8002ad4 <_free_r+0x258>
 80029c4:	01ffff04 	movi	r7,-4
 80029c8:	19400117 	ldw	r5,4(r3)
 80029cc:	29ca703a 	and	r5,r5,r7
 80029d0:	1140022e 	bgeu	r2,r5,80029dc <_free_r+0x160>
 80029d4:	18c00217 	ldw	r3,8(r3)
 80029d8:	20fffb1e 	bne	r4,r3,80029c8 <_free_r+0x14c>
 80029dc:	19000317 	ldw	r4,12(r3)
 80029e0:	31000315 	stw	r4,12(r6)
 80029e4:	30c00215 	stw	r3,8(r6)
 80029e8:	21800215 	stw	r6,8(r4)
 80029ec:	19800315 	stw	r6,12(r3)
 80029f0:	003fde06 	br	800296c <_free_r+0xf0>
 80029f4:	29c00217 	ldw	r7,8(r5)
 80029f8:	10c5883a 	add	r2,r2,r3
 80029fc:	00c20034 	movhi	r3,2048
 8002a00:	18db2704 	addi	r3,r3,27804
 8002a04:	38c03b26 	beq	r7,r3,8002af4 <_free_r+0x278>
 8002a08:	2a000317 	ldw	r8,12(r5)
 8002a0c:	11400054 	ori	r5,r2,1
 8002a10:	3087883a 	add	r3,r6,r2
 8002a14:	3a000315 	stw	r8,12(r7)
 8002a18:	41c00215 	stw	r7,8(r8)
 8002a1c:	31400115 	stw	r5,4(r6)
 8002a20:	18800015 	stw	r2,0(r3)
 8002a24:	003fbd06 	br	800291c <_free_r+0xa0>
 8002a28:	39c0004c 	andi	r7,r7,1
 8002a2c:	10c5883a 	add	r2,r2,r3
 8002a30:	3800071e 	bne	r7,zero,8002a50 <_free_r+0x1d4>
 8002a34:	81fffe17 	ldw	r7,-8(r16)
 8002a38:	31cdc83a 	sub	r6,r6,r7
 8002a3c:	30c00317 	ldw	r3,12(r6)
 8002a40:	31400217 	ldw	r5,8(r6)
 8002a44:	11c5883a 	add	r2,r2,r7
 8002a48:	28c00315 	stw	r3,12(r5)
 8002a4c:	19400215 	stw	r5,8(r3)
 8002a50:	10c00054 	ori	r3,r2,1
 8002a54:	30c00115 	stw	r3,4(r6)
 8002a58:	00c20074 	movhi	r3,2049
 8002a5c:	18e0c104 	addi	r3,r3,-31996
 8002a60:	18c00017 	ldw	r3,0(r3)
 8002a64:	21800215 	stw	r6,8(r4)
 8002a68:	10ffc036 	bltu	r2,r3,800296c <_free_r+0xf0>
 8002a6c:	00820074 	movhi	r2,2049
 8002a70:	10a77e04 	addi	r2,r2,-25096
 8002a74:	11400017 	ldw	r5,0(r2)
 8002a78:	8809883a 	mov	r4,r17
 8002a7c:	80027580 	call	8002758 <_malloc_trim_r>
 8002a80:	003fba06 	br	800296c <_free_r+0xf0>
 8002a84:	28c9883a 	add	r4,r5,r3
 8002a88:	21000117 	ldw	r4,4(r4)
 8002a8c:	2100004c 	andi	r4,r4,1
 8002a90:	2000391e 	bne	r4,zero,8002b78 <_free_r+0x2fc>
 8002a94:	29c00217 	ldw	r7,8(r5)
 8002a98:	29000317 	ldw	r4,12(r5)
 8002a9c:	1885883a 	add	r2,r3,r2
 8002aa0:	10c00054 	ori	r3,r2,1
 8002aa4:	39000315 	stw	r4,12(r7)
 8002aa8:	21c00215 	stw	r7,8(r4)
 8002aac:	30c00115 	stw	r3,4(r6)
 8002ab0:	308d883a 	add	r6,r6,r2
 8002ab4:	30800015 	stw	r2,0(r6)
 8002ab8:	003fac06 	br	800296c <_free_r+0xf0>
 8002abc:	00c00504 	movi	r3,20
 8002ac0:	19401536 	bltu	r3,r5,8002b18 <_free_r+0x29c>
 8002ac4:	28c01704 	addi	r3,r5,92
 8002ac8:	18c7883a 	add	r3,r3,r3
 8002acc:	294016c4 	addi	r5,r5,91
 8002ad0:	003fb406 	br	80029a4 <_free_r+0x128>
 8002ad4:	280bd0ba 	srai	r5,r5,2
 8002ad8:	00c00044 	movi	r3,1
 8002adc:	38800117 	ldw	r2,4(r7)
 8002ae0:	194a983a 	sll	r5,r3,r5
 8002ae4:	2007883a 	mov	r3,r4
 8002ae8:	2884b03a 	or	r2,r5,r2
 8002aec:	38800115 	stw	r2,4(r7)
 8002af0:	003fbb06 	br	80029e0 <_free_r+0x164>
 8002af4:	21800515 	stw	r6,20(r4)
 8002af8:	21800415 	stw	r6,16(r4)
 8002afc:	10c00054 	ori	r3,r2,1
 8002b00:	31c00315 	stw	r7,12(r6)
 8002b04:	31c00215 	stw	r7,8(r6)
 8002b08:	30c00115 	stw	r3,4(r6)
 8002b0c:	308d883a 	add	r6,r6,r2
 8002b10:	30800015 	stw	r2,0(r6)
 8002b14:	003f9506 	br	800296c <_free_r+0xf0>
 8002b18:	00c01504 	movi	r3,84
 8002b1c:	19400536 	bltu	r3,r5,8002b34 <_free_r+0x2b8>
 8002b20:	100ad33a 	srli	r5,r2,12
 8002b24:	28c01bc4 	addi	r3,r5,111
 8002b28:	18c7883a 	add	r3,r3,r3
 8002b2c:	29401b84 	addi	r5,r5,110
 8002b30:	003f9c06 	br	80029a4 <_free_r+0x128>
 8002b34:	00c05504 	movi	r3,340
 8002b38:	19400536 	bltu	r3,r5,8002b50 <_free_r+0x2d4>
 8002b3c:	100ad3fa 	srli	r5,r2,15
 8002b40:	28c01e04 	addi	r3,r5,120
 8002b44:	18c7883a 	add	r3,r3,r3
 8002b48:	29401dc4 	addi	r5,r5,119
 8002b4c:	003f9506 	br	80029a4 <_free_r+0x128>
 8002b50:	00c15504 	movi	r3,1364
 8002b54:	19400536 	bltu	r3,r5,8002b6c <_free_r+0x2f0>
 8002b58:	100ad4ba 	srli	r5,r2,18
 8002b5c:	28c01f44 	addi	r3,r5,125
 8002b60:	18c7883a 	add	r3,r3,r3
 8002b64:	29401f04 	addi	r5,r5,124
 8002b68:	003f8e06 	br	80029a4 <_free_r+0x128>
 8002b6c:	00c03f84 	movi	r3,254
 8002b70:	01401f84 	movi	r5,126
 8002b74:	003f8b06 	br	80029a4 <_free_r+0x128>
 8002b78:	10c00054 	ori	r3,r2,1
 8002b7c:	30c00115 	stw	r3,4(r6)
 8002b80:	308d883a 	add	r6,r6,r2
 8002b84:	30800015 	stw	r2,0(r6)
 8002b88:	003f7806 	br	800296c <_free_r+0xf0>

08002b8c <_lseek_r>:
 8002b8c:	defffd04 	addi	sp,sp,-12
 8002b90:	2805883a 	mov	r2,r5
 8002b94:	dc000015 	stw	r16,0(sp)
 8002b98:	04020074 	movhi	r16,2049
 8002b9c:	dc400115 	stw	r17,4(sp)
 8002ba0:	300b883a 	mov	r5,r6
 8002ba4:	84277f04 	addi	r16,r16,-25092
 8002ba8:	2023883a 	mov	r17,r4
 8002bac:	380d883a 	mov	r6,r7
 8002bb0:	1009883a 	mov	r4,r2
 8002bb4:	dfc00215 	stw	ra,8(sp)
 8002bb8:	80000015 	stw	zero,0(r16)
 8002bbc:	80034d80 	call	80034d8 <lseek>
 8002bc0:	00ffffc4 	movi	r3,-1
 8002bc4:	10c00526 	beq	r2,r3,8002bdc <_lseek_r+0x50>
 8002bc8:	dfc00217 	ldw	ra,8(sp)
 8002bcc:	dc400117 	ldw	r17,4(sp)
 8002bd0:	dc000017 	ldw	r16,0(sp)
 8002bd4:	dec00304 	addi	sp,sp,12
 8002bd8:	f800283a 	ret
 8002bdc:	80c00017 	ldw	r3,0(r16)
 8002be0:	183ff926 	beq	r3,zero,8002bc8 <_lseek_r+0x3c>
 8002be4:	88c00015 	stw	r3,0(r17)
 8002be8:	003ff706 	br	8002bc8 <_lseek_r+0x3c>

08002bec <__smakebuf_r>:
 8002bec:	2880030b 	ldhu	r2,12(r5)
 8002bf0:	10c0008c 	andi	r3,r2,2
 8002bf4:	1800411e 	bne	r3,zero,8002cfc <__smakebuf_r+0x110>
 8002bf8:	deffec04 	addi	sp,sp,-80
 8002bfc:	dc000f15 	stw	r16,60(sp)
 8002c00:	2821883a 	mov	r16,r5
 8002c04:	2940038f 	ldh	r5,14(r5)
 8002c08:	dc401015 	stw	r17,64(sp)
 8002c0c:	dfc01315 	stw	ra,76(sp)
 8002c10:	dcc01215 	stw	r19,72(sp)
 8002c14:	dc801115 	stw	r18,68(sp)
 8002c18:	2023883a 	mov	r17,r4
 8002c1c:	28001c16 	blt	r5,zero,8002c90 <__smakebuf_r+0xa4>
 8002c20:	d80d883a 	mov	r6,sp
 8002c24:	8002e080 	call	8002e08 <_fstat_r>
 8002c28:	10001816 	blt	r2,zero,8002c8c <__smakebuf_r+0xa0>
 8002c2c:	d8800117 	ldw	r2,4(sp)
 8002c30:	00e00014 	movui	r3,32768
 8002c34:	10bc000c 	andi	r2,r2,61440
 8002c38:	14c80020 	cmpeqi	r19,r2,8192
 8002c3c:	10c03726 	beq	r2,r3,8002d1c <__smakebuf_r+0x130>
 8002c40:	80c0030b 	ldhu	r3,12(r16)
 8002c44:	18c20014 	ori	r3,r3,2048
 8002c48:	80c0030d 	sth	r3,12(r16)
 8002c4c:	00c80004 	movi	r3,8192
 8002c50:	10c0521e 	bne	r2,r3,8002d9c <__smakebuf_r+0x1b0>
 8002c54:	8140038f 	ldh	r5,14(r16)
 8002c58:	8809883a 	mov	r4,r17
 8002c5c:	8002e640 	call	8002e64 <_isatty_r>
 8002c60:	10004c26 	beq	r2,zero,8002d94 <__smakebuf_r+0x1a8>
 8002c64:	8080030b 	ldhu	r2,12(r16)
 8002c68:	80c010c4 	addi	r3,r16,67
 8002c6c:	80c00015 	stw	r3,0(r16)
 8002c70:	10800054 	ori	r2,r2,1
 8002c74:	8080030d 	sth	r2,12(r16)
 8002c78:	00800044 	movi	r2,1
 8002c7c:	80c00415 	stw	r3,16(r16)
 8002c80:	80800515 	stw	r2,20(r16)
 8002c84:	04810004 	movi	r18,1024
 8002c88:	00000706 	br	8002ca8 <__smakebuf_r+0xbc>
 8002c8c:	8080030b 	ldhu	r2,12(r16)
 8002c90:	10c0200c 	andi	r3,r2,128
 8002c94:	18001f1e 	bne	r3,zero,8002d14 <__smakebuf_r+0x128>
 8002c98:	04810004 	movi	r18,1024
 8002c9c:	10820014 	ori	r2,r2,2048
 8002ca0:	8080030d 	sth	r2,12(r16)
 8002ca4:	0027883a 	mov	r19,zero
 8002ca8:	900b883a 	mov	r5,r18
 8002cac:	8809883a 	mov	r4,r17
 8002cb0:	8000df40 	call	8000df4 <_malloc_r>
 8002cb4:	10002c26 	beq	r2,zero,8002d68 <__smakebuf_r+0x17c>
 8002cb8:	80c0030b 	ldhu	r3,12(r16)
 8002cbc:	01020034 	movhi	r4,2048
 8002cc0:	2100ff04 	addi	r4,r4,1020
 8002cc4:	89000f15 	stw	r4,60(r17)
 8002cc8:	18c02014 	ori	r3,r3,128
 8002ccc:	80c0030d 	sth	r3,12(r16)
 8002cd0:	80800015 	stw	r2,0(r16)
 8002cd4:	80800415 	stw	r2,16(r16)
 8002cd8:	84800515 	stw	r18,20(r16)
 8002cdc:	98001a1e 	bne	r19,zero,8002d48 <__smakebuf_r+0x15c>
 8002ce0:	dfc01317 	ldw	ra,76(sp)
 8002ce4:	dcc01217 	ldw	r19,72(sp)
 8002ce8:	dc801117 	ldw	r18,68(sp)
 8002cec:	dc401017 	ldw	r17,64(sp)
 8002cf0:	dc000f17 	ldw	r16,60(sp)
 8002cf4:	dec01404 	addi	sp,sp,80
 8002cf8:	f800283a 	ret
 8002cfc:	288010c4 	addi	r2,r5,67
 8002d00:	28800015 	stw	r2,0(r5)
 8002d04:	28800415 	stw	r2,16(r5)
 8002d08:	00800044 	movi	r2,1
 8002d0c:	28800515 	stw	r2,20(r5)
 8002d10:	f800283a 	ret
 8002d14:	04801004 	movi	r18,64
 8002d18:	003fe006 	br	8002c9c <__smakebuf_r+0xb0>
 8002d1c:	81000a17 	ldw	r4,40(r16)
 8002d20:	00c20034 	movhi	r3,2048
 8002d24:	18c85004 	addi	r3,r3,8512
 8002d28:	20ffc51e 	bne	r4,r3,8002c40 <__smakebuf_r+0x54>
 8002d2c:	8080030b 	ldhu	r2,12(r16)
 8002d30:	04810004 	movi	r18,1024
 8002d34:	84801315 	stw	r18,76(r16)
 8002d38:	1484b03a 	or	r2,r2,r18
 8002d3c:	8080030d 	sth	r2,12(r16)
 8002d40:	0027883a 	mov	r19,zero
 8002d44:	003fd806 	br	8002ca8 <__smakebuf_r+0xbc>
 8002d48:	8140038f 	ldh	r5,14(r16)
 8002d4c:	8809883a 	mov	r4,r17
 8002d50:	8002e640 	call	8002e64 <_isatty_r>
 8002d54:	103fe226 	beq	r2,zero,8002ce0 <__smakebuf_r+0xf4>
 8002d58:	8080030b 	ldhu	r2,12(r16)
 8002d5c:	10800054 	ori	r2,r2,1
 8002d60:	8080030d 	sth	r2,12(r16)
 8002d64:	003fde06 	br	8002ce0 <__smakebuf_r+0xf4>
 8002d68:	8080030b 	ldhu	r2,12(r16)
 8002d6c:	10c0800c 	andi	r3,r2,512
 8002d70:	183fdb1e 	bne	r3,zero,8002ce0 <__smakebuf_r+0xf4>
 8002d74:	10800094 	ori	r2,r2,2
 8002d78:	80c010c4 	addi	r3,r16,67
 8002d7c:	8080030d 	sth	r2,12(r16)
 8002d80:	00800044 	movi	r2,1
 8002d84:	80c00015 	stw	r3,0(r16)
 8002d88:	80c00415 	stw	r3,16(r16)
 8002d8c:	80800515 	stw	r2,20(r16)
 8002d90:	003fd306 	br	8002ce0 <__smakebuf_r+0xf4>
 8002d94:	04810004 	movi	r18,1024
 8002d98:	003fc306 	br	8002ca8 <__smakebuf_r+0xbc>
 8002d9c:	0027883a 	mov	r19,zero
 8002da0:	04810004 	movi	r18,1024
 8002da4:	003fc006 	br	8002ca8 <__smakebuf_r+0xbc>

08002da8 <_read_r>:
 8002da8:	defffd04 	addi	sp,sp,-12
 8002dac:	2805883a 	mov	r2,r5
 8002db0:	dc000015 	stw	r16,0(sp)
 8002db4:	04020074 	movhi	r16,2049
 8002db8:	dc400115 	stw	r17,4(sp)
 8002dbc:	300b883a 	mov	r5,r6
 8002dc0:	84277f04 	addi	r16,r16,-25092
 8002dc4:	2023883a 	mov	r17,r4
 8002dc8:	380d883a 	mov	r6,r7
 8002dcc:	1009883a 	mov	r4,r2
 8002dd0:	dfc00215 	stw	ra,8(sp)
 8002dd4:	80000015 	stw	zero,0(r16)
 8002dd8:	80036b40 	call	80036b4 <read>
 8002ddc:	00ffffc4 	movi	r3,-1
 8002de0:	10c00526 	beq	r2,r3,8002df8 <_read_r+0x50>
 8002de4:	dfc00217 	ldw	ra,8(sp)
 8002de8:	dc400117 	ldw	r17,4(sp)
 8002dec:	dc000017 	ldw	r16,0(sp)
 8002df0:	dec00304 	addi	sp,sp,12
 8002df4:	f800283a 	ret
 8002df8:	80c00017 	ldw	r3,0(r16)
 8002dfc:	183ff926 	beq	r3,zero,8002de4 <_read_r+0x3c>
 8002e00:	88c00015 	stw	r3,0(r17)
 8002e04:	003ff706 	br	8002de4 <_read_r+0x3c>

08002e08 <_fstat_r>:
 8002e08:	defffd04 	addi	sp,sp,-12
 8002e0c:	2805883a 	mov	r2,r5
 8002e10:	dc000015 	stw	r16,0(sp)
 8002e14:	04020074 	movhi	r16,2049
 8002e18:	dc400115 	stw	r17,4(sp)
 8002e1c:	84277f04 	addi	r16,r16,-25092
 8002e20:	2023883a 	mov	r17,r4
 8002e24:	300b883a 	mov	r5,r6
 8002e28:	1009883a 	mov	r4,r2
 8002e2c:	dfc00215 	stw	ra,8(sp)
 8002e30:	80000015 	stw	zero,0(r16)
 8002e34:	80032100 	call	8003210 <fstat>
 8002e38:	00ffffc4 	movi	r3,-1
 8002e3c:	10c00526 	beq	r2,r3,8002e54 <_fstat_r+0x4c>
 8002e40:	dfc00217 	ldw	ra,8(sp)
 8002e44:	dc400117 	ldw	r17,4(sp)
 8002e48:	dc000017 	ldw	r16,0(sp)
 8002e4c:	dec00304 	addi	sp,sp,12
 8002e50:	f800283a 	ret
 8002e54:	80c00017 	ldw	r3,0(r16)
 8002e58:	183ff926 	beq	r3,zero,8002e40 <_fstat_r+0x38>
 8002e5c:	88c00015 	stw	r3,0(r17)
 8002e60:	003ff706 	br	8002e40 <_fstat_r+0x38>

08002e64 <_isatty_r>:
 8002e64:	defffd04 	addi	sp,sp,-12
 8002e68:	dc000015 	stw	r16,0(sp)
 8002e6c:	04020074 	movhi	r16,2049
 8002e70:	dc400115 	stw	r17,4(sp)
 8002e74:	84277f04 	addi	r16,r16,-25092
 8002e78:	2023883a 	mov	r17,r4
 8002e7c:	2809883a 	mov	r4,r5
 8002e80:	dfc00215 	stw	ra,8(sp)
 8002e84:	80000015 	stw	zero,0(r16)
 8002e88:	80033040 	call	8003304 <isatty>
 8002e8c:	00ffffc4 	movi	r3,-1
 8002e90:	10c00526 	beq	r2,r3,8002ea8 <_isatty_r+0x44>
 8002e94:	dfc00217 	ldw	ra,8(sp)
 8002e98:	dc400117 	ldw	r17,4(sp)
 8002e9c:	dc000017 	ldw	r16,0(sp)
 8002ea0:	dec00304 	addi	sp,sp,12
 8002ea4:	f800283a 	ret
 8002ea8:	80c00017 	ldw	r3,0(r16)
 8002eac:	183ff926 	beq	r3,zero,8002e94 <_isatty_r+0x30>
 8002eb0:	88c00015 	stw	r3,0(r17)
 8002eb4:	003ff706 	br	8002e94 <_isatty_r+0x30>

08002eb8 <__divsi3>:
 8002eb8:	20001b16 	blt	r4,zero,8002f28 <__divsi3+0x70>
 8002ebc:	000f883a 	mov	r7,zero
 8002ec0:	28001616 	blt	r5,zero,8002f1c <__divsi3+0x64>
 8002ec4:	200d883a 	mov	r6,r4
 8002ec8:	29001a2e 	bgeu	r5,r4,8002f34 <__divsi3+0x7c>
 8002ecc:	00800804 	movi	r2,32
 8002ed0:	00c00044 	movi	r3,1
 8002ed4:	00000106 	br	8002edc <__divsi3+0x24>
 8002ed8:	10000d26 	beq	r2,zero,8002f10 <__divsi3+0x58>
 8002edc:	294b883a 	add	r5,r5,r5
 8002ee0:	10bfffc4 	addi	r2,r2,-1
 8002ee4:	18c7883a 	add	r3,r3,r3
 8002ee8:	293ffb36 	bltu	r5,r4,8002ed8 <__divsi3+0x20>
 8002eec:	0005883a 	mov	r2,zero
 8002ef0:	18000726 	beq	r3,zero,8002f10 <__divsi3+0x58>
 8002ef4:	0005883a 	mov	r2,zero
 8002ef8:	31400236 	bltu	r6,r5,8002f04 <__divsi3+0x4c>
 8002efc:	314dc83a 	sub	r6,r6,r5
 8002f00:	10c4b03a 	or	r2,r2,r3
 8002f04:	1806d07a 	srli	r3,r3,1
 8002f08:	280ad07a 	srli	r5,r5,1
 8002f0c:	183ffa1e 	bne	r3,zero,8002ef8 <__divsi3+0x40>
 8002f10:	38000126 	beq	r7,zero,8002f18 <__divsi3+0x60>
 8002f14:	0085c83a 	sub	r2,zero,r2
 8002f18:	f800283a 	ret
 8002f1c:	014bc83a 	sub	r5,zero,r5
 8002f20:	39c0005c 	xori	r7,r7,1
 8002f24:	003fe706 	br	8002ec4 <__divsi3+0xc>
 8002f28:	0109c83a 	sub	r4,zero,r4
 8002f2c:	01c00044 	movi	r7,1
 8002f30:	003fe306 	br	8002ec0 <__divsi3+0x8>
 8002f34:	00c00044 	movi	r3,1
 8002f38:	003fee06 	br	8002ef4 <__divsi3+0x3c>

08002f3c <__modsi3>:
 8002f3c:	20001716 	blt	r4,zero,8002f9c <__modsi3+0x60>
 8002f40:	000f883a 	mov	r7,zero
 8002f44:	2005883a 	mov	r2,r4
 8002f48:	28001216 	blt	r5,zero,8002f94 <__modsi3+0x58>
 8002f4c:	2900162e 	bgeu	r5,r4,8002fa8 <__modsi3+0x6c>
 8002f50:	01800804 	movi	r6,32
 8002f54:	00c00044 	movi	r3,1
 8002f58:	00000106 	br	8002f60 <__modsi3+0x24>
 8002f5c:	30000a26 	beq	r6,zero,8002f88 <__modsi3+0x4c>
 8002f60:	294b883a 	add	r5,r5,r5
 8002f64:	31bfffc4 	addi	r6,r6,-1
 8002f68:	18c7883a 	add	r3,r3,r3
 8002f6c:	293ffb36 	bltu	r5,r4,8002f5c <__modsi3+0x20>
 8002f70:	18000526 	beq	r3,zero,8002f88 <__modsi3+0x4c>
 8002f74:	1806d07a 	srli	r3,r3,1
 8002f78:	11400136 	bltu	r2,r5,8002f80 <__modsi3+0x44>
 8002f7c:	1145c83a 	sub	r2,r2,r5
 8002f80:	280ad07a 	srli	r5,r5,1
 8002f84:	183ffb1e 	bne	r3,zero,8002f74 <__modsi3+0x38>
 8002f88:	38000126 	beq	r7,zero,8002f90 <__modsi3+0x54>
 8002f8c:	0085c83a 	sub	r2,zero,r2
 8002f90:	f800283a 	ret
 8002f94:	014bc83a 	sub	r5,zero,r5
 8002f98:	003fec06 	br	8002f4c <__modsi3+0x10>
 8002f9c:	0109c83a 	sub	r4,zero,r4
 8002fa0:	01c00044 	movi	r7,1
 8002fa4:	003fe706 	br	8002f44 <__modsi3+0x8>
 8002fa8:	00c00044 	movi	r3,1
 8002fac:	003ff106 	br	8002f74 <__modsi3+0x38>

08002fb0 <__udivsi3>:
 8002fb0:	200d883a 	mov	r6,r4
 8002fb4:	2900152e 	bgeu	r5,r4,800300c <__udivsi3+0x5c>
 8002fb8:	28001416 	blt	r5,zero,800300c <__udivsi3+0x5c>
 8002fbc:	00800804 	movi	r2,32
 8002fc0:	00c00044 	movi	r3,1
 8002fc4:	00000206 	br	8002fd0 <__udivsi3+0x20>
 8002fc8:	10000e26 	beq	r2,zero,8003004 <__udivsi3+0x54>
 8002fcc:	28000516 	blt	r5,zero,8002fe4 <__udivsi3+0x34>
 8002fd0:	294b883a 	add	r5,r5,r5
 8002fd4:	10bfffc4 	addi	r2,r2,-1
 8002fd8:	18c7883a 	add	r3,r3,r3
 8002fdc:	293ffa36 	bltu	r5,r4,8002fc8 <__udivsi3+0x18>
 8002fe0:	18000826 	beq	r3,zero,8003004 <__udivsi3+0x54>
 8002fe4:	0005883a 	mov	r2,zero
 8002fe8:	31400236 	bltu	r6,r5,8002ff4 <__udivsi3+0x44>
 8002fec:	314dc83a 	sub	r6,r6,r5
 8002ff0:	10c4b03a 	or	r2,r2,r3
 8002ff4:	1806d07a 	srli	r3,r3,1
 8002ff8:	280ad07a 	srli	r5,r5,1
 8002ffc:	183ffa1e 	bne	r3,zero,8002fe8 <__udivsi3+0x38>
 8003000:	f800283a 	ret
 8003004:	0005883a 	mov	r2,zero
 8003008:	f800283a 	ret
 800300c:	00c00044 	movi	r3,1
 8003010:	003ff406 	br	8002fe4 <__udivsi3+0x34>

08003014 <__umodsi3>:
 8003014:	2005883a 	mov	r2,r4
 8003018:	2900122e 	bgeu	r5,r4,8003064 <__umodsi3+0x50>
 800301c:	28001116 	blt	r5,zero,8003064 <__umodsi3+0x50>
 8003020:	01800804 	movi	r6,32
 8003024:	00c00044 	movi	r3,1
 8003028:	00000206 	br	8003034 <__umodsi3+0x20>
 800302c:	30000c26 	beq	r6,zero,8003060 <__umodsi3+0x4c>
 8003030:	28000516 	blt	r5,zero,8003048 <__umodsi3+0x34>
 8003034:	294b883a 	add	r5,r5,r5
 8003038:	31bfffc4 	addi	r6,r6,-1
 800303c:	18c7883a 	add	r3,r3,r3
 8003040:	293ffa36 	bltu	r5,r4,800302c <__umodsi3+0x18>
 8003044:	18000626 	beq	r3,zero,8003060 <__umodsi3+0x4c>
 8003048:	1806d07a 	srli	r3,r3,1
 800304c:	11400136 	bltu	r2,r5,8003054 <__umodsi3+0x40>
 8003050:	1145c83a 	sub	r2,r2,r5
 8003054:	280ad07a 	srli	r5,r5,1
 8003058:	183ffb1e 	bne	r3,zero,8003048 <__umodsi3+0x34>
 800305c:	f800283a 	ret
 8003060:	f800283a 	ret
 8003064:	00c00044 	movi	r3,1
 8003068:	003ff706 	br	8003048 <__umodsi3+0x34>

0800306c <__mulsi3>:
 800306c:	0005883a 	mov	r2,zero
 8003070:	20000726 	beq	r4,zero,8003090 <__mulsi3+0x24>
 8003074:	20c0004c 	andi	r3,r4,1
 8003078:	2008d07a 	srli	r4,r4,1
 800307c:	18000126 	beq	r3,zero,8003084 <__mulsi3+0x18>
 8003080:	1145883a 	add	r2,r2,r5
 8003084:	294b883a 	add	r5,r5,r5
 8003088:	203ffa1e 	bne	r4,zero,8003074 <__mulsi3+0x8>
 800308c:	f800283a 	ret
 8003090:	f800283a 	ret

08003094 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8003094:	defffe04 	addi	sp,sp,-8
 8003098:	dfc00115 	stw	ra,4(sp)
 800309c:	df000015 	stw	fp,0(sp)
 80030a0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 80030a4:	d0a00917 	ldw	r2,-32732(gp)
 80030a8:	10000326 	beq	r2,zero,80030b8 <alt_get_errno+0x24>
 80030ac:	d0a00917 	ldw	r2,-32732(gp)
 80030b0:	103ee83a 	callr	r2
 80030b4:	00000106 	br	80030bc <alt_get_errno+0x28>
 80030b8:	d0a6c104 	addi	r2,gp,-25852
}
 80030bc:	e037883a 	mov	sp,fp
 80030c0:	dfc00117 	ldw	ra,4(sp)
 80030c4:	df000017 	ldw	fp,0(sp)
 80030c8:	dec00204 	addi	sp,sp,8
 80030cc:	f800283a 	ret

080030d0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 80030d0:	defffb04 	addi	sp,sp,-20
 80030d4:	dfc00415 	stw	ra,16(sp)
 80030d8:	df000315 	stw	fp,12(sp)
 80030dc:	df000304 	addi	fp,sp,12
 80030e0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 80030e4:	e0bfff17 	ldw	r2,-4(fp)
 80030e8:	10000816 	blt	r2,zero,800310c <close+0x3c>
 80030ec:	01400304 	movi	r5,12
 80030f0:	e13fff17 	ldw	r4,-4(fp)
 80030f4:	800306c0 	call	800306c <__mulsi3>
 80030f8:	1007883a 	mov	r3,r2
 80030fc:	00820034 	movhi	r2,2048
 8003100:	109c3104 	addi	r2,r2,28868
 8003104:	1885883a 	add	r2,r3,r2
 8003108:	00000106 	br	8003110 <close+0x40>
 800310c:	0005883a 	mov	r2,zero
 8003110:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 8003114:	e0bffd17 	ldw	r2,-12(fp)
 8003118:	10001926 	beq	r2,zero,8003180 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 800311c:	e0bffd17 	ldw	r2,-12(fp)
 8003120:	10800017 	ldw	r2,0(r2)
 8003124:	10800417 	ldw	r2,16(r2)
 8003128:	10000626 	beq	r2,zero,8003144 <close+0x74>
 800312c:	e0bffd17 	ldw	r2,-12(fp)
 8003130:	10800017 	ldw	r2,0(r2)
 8003134:	10800417 	ldw	r2,16(r2)
 8003138:	e13ffd17 	ldw	r4,-12(fp)
 800313c:	103ee83a 	callr	r2
 8003140:	00000106 	br	8003148 <close+0x78>
 8003144:	0005883a 	mov	r2,zero
 8003148:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 800314c:	e13fff17 	ldw	r4,-4(fp)
 8003150:	80037b80 	call	80037b8 <alt_release_fd>
    if (rval < 0)
 8003154:	e0bffe17 	ldw	r2,-8(fp)
 8003158:	1000070e 	bge	r2,zero,8003178 <close+0xa8>
    {
      ALT_ERRNO = -rval;
 800315c:	80030940 	call	8003094 <alt_get_errno>
 8003160:	1007883a 	mov	r3,r2
 8003164:	e0bffe17 	ldw	r2,-8(fp)
 8003168:	0085c83a 	sub	r2,zero,r2
 800316c:	18800015 	stw	r2,0(r3)
      return -1;
 8003170:	00bfffc4 	movi	r2,-1
 8003174:	00000706 	br	8003194 <close+0xc4>
    }
    return 0;
 8003178:	0005883a 	mov	r2,zero
 800317c:	00000506 	br	8003194 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 8003180:	80030940 	call	8003094 <alt_get_errno>
 8003184:	1007883a 	mov	r3,r2
 8003188:	00801444 	movi	r2,81
 800318c:	18800015 	stw	r2,0(r3)
    return -1;
 8003190:	00bfffc4 	movi	r2,-1
  }
}
 8003194:	e037883a 	mov	sp,fp
 8003198:	dfc00117 	ldw	ra,4(sp)
 800319c:	df000017 	ldw	fp,0(sp)
 80031a0:	dec00204 	addi	sp,sp,8
 80031a4:	f800283a 	ret

080031a8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 80031a8:	defffc04 	addi	sp,sp,-16
 80031ac:	df000315 	stw	fp,12(sp)
 80031b0:	df000304 	addi	fp,sp,12
 80031b4:	e13ffd15 	stw	r4,-12(fp)
 80031b8:	e17ffe15 	stw	r5,-8(fp)
 80031bc:	e1bfff15 	stw	r6,-4(fp)
  return len;
 80031c0:	e0bfff17 	ldw	r2,-4(fp)
}
 80031c4:	e037883a 	mov	sp,fp
 80031c8:	df000017 	ldw	fp,0(sp)
 80031cc:	dec00104 	addi	sp,sp,4
 80031d0:	f800283a 	ret

080031d4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 80031d4:	defffe04 	addi	sp,sp,-8
 80031d8:	dfc00115 	stw	ra,4(sp)
 80031dc:	df000015 	stw	fp,0(sp)
 80031e0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 80031e4:	d0a00917 	ldw	r2,-32732(gp)
 80031e8:	10000326 	beq	r2,zero,80031f8 <alt_get_errno+0x24>
 80031ec:	d0a00917 	ldw	r2,-32732(gp)
 80031f0:	103ee83a 	callr	r2
 80031f4:	00000106 	br	80031fc <alt_get_errno+0x28>
 80031f8:	d0a6c104 	addi	r2,gp,-25852
}
 80031fc:	e037883a 	mov	sp,fp
 8003200:	dfc00117 	ldw	ra,4(sp)
 8003204:	df000017 	ldw	fp,0(sp)
 8003208:	dec00204 	addi	sp,sp,8
 800320c:	f800283a 	ret

08003210 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 8003210:	defffb04 	addi	sp,sp,-20
 8003214:	dfc00415 	stw	ra,16(sp)
 8003218:	df000315 	stw	fp,12(sp)
 800321c:	df000304 	addi	fp,sp,12
 8003220:	e13ffe15 	stw	r4,-8(fp)
 8003224:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8003228:	e0bffe17 	ldw	r2,-8(fp)
 800322c:	10000816 	blt	r2,zero,8003250 <fstat+0x40>
 8003230:	01400304 	movi	r5,12
 8003234:	e13ffe17 	ldw	r4,-8(fp)
 8003238:	800306c0 	call	800306c <__mulsi3>
 800323c:	1007883a 	mov	r3,r2
 8003240:	00820034 	movhi	r2,2048
 8003244:	109c3104 	addi	r2,r2,28868
 8003248:	1885883a 	add	r2,r3,r2
 800324c:	00000106 	br	8003254 <fstat+0x44>
 8003250:	0005883a 	mov	r2,zero
 8003254:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 8003258:	e0bffd17 	ldw	r2,-12(fp)
 800325c:	10001026 	beq	r2,zero,80032a0 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 8003260:	e0bffd17 	ldw	r2,-12(fp)
 8003264:	10800017 	ldw	r2,0(r2)
 8003268:	10800817 	ldw	r2,32(r2)
 800326c:	10000726 	beq	r2,zero,800328c <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
 8003270:	e0bffd17 	ldw	r2,-12(fp)
 8003274:	10800017 	ldw	r2,0(r2)
 8003278:	10800817 	ldw	r2,32(r2)
 800327c:	e17fff17 	ldw	r5,-4(fp)
 8003280:	e13ffd17 	ldw	r4,-12(fp)
 8003284:	103ee83a 	callr	r2
 8003288:	00000a06 	br	80032b4 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 800328c:	e0bfff17 	ldw	r2,-4(fp)
 8003290:	00c80004 	movi	r3,8192
 8003294:	10c00115 	stw	r3,4(r2)
      return 0;
 8003298:	0005883a 	mov	r2,zero
 800329c:	00000506 	br	80032b4 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 80032a0:	80031d40 	call	80031d4 <alt_get_errno>
 80032a4:	1007883a 	mov	r3,r2
 80032a8:	00801444 	movi	r2,81
 80032ac:	18800015 	stw	r2,0(r3)
    return -1;
 80032b0:	00bfffc4 	movi	r2,-1
  }
}
 80032b4:	e037883a 	mov	sp,fp
 80032b8:	dfc00117 	ldw	ra,4(sp)
 80032bc:	df000017 	ldw	fp,0(sp)
 80032c0:	dec00204 	addi	sp,sp,8
 80032c4:	f800283a 	ret

080032c8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 80032c8:	defffe04 	addi	sp,sp,-8
 80032cc:	dfc00115 	stw	ra,4(sp)
 80032d0:	df000015 	stw	fp,0(sp)
 80032d4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 80032d8:	d0a00917 	ldw	r2,-32732(gp)
 80032dc:	10000326 	beq	r2,zero,80032ec <alt_get_errno+0x24>
 80032e0:	d0a00917 	ldw	r2,-32732(gp)
 80032e4:	103ee83a 	callr	r2
 80032e8:	00000106 	br	80032f0 <alt_get_errno+0x28>
 80032ec:	d0a6c104 	addi	r2,gp,-25852
}
 80032f0:	e037883a 	mov	sp,fp
 80032f4:	dfc00117 	ldw	ra,4(sp)
 80032f8:	df000017 	ldw	fp,0(sp)
 80032fc:	dec00204 	addi	sp,sp,8
 8003300:	f800283a 	ret

08003304 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 8003304:	deffed04 	addi	sp,sp,-76
 8003308:	dfc01215 	stw	ra,72(sp)
 800330c:	df001115 	stw	fp,68(sp)
 8003310:	df001104 	addi	fp,sp,68
 8003314:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8003318:	e0bfff17 	ldw	r2,-4(fp)
 800331c:	10000816 	blt	r2,zero,8003340 <isatty+0x3c>
 8003320:	01400304 	movi	r5,12
 8003324:	e13fff17 	ldw	r4,-4(fp)
 8003328:	800306c0 	call	800306c <__mulsi3>
 800332c:	1007883a 	mov	r3,r2
 8003330:	00820034 	movhi	r2,2048
 8003334:	109c3104 	addi	r2,r2,28868
 8003338:	1885883a 	add	r2,r3,r2
 800333c:	00000106 	br	8003344 <isatty+0x40>
 8003340:	0005883a 	mov	r2,zero
 8003344:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 8003348:	e0bfef17 	ldw	r2,-68(fp)
 800334c:	10000e26 	beq	r2,zero,8003388 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 8003350:	e0bfef17 	ldw	r2,-68(fp)
 8003354:	10800017 	ldw	r2,0(r2)
 8003358:	10800817 	ldw	r2,32(r2)
 800335c:	1000021e 	bne	r2,zero,8003368 <isatty+0x64>
    {
      return 1;
 8003360:	00800044 	movi	r2,1
 8003364:	00000d06 	br	800339c <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 8003368:	e0bff004 	addi	r2,fp,-64
 800336c:	100b883a 	mov	r5,r2
 8003370:	e13fff17 	ldw	r4,-4(fp)
 8003374:	80032100 	call	8003210 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 8003378:	e0bff117 	ldw	r2,-60(fp)
 800337c:	10880020 	cmpeqi	r2,r2,8192
 8003380:	10803fcc 	andi	r2,r2,255
 8003384:	00000506 	br	800339c <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 8003388:	80032c80 	call	80032c8 <alt_get_errno>
 800338c:	1007883a 	mov	r3,r2
 8003390:	00801444 	movi	r2,81
 8003394:	18800015 	stw	r2,0(r3)
    return 0;
 8003398:	0005883a 	mov	r2,zero
  }
}
 800339c:	e037883a 	mov	sp,fp
 80033a0:	dfc00117 	ldw	ra,4(sp)
 80033a4:	df000017 	ldw	fp,0(sp)
 80033a8:	dec00204 	addi	sp,sp,8
 80033ac:	f800283a 	ret

080033b0 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 80033b0:	defffc04 	addi	sp,sp,-16
 80033b4:	df000315 	stw	fp,12(sp)
 80033b8:	df000304 	addi	fp,sp,12
 80033bc:	e13ffd15 	stw	r4,-12(fp)
 80033c0:	e17ffe15 	stw	r5,-8(fp)
 80033c4:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 80033c8:	e0fffe17 	ldw	r3,-8(fp)
 80033cc:	e0bffd17 	ldw	r2,-12(fp)
 80033d0:	18800c26 	beq	r3,r2,8003404 <alt_load_section+0x54>
  {
    while( to != end )
 80033d4:	00000806 	br	80033f8 <alt_load_section+0x48>
    {
      *to++ = *from++;
 80033d8:	e0bffe17 	ldw	r2,-8(fp)
 80033dc:	10c00104 	addi	r3,r2,4
 80033e0:	e0fffe15 	stw	r3,-8(fp)
 80033e4:	e0fffd17 	ldw	r3,-12(fp)
 80033e8:	19000104 	addi	r4,r3,4
 80033ec:	e13ffd15 	stw	r4,-12(fp)
 80033f0:	18c00017 	ldw	r3,0(r3)
 80033f4:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 80033f8:	e0fffe17 	ldw	r3,-8(fp)
 80033fc:	e0bfff17 	ldw	r2,-4(fp)
 8003400:	18bff51e 	bne	r3,r2,80033d8 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
 8003404:	0001883a 	nop
 8003408:	e037883a 	mov	sp,fp
 800340c:	df000017 	ldw	fp,0(sp)
 8003410:	dec00104 	addi	sp,sp,4
 8003414:	f800283a 	ret

08003418 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 8003418:	defffe04 	addi	sp,sp,-8
 800341c:	dfc00115 	stw	ra,4(sp)
 8003420:	df000015 	stw	fp,0(sp)
 8003424:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 8003428:	01820074 	movhi	r6,2049
 800342c:	31a0cc04 	addi	r6,r6,-31952
 8003430:	01420034 	movhi	r5,2048
 8003434:	295a1c04 	addi	r5,r5,26736
 8003438:	01020074 	movhi	r4,2049
 800343c:	2120cc04 	addi	r4,r4,-31952
 8003440:	80033b00 	call	80033b0 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 8003444:	01820034 	movhi	r6,2048
 8003448:	31807004 	addi	r6,r6,448
 800344c:	01420034 	movhi	r5,2048
 8003450:	29400804 	addi	r5,r5,32
 8003454:	01020034 	movhi	r4,2048
 8003458:	21000804 	addi	r4,r4,32
 800345c:	80033b00 	call	80033b0 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 8003460:	01820034 	movhi	r6,2048
 8003464:	319a1c04 	addi	r6,r6,26736
 8003468:	01420034 	movhi	r5,2048
 800346c:	2959f804 	addi	r5,r5,26592
 8003470:	01020034 	movhi	r4,2048
 8003474:	2119f804 	addi	r4,r4,26592
 8003478:	80033b00 	call	80033b0 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 800347c:	80057c40 	call	80057c4 <alt_dcache_flush_all>
  alt_icache_flush_all();
 8003480:	8005a140 	call	8005a14 <alt_icache_flush_all>
}
 8003484:	0001883a 	nop
 8003488:	e037883a 	mov	sp,fp
 800348c:	dfc00117 	ldw	ra,4(sp)
 8003490:	df000017 	ldw	fp,0(sp)
 8003494:	dec00204 	addi	sp,sp,8
 8003498:	f800283a 	ret

0800349c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800349c:	defffe04 	addi	sp,sp,-8
 80034a0:	dfc00115 	stw	ra,4(sp)
 80034a4:	df000015 	stw	fp,0(sp)
 80034a8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 80034ac:	d0a00917 	ldw	r2,-32732(gp)
 80034b0:	10000326 	beq	r2,zero,80034c0 <alt_get_errno+0x24>
 80034b4:	d0a00917 	ldw	r2,-32732(gp)
 80034b8:	103ee83a 	callr	r2
 80034bc:	00000106 	br	80034c4 <alt_get_errno+0x28>
 80034c0:	d0a6c104 	addi	r2,gp,-25852
}
 80034c4:	e037883a 	mov	sp,fp
 80034c8:	dfc00117 	ldw	ra,4(sp)
 80034cc:	df000017 	ldw	fp,0(sp)
 80034d0:	dec00204 	addi	sp,sp,8
 80034d4:	f800283a 	ret

080034d8 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 80034d8:	defff904 	addi	sp,sp,-28
 80034dc:	dfc00615 	stw	ra,24(sp)
 80034e0:	df000515 	stw	fp,20(sp)
 80034e4:	df000504 	addi	fp,sp,20
 80034e8:	e13ffd15 	stw	r4,-12(fp)
 80034ec:	e17ffe15 	stw	r5,-8(fp)
 80034f0:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 80034f4:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 80034f8:	e0bffd17 	ldw	r2,-12(fp)
 80034fc:	10000816 	blt	r2,zero,8003520 <lseek+0x48>
 8003500:	01400304 	movi	r5,12
 8003504:	e13ffd17 	ldw	r4,-12(fp)
 8003508:	800306c0 	call	800306c <__mulsi3>
 800350c:	1007883a 	mov	r3,r2
 8003510:	00820034 	movhi	r2,2048
 8003514:	109c3104 	addi	r2,r2,28868
 8003518:	1885883a 	add	r2,r3,r2
 800351c:	00000106 	br	8003524 <lseek+0x4c>
 8003520:	0005883a 	mov	r2,zero
 8003524:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 8003528:	e0bffc17 	ldw	r2,-16(fp)
 800352c:	10001026 	beq	r2,zero,8003570 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 8003530:	e0bffc17 	ldw	r2,-16(fp)
 8003534:	10800017 	ldw	r2,0(r2)
 8003538:	10800717 	ldw	r2,28(r2)
 800353c:	10000926 	beq	r2,zero,8003564 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 8003540:	e0bffc17 	ldw	r2,-16(fp)
 8003544:	10800017 	ldw	r2,0(r2)
 8003548:	10800717 	ldw	r2,28(r2)
 800354c:	e1bfff17 	ldw	r6,-4(fp)
 8003550:	e17ffe17 	ldw	r5,-8(fp)
 8003554:	e13ffc17 	ldw	r4,-16(fp)
 8003558:	103ee83a 	callr	r2
 800355c:	e0bffb15 	stw	r2,-20(fp)
 8003560:	00000506 	br	8003578 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 8003564:	00bfde84 	movi	r2,-134
 8003568:	e0bffb15 	stw	r2,-20(fp)
 800356c:	00000206 	br	8003578 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
 8003570:	00bfebc4 	movi	r2,-81
 8003574:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 8003578:	e0bffb17 	ldw	r2,-20(fp)
 800357c:	1000070e 	bge	r2,zero,800359c <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
 8003580:	800349c0 	call	800349c <alt_get_errno>
 8003584:	1007883a 	mov	r3,r2
 8003588:	e0bffb17 	ldw	r2,-20(fp)
 800358c:	0085c83a 	sub	r2,zero,r2
 8003590:	18800015 	stw	r2,0(r3)
    rc = -1;
 8003594:	00bfffc4 	movi	r2,-1
 8003598:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 800359c:	e0bffb17 	ldw	r2,-20(fp)
}
 80035a0:	e037883a 	mov	sp,fp
 80035a4:	dfc00117 	ldw	ra,4(sp)
 80035a8:	df000017 	ldw	fp,0(sp)
 80035ac:	dec00204 	addi	sp,sp,8
 80035b0:	f800283a 	ret

080035b4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 80035b4:	defffd04 	addi	sp,sp,-12
 80035b8:	dfc00215 	stw	ra,8(sp)
 80035bc:	df000115 	stw	fp,4(sp)
 80035c0:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 80035c4:	0009883a 	mov	r4,zero
 80035c8:	8003a5c0 	call	8003a5c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 80035cc:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 80035d0:	8003a940 	call	8003a94 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 80035d4:	01820034 	movhi	r6,2048
 80035d8:	319a0a04 	addi	r6,r6,26664
 80035dc:	01420034 	movhi	r5,2048
 80035e0:	295a0a04 	addi	r5,r5,26664
 80035e4:	01020034 	movhi	r4,2048
 80035e8:	211a0a04 	addi	r4,r4,26664
 80035ec:	8005db80 	call	8005db8 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 80035f0:	80058c40 	call	80058c4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 80035f4:	01020034 	movhi	r4,2048
 80035f8:	21164904 	addi	r4,r4,22820
 80035fc:	800644c0 	call	800644c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 8003600:	d0a6c217 	ldw	r2,-25848(gp)
 8003604:	d0e6c317 	ldw	r3,-25844(gp)
 8003608:	d126c417 	ldw	r4,-25840(gp)
 800360c:	200d883a 	mov	r6,r4
 8003610:	180b883a 	mov	r5,r3
 8003614:	1009883a 	mov	r4,r2
 8003618:	80001fc0 	call	80001fc <main>
 800361c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 8003620:	01000044 	movi	r4,1
 8003624:	80030d00 	call	80030d0 <close>
  exit (result);
 8003628:	e13fff17 	ldw	r4,-4(fp)
 800362c:	80064600 	call	8006460 <exit>

08003630 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 8003630:	defffe04 	addi	sp,sp,-8
 8003634:	df000115 	stw	fp,4(sp)
 8003638:	df000104 	addi	fp,sp,4
 800363c:	e13fff15 	stw	r4,-4(fp)
}
 8003640:	0001883a 	nop
 8003644:	e037883a 	mov	sp,fp
 8003648:	df000017 	ldw	fp,0(sp)
 800364c:	dec00104 	addi	sp,sp,4
 8003650:	f800283a 	ret

08003654 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 8003654:	defffe04 	addi	sp,sp,-8
 8003658:	df000115 	stw	fp,4(sp)
 800365c:	df000104 	addi	fp,sp,4
 8003660:	e13fff15 	stw	r4,-4(fp)
}
 8003664:	0001883a 	nop
 8003668:	e037883a 	mov	sp,fp
 800366c:	df000017 	ldw	fp,0(sp)
 8003670:	dec00104 	addi	sp,sp,4
 8003674:	f800283a 	ret

08003678 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8003678:	defffe04 	addi	sp,sp,-8
 800367c:	dfc00115 	stw	ra,4(sp)
 8003680:	df000015 	stw	fp,0(sp)
 8003684:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8003688:	d0a00917 	ldw	r2,-32732(gp)
 800368c:	10000326 	beq	r2,zero,800369c <alt_get_errno+0x24>
 8003690:	d0a00917 	ldw	r2,-32732(gp)
 8003694:	103ee83a 	callr	r2
 8003698:	00000106 	br	80036a0 <alt_get_errno+0x28>
 800369c:	d0a6c104 	addi	r2,gp,-25852
}
 80036a0:	e037883a 	mov	sp,fp
 80036a4:	dfc00117 	ldw	ra,4(sp)
 80036a8:	df000017 	ldw	fp,0(sp)
 80036ac:	dec00204 	addi	sp,sp,8
 80036b0:	f800283a 	ret

080036b4 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 80036b4:	defff904 	addi	sp,sp,-28
 80036b8:	dfc00615 	stw	ra,24(sp)
 80036bc:	df000515 	stw	fp,20(sp)
 80036c0:	df000504 	addi	fp,sp,20
 80036c4:	e13ffd15 	stw	r4,-12(fp)
 80036c8:	e17ffe15 	stw	r5,-8(fp)
 80036cc:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 80036d0:	e0bffd17 	ldw	r2,-12(fp)
 80036d4:	10000816 	blt	r2,zero,80036f8 <read+0x44>
 80036d8:	01400304 	movi	r5,12
 80036dc:	e13ffd17 	ldw	r4,-12(fp)
 80036e0:	800306c0 	call	800306c <__mulsi3>
 80036e4:	1007883a 	mov	r3,r2
 80036e8:	00820034 	movhi	r2,2048
 80036ec:	109c3104 	addi	r2,r2,28868
 80036f0:	1885883a 	add	r2,r3,r2
 80036f4:	00000106 	br	80036fc <read+0x48>
 80036f8:	0005883a 	mov	r2,zero
 80036fc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 8003700:	e0bffb17 	ldw	r2,-20(fp)
 8003704:	10002226 	beq	r2,zero,8003790 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 8003708:	e0bffb17 	ldw	r2,-20(fp)
 800370c:	10800217 	ldw	r2,8(r2)
 8003710:	108000cc 	andi	r2,r2,3
 8003714:	10800060 	cmpeqi	r2,r2,1
 8003718:	1000181e 	bne	r2,zero,800377c <read+0xc8>
        (fd->dev->read))
 800371c:	e0bffb17 	ldw	r2,-20(fp)
 8003720:	10800017 	ldw	r2,0(r2)
 8003724:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 8003728:	10001426 	beq	r2,zero,800377c <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 800372c:	e0bffb17 	ldw	r2,-20(fp)
 8003730:	10800017 	ldw	r2,0(r2)
 8003734:	10800517 	ldw	r2,20(r2)
 8003738:	e0ffff17 	ldw	r3,-4(fp)
 800373c:	180d883a 	mov	r6,r3
 8003740:	e17ffe17 	ldw	r5,-8(fp)
 8003744:	e13ffb17 	ldw	r4,-20(fp)
 8003748:	103ee83a 	callr	r2
 800374c:	e0bffc15 	stw	r2,-16(fp)
 8003750:	e0bffc17 	ldw	r2,-16(fp)
 8003754:	1000070e 	bge	r2,zero,8003774 <read+0xc0>
        {
          ALT_ERRNO = -rval;
 8003758:	80036780 	call	8003678 <alt_get_errno>
 800375c:	1007883a 	mov	r3,r2
 8003760:	e0bffc17 	ldw	r2,-16(fp)
 8003764:	0085c83a 	sub	r2,zero,r2
 8003768:	18800015 	stw	r2,0(r3)
          return -1;
 800376c:	00bfffc4 	movi	r2,-1
 8003770:	00000c06 	br	80037a4 <read+0xf0>
        }
        return rval;
 8003774:	e0bffc17 	ldw	r2,-16(fp)
 8003778:	00000a06 	br	80037a4 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
 800377c:	80036780 	call	8003678 <alt_get_errno>
 8003780:	1007883a 	mov	r3,r2
 8003784:	00800344 	movi	r2,13
 8003788:	18800015 	stw	r2,0(r3)
 800378c:	00000406 	br	80037a0 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 8003790:	80036780 	call	8003678 <alt_get_errno>
 8003794:	1007883a 	mov	r3,r2
 8003798:	00801444 	movi	r2,81
 800379c:	18800015 	stw	r2,0(r3)
  }
  return -1;
 80037a0:	00bfffc4 	movi	r2,-1
}
 80037a4:	e037883a 	mov	sp,fp
 80037a8:	dfc00117 	ldw	ra,4(sp)
 80037ac:	df000017 	ldw	fp,0(sp)
 80037b0:	dec00204 	addi	sp,sp,8
 80037b4:	f800283a 	ret

080037b8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 80037b8:	defffc04 	addi	sp,sp,-16
 80037bc:	dfc00315 	stw	ra,12(sp)
 80037c0:	df000215 	stw	fp,8(sp)
 80037c4:	dc000115 	stw	r16,4(sp)
 80037c8:	df000204 	addi	fp,sp,8
 80037cc:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
 80037d0:	e0bffe17 	ldw	r2,-8(fp)
 80037d4:	108000d0 	cmplti	r2,r2,3
 80037d8:	1000111e 	bne	r2,zero,8003820 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
 80037dc:	04020034 	movhi	r16,2048
 80037e0:	841c3104 	addi	r16,r16,28868
 80037e4:	e0bffe17 	ldw	r2,-8(fp)
 80037e8:	01400304 	movi	r5,12
 80037ec:	1009883a 	mov	r4,r2
 80037f0:	800306c0 	call	800306c <__mulsi3>
 80037f4:	8085883a 	add	r2,r16,r2
 80037f8:	10800204 	addi	r2,r2,8
 80037fc:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 8003800:	04020034 	movhi	r16,2048
 8003804:	841c3104 	addi	r16,r16,28868
 8003808:	e0bffe17 	ldw	r2,-8(fp)
 800380c:	01400304 	movi	r5,12
 8003810:	1009883a 	mov	r4,r2
 8003814:	800306c0 	call	800306c <__mulsi3>
 8003818:	8085883a 	add	r2,r16,r2
 800381c:	10000015 	stw	zero,0(r2)
  }
}
 8003820:	0001883a 	nop
 8003824:	e6ffff04 	addi	sp,fp,-4
 8003828:	dfc00217 	ldw	ra,8(sp)
 800382c:	df000117 	ldw	fp,4(sp)
 8003830:	dc000017 	ldw	r16,0(sp)
 8003834:	dec00304 	addi	sp,sp,12
 8003838:	f800283a 	ret

0800383c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 800383c:	defff904 	addi	sp,sp,-28
 8003840:	df000615 	stw	fp,24(sp)
 8003844:	df000604 	addi	fp,sp,24
 8003848:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800384c:	0005303a 	rdctl	r2,status
 8003850:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8003854:	e0fffe17 	ldw	r3,-8(fp)
 8003858:	00bfff84 	movi	r2,-2
 800385c:	1884703a 	and	r2,r3,r2
 8003860:	1001703a 	wrctl	status,r2
  
  return context;
 8003864:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 8003868:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 800386c:	d0a00a17 	ldw	r2,-32728(gp)
 8003870:	10c000c4 	addi	r3,r2,3
 8003874:	00bfff04 	movi	r2,-4
 8003878:	1884703a 	and	r2,r3,r2
 800387c:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 8003880:	d0e00a17 	ldw	r3,-32728(gp)
 8003884:	e0bfff17 	ldw	r2,-4(fp)
 8003888:	1887883a 	add	r3,r3,r2
 800388c:	00840034 	movhi	r2,4096
 8003890:	10800004 	addi	r2,r2,0
 8003894:	10c0062e 	bgeu	r2,r3,80038b0 <sbrk+0x74>
 8003898:	e0bffb17 	ldw	r2,-20(fp)
 800389c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80038a0:	e0bffa17 	ldw	r2,-24(fp)
 80038a4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 80038a8:	00bfffc4 	movi	r2,-1
 80038ac:	00000b06 	br	80038dc <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 80038b0:	d0a00a17 	ldw	r2,-32728(gp)
 80038b4:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 80038b8:	d0e00a17 	ldw	r3,-32728(gp)
 80038bc:	e0bfff17 	ldw	r2,-4(fp)
 80038c0:	1885883a 	add	r2,r3,r2
 80038c4:	d0a00a15 	stw	r2,-32728(gp)
 80038c8:	e0bffb17 	ldw	r2,-20(fp)
 80038cc:	e0bffc15 	stw	r2,-16(fp)
 80038d0:	e0bffc17 	ldw	r2,-16(fp)
 80038d4:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 80038d8:	e0bffd17 	ldw	r2,-12(fp)
} 
 80038dc:	e037883a 	mov	sp,fp
 80038e0:	df000017 	ldw	fp,0(sp)
 80038e4:	dec00104 	addi	sp,sp,4
 80038e8:	f800283a 	ret

080038ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 80038ec:	defffe04 	addi	sp,sp,-8
 80038f0:	dfc00115 	stw	ra,4(sp)
 80038f4:	df000015 	stw	fp,0(sp)
 80038f8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 80038fc:	d0a00917 	ldw	r2,-32732(gp)
 8003900:	10000326 	beq	r2,zero,8003910 <alt_get_errno+0x24>
 8003904:	d0a00917 	ldw	r2,-32732(gp)
 8003908:	103ee83a 	callr	r2
 800390c:	00000106 	br	8003914 <alt_get_errno+0x28>
 8003910:	d0a6c104 	addi	r2,gp,-25852
}
 8003914:	e037883a 	mov	sp,fp
 8003918:	dfc00117 	ldw	ra,4(sp)
 800391c:	df000017 	ldw	fp,0(sp)
 8003920:	dec00204 	addi	sp,sp,8
 8003924:	f800283a 	ret

08003928 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 8003928:	defff904 	addi	sp,sp,-28
 800392c:	dfc00615 	stw	ra,24(sp)
 8003930:	df000515 	stw	fp,20(sp)
 8003934:	df000504 	addi	fp,sp,20
 8003938:	e13ffd15 	stw	r4,-12(fp)
 800393c:	e17ffe15 	stw	r5,-8(fp)
 8003940:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8003944:	e0bffd17 	ldw	r2,-12(fp)
 8003948:	10000816 	blt	r2,zero,800396c <write+0x44>
 800394c:	01400304 	movi	r5,12
 8003950:	e13ffd17 	ldw	r4,-12(fp)
 8003954:	800306c0 	call	800306c <__mulsi3>
 8003958:	1007883a 	mov	r3,r2
 800395c:	00820034 	movhi	r2,2048
 8003960:	109c3104 	addi	r2,r2,28868
 8003964:	1885883a 	add	r2,r3,r2
 8003968:	00000106 	br	8003970 <write+0x48>
 800396c:	0005883a 	mov	r2,zero
 8003970:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 8003974:	e0bffb17 	ldw	r2,-20(fp)
 8003978:	10002126 	beq	r2,zero,8003a00 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 800397c:	e0bffb17 	ldw	r2,-20(fp)
 8003980:	10800217 	ldw	r2,8(r2)
 8003984:	108000cc 	andi	r2,r2,3
 8003988:	10001826 	beq	r2,zero,80039ec <write+0xc4>
 800398c:	e0bffb17 	ldw	r2,-20(fp)
 8003990:	10800017 	ldw	r2,0(r2)
 8003994:	10800617 	ldw	r2,24(r2)
 8003998:	10001426 	beq	r2,zero,80039ec <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 800399c:	e0bffb17 	ldw	r2,-20(fp)
 80039a0:	10800017 	ldw	r2,0(r2)
 80039a4:	10800617 	ldw	r2,24(r2)
 80039a8:	e0ffff17 	ldw	r3,-4(fp)
 80039ac:	180d883a 	mov	r6,r3
 80039b0:	e17ffe17 	ldw	r5,-8(fp)
 80039b4:	e13ffb17 	ldw	r4,-20(fp)
 80039b8:	103ee83a 	callr	r2
 80039bc:	e0bffc15 	stw	r2,-16(fp)
 80039c0:	e0bffc17 	ldw	r2,-16(fp)
 80039c4:	1000070e 	bge	r2,zero,80039e4 <write+0xbc>
      {
        ALT_ERRNO = -rval;
 80039c8:	80038ec0 	call	80038ec <alt_get_errno>
 80039cc:	1007883a 	mov	r3,r2
 80039d0:	e0bffc17 	ldw	r2,-16(fp)
 80039d4:	0085c83a 	sub	r2,zero,r2
 80039d8:	18800015 	stw	r2,0(r3)
        return -1;
 80039dc:	00bfffc4 	movi	r2,-1
 80039e0:	00000c06 	br	8003a14 <write+0xec>
      }
      return rval;
 80039e4:	e0bffc17 	ldw	r2,-16(fp)
 80039e8:	00000a06 	br	8003a14 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
 80039ec:	80038ec0 	call	80038ec <alt_get_errno>
 80039f0:	1007883a 	mov	r3,r2
 80039f4:	00800344 	movi	r2,13
 80039f8:	18800015 	stw	r2,0(r3)
 80039fc:	00000406 	br	8003a10 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 8003a00:	80038ec0 	call	80038ec <alt_get_errno>
 8003a04:	1007883a 	mov	r3,r2
 8003a08:	00801444 	movi	r2,81
 8003a0c:	18800015 	stw	r2,0(r3)
  }
  return -1;
 8003a10:	00bfffc4 	movi	r2,-1
}
 8003a14:	e037883a 	mov	sp,fp
 8003a18:	dfc00117 	ldw	ra,4(sp)
 8003a1c:	df000017 	ldw	fp,0(sp)
 8003a20:	dec00204 	addi	sp,sp,8
 8003a24:	f800283a 	ret

08003a28 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 8003a28:	defffd04 	addi	sp,sp,-12
 8003a2c:	dfc00215 	stw	ra,8(sp)
 8003a30:	df000115 	stw	fp,4(sp)
 8003a34:	df000104 	addi	fp,sp,4
 8003a38:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 8003a3c:	d1600604 	addi	r5,gp,-32744
 8003a40:	e13fff17 	ldw	r4,-4(fp)
 8003a44:	80058200 	call	8005820 <alt_dev_llist_insert>
}
 8003a48:	e037883a 	mov	sp,fp
 8003a4c:	dfc00117 	ldw	ra,4(sp)
 8003a50:	df000017 	ldw	fp,0(sp)
 8003a54:	dec00204 	addi	sp,sp,8
 8003a58:	f800283a 	ret

08003a5c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 8003a5c:	defffd04 	addi	sp,sp,-12
 8003a60:	dfc00215 	stw	ra,8(sp)
 8003a64:	df000115 	stw	fp,4(sp)
 8003a68:	df000104 	addi	fp,sp,4
 8003a6c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
 8003a70:	800625c0 	call	800625c <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 8003a74:	00800044 	movi	r2,1
 8003a78:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 8003a7c:	0001883a 	nop
 8003a80:	e037883a 	mov	sp,fp
 8003a84:	dfc00117 	ldw	ra,4(sp)
 8003a88:	df000017 	ldw	fp,0(sp)
 8003a8c:	dec00204 	addi	sp,sp,8
 8003a90:	f800283a 	ret

08003a94 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 8003a94:	defffd04 	addi	sp,sp,-12
 8003a98:	dfc00215 	stw	ra,8(sp)
 8003a9c:	df000115 	stw	fp,4(sp)
 8003aa0:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 8003aa4:	000d883a 	mov	r6,zero
 8003aa8:	000b883a 	mov	r5,zero
 8003aac:	01020034 	movhi	r4,2048
 8003ab0:	211c9b04 	addi	r4,r4,29292
 8003ab4:	8003e1c0 	call	8003e1c <altera_avalon_jtag_uart_init>
 8003ab8:	01020034 	movhi	r4,2048
 8003abc:	211c9104 	addi	r4,r4,29252
 8003ac0:	8003a280 	call	8003a28 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( VIDEO_PIXEL_BUFFER_DMA_0, video_pixel_buffer_dma_0);
 8003ac4:	00820074 	movhi	r2,2049
 8003ac8:	10a0a904 	addi	r2,r2,-32092
 8003acc:	10800a17 	ldw	r2,40(r2)
 8003ad0:	10800017 	ldw	r2,0(r2)
 8003ad4:	1007883a 	mov	r3,r2
 8003ad8:	00820074 	movhi	r2,2049
 8003adc:	10a0a904 	addi	r2,r2,-32092
 8003ae0:	10c00b15 	stw	r3,44(r2)
 8003ae4:	00820074 	movhi	r2,2049
 8003ae8:	10a0a904 	addi	r2,r2,-32092
 8003aec:	10800a17 	ldw	r2,40(r2)
 8003af0:	10800104 	addi	r2,r2,4
 8003af4:	10800017 	ldw	r2,0(r2)
 8003af8:	1007883a 	mov	r3,r2
 8003afc:	00820074 	movhi	r2,2049
 8003b00:	10a0a904 	addi	r2,r2,-32092
 8003b04:	10c00c15 	stw	r3,48(r2)
 8003b08:	00820074 	movhi	r2,2049
 8003b0c:	10a0a904 	addi	r2,r2,-32092
 8003b10:	10800a17 	ldw	r2,40(r2)
 8003b14:	10800204 	addi	r2,r2,8
 8003b18:	10800017 	ldw	r2,0(r2)
 8003b1c:	10ffffcc 	andi	r3,r2,65535
 8003b20:	00820074 	movhi	r2,2049
 8003b24:	10a0a904 	addi	r2,r2,-32092
 8003b28:	10c00f15 	stw	r3,60(r2)
 8003b2c:	00820074 	movhi	r2,2049
 8003b30:	10a0a904 	addi	r2,r2,-32092
 8003b34:	10800a17 	ldw	r2,40(r2)
 8003b38:	10800204 	addi	r2,r2,8
 8003b3c:	10800017 	ldw	r2,0(r2)
 8003b40:	1006d43a 	srli	r3,r2,16
 8003b44:	00820074 	movhi	r2,2049
 8003b48:	10a0a904 	addi	r2,r2,-32092
 8003b4c:	10c01015 	stw	r3,64(r2)
 8003b50:	00820074 	movhi	r2,2049
 8003b54:	10a0a904 	addi	r2,r2,-32092
 8003b58:	10800a17 	ldw	r2,40(r2)
 8003b5c:	10800304 	addi	r2,r2,12
 8003b60:	10800017 	ldw	r2,0(r2)
 8003b64:	1005d07a 	srai	r2,r2,1
 8003b68:	10c0004c 	andi	r3,r2,1
 8003b6c:	00820074 	movhi	r2,2049
 8003b70:	10a0a904 	addi	r2,r2,-32092
 8003b74:	10c00d15 	stw	r3,52(r2)
 8003b78:	00820074 	movhi	r2,2049
 8003b7c:	10a0a904 	addi	r2,r2,-32092
 8003b80:	10800a17 	ldw	r2,40(r2)
 8003b84:	10800304 	addi	r2,r2,12
 8003b88:	10800017 	ldw	r2,0(r2)
 8003b8c:	1005d13a 	srai	r2,r2,4
 8003b90:	10c003cc 	andi	r3,r2,15
 8003b94:	00820074 	movhi	r2,2049
 8003b98:	10a0a904 	addi	r2,r2,-32092
 8003b9c:	10c00e15 	stw	r3,56(r2)
 8003ba0:	00820074 	movhi	r2,2049
 8003ba4:	10a0a904 	addi	r2,r2,-32092
 8003ba8:	10800a17 	ldw	r2,40(r2)
 8003bac:	10800304 	addi	r2,r2,12
 8003bb0:	10800017 	ldw	r2,0(r2)
 8003bb4:	1005d43a 	srai	r2,r2,16
 8003bb8:	e0bfff05 	stb	r2,-4(fp)
 8003bbc:	00820074 	movhi	r2,2049
 8003bc0:	10a0a904 	addi	r2,r2,-32092
 8003bc4:	10800a17 	ldw	r2,40(r2)
 8003bc8:	10800304 	addi	r2,r2,12
 8003bcc:	10800017 	ldw	r2,0(r2)
 8003bd0:	1004d63a 	srli	r2,r2,24
 8003bd4:	e0bfff45 	stb	r2,-3(fp)
 8003bd8:	00820074 	movhi	r2,2049
 8003bdc:	10a0a904 	addi	r2,r2,-32092
 8003be0:	10800e17 	ldw	r2,56(r2)
 8003be4:	10800058 	cmpnei	r2,r2,1
 8003be8:	1000041e 	bne	r2,zero,8003bfc <alt_sys_init+0x168>
 8003bec:	00820074 	movhi	r2,2049
 8003bf0:	10a0a904 	addi	r2,r2,-32092
 8003bf4:	10001115 	stw	zero,68(r2)
 8003bf8:	00000e06 	br	8003c34 <alt_sys_init+0x1a0>
 8003bfc:	00820074 	movhi	r2,2049
 8003c00:	10a0a904 	addi	r2,r2,-32092
 8003c04:	10800e17 	ldw	r2,56(r2)
 8003c08:	10800098 	cmpnei	r2,r2,2
 8003c0c:	1000051e 	bne	r2,zero,8003c24 <alt_sys_init+0x190>
 8003c10:	00820074 	movhi	r2,2049
 8003c14:	10a0a904 	addi	r2,r2,-32092
 8003c18:	00c00044 	movi	r3,1
 8003c1c:	10c01115 	stw	r3,68(r2)
 8003c20:	00000406 	br	8003c34 <alt_sys_init+0x1a0>
 8003c24:	00820074 	movhi	r2,2049
 8003c28:	10a0a904 	addi	r2,r2,-32092
 8003c2c:	00c00084 	movi	r3,2
 8003c30:	10c01115 	stw	r3,68(r2)
 8003c34:	e0bfff03 	ldbu	r2,-4(fp)
 8003c38:	00c00804 	movi	r3,32
 8003c3c:	1885c83a 	sub	r2,r3,r2
 8003c40:	00ffffc4 	movi	r3,-1
 8003c44:	1886d83a 	srl	r3,r3,r2
 8003c48:	00820074 	movhi	r2,2049
 8003c4c:	10a0a904 	addi	r2,r2,-32092
 8003c50:	10c01215 	stw	r3,72(r2)
 8003c54:	e0ffff03 	ldbu	r3,-4(fp)
 8003c58:	00820074 	movhi	r2,2049
 8003c5c:	10a0a904 	addi	r2,r2,-32092
 8003c60:	10801117 	ldw	r2,68(r2)
 8003c64:	1887883a 	add	r3,r3,r2
 8003c68:	00820074 	movhi	r2,2049
 8003c6c:	10a0a904 	addi	r2,r2,-32092
 8003c70:	10c01315 	stw	r3,76(r2)
 8003c74:	e0bfff43 	ldbu	r2,-3(fp)
 8003c78:	00c00804 	movi	r3,32
 8003c7c:	1885c83a 	sub	r2,r3,r2
 8003c80:	00ffffc4 	movi	r3,-1
 8003c84:	1886d83a 	srl	r3,r3,r2
 8003c88:	00820074 	movhi	r2,2049
 8003c8c:	10a0a904 	addi	r2,r2,-32092
 8003c90:	10c01415 	stw	r3,80(r2)
 8003c94:	01020074 	movhi	r4,2049
 8003c98:	2120a904 	addi	r4,r4,-32092
 8003c9c:	8003a280 	call	8003a28 <alt_dev_reg>
}
 8003ca0:	0001883a 	nop
 8003ca4:	e037883a 	mov	sp,fp
 8003ca8:	dfc00117 	ldw	ra,4(sp)
 8003cac:	df000017 	ldw	fp,0(sp)
 8003cb0:	dec00204 	addi	sp,sp,8
 8003cb4:	f800283a 	ret

08003cb8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 8003cb8:	defffa04 	addi	sp,sp,-24
 8003cbc:	dfc00515 	stw	ra,20(sp)
 8003cc0:	df000415 	stw	fp,16(sp)
 8003cc4:	df000404 	addi	fp,sp,16
 8003cc8:	e13ffd15 	stw	r4,-12(fp)
 8003ccc:	e17ffe15 	stw	r5,-8(fp)
 8003cd0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8003cd4:	e0bffd17 	ldw	r2,-12(fp)
 8003cd8:	10800017 	ldw	r2,0(r2)
 8003cdc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 8003ce0:	e0bffc17 	ldw	r2,-16(fp)
 8003ce4:	10c00a04 	addi	r3,r2,40
 8003ce8:	e0bffd17 	ldw	r2,-12(fp)
 8003cec:	10800217 	ldw	r2,8(r2)
 8003cf0:	100f883a 	mov	r7,r2
 8003cf4:	e1bfff17 	ldw	r6,-4(fp)
 8003cf8:	e17ffe17 	ldw	r5,-8(fp)
 8003cfc:	1809883a 	mov	r4,r3
 8003d00:	80042e00 	call	80042e0 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 8003d04:	e037883a 	mov	sp,fp
 8003d08:	dfc00117 	ldw	ra,4(sp)
 8003d0c:	df000017 	ldw	fp,0(sp)
 8003d10:	dec00204 	addi	sp,sp,8
 8003d14:	f800283a 	ret

08003d18 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 8003d18:	defffa04 	addi	sp,sp,-24
 8003d1c:	dfc00515 	stw	ra,20(sp)
 8003d20:	df000415 	stw	fp,16(sp)
 8003d24:	df000404 	addi	fp,sp,16
 8003d28:	e13ffd15 	stw	r4,-12(fp)
 8003d2c:	e17ffe15 	stw	r5,-8(fp)
 8003d30:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8003d34:	e0bffd17 	ldw	r2,-12(fp)
 8003d38:	10800017 	ldw	r2,0(r2)
 8003d3c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 8003d40:	e0bffc17 	ldw	r2,-16(fp)
 8003d44:	10c00a04 	addi	r3,r2,40
 8003d48:	e0bffd17 	ldw	r2,-12(fp)
 8003d4c:	10800217 	ldw	r2,8(r2)
 8003d50:	100f883a 	mov	r7,r2
 8003d54:	e1bfff17 	ldw	r6,-4(fp)
 8003d58:	e17ffe17 	ldw	r5,-8(fp)
 8003d5c:	1809883a 	mov	r4,r3
 8003d60:	80044fc0 	call	80044fc <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 8003d64:	e037883a 	mov	sp,fp
 8003d68:	dfc00117 	ldw	ra,4(sp)
 8003d6c:	df000017 	ldw	fp,0(sp)
 8003d70:	dec00204 	addi	sp,sp,8
 8003d74:	f800283a 	ret

08003d78 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 8003d78:	defffc04 	addi	sp,sp,-16
 8003d7c:	dfc00315 	stw	ra,12(sp)
 8003d80:	df000215 	stw	fp,8(sp)
 8003d84:	df000204 	addi	fp,sp,8
 8003d88:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8003d8c:	e0bfff17 	ldw	r2,-4(fp)
 8003d90:	10800017 	ldw	r2,0(r2)
 8003d94:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 8003d98:	e0bffe17 	ldw	r2,-8(fp)
 8003d9c:	10c00a04 	addi	r3,r2,40
 8003da0:	e0bfff17 	ldw	r2,-4(fp)
 8003da4:	10800217 	ldw	r2,8(r2)
 8003da8:	100b883a 	mov	r5,r2
 8003dac:	1809883a 	mov	r4,r3
 8003db0:	80041880 	call	8004188 <altera_avalon_jtag_uart_close>
}
 8003db4:	e037883a 	mov	sp,fp
 8003db8:	dfc00117 	ldw	ra,4(sp)
 8003dbc:	df000017 	ldw	fp,0(sp)
 8003dc0:	dec00204 	addi	sp,sp,8
 8003dc4:	f800283a 	ret

08003dc8 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 8003dc8:	defffa04 	addi	sp,sp,-24
 8003dcc:	dfc00515 	stw	ra,20(sp)
 8003dd0:	df000415 	stw	fp,16(sp)
 8003dd4:	df000404 	addi	fp,sp,16
 8003dd8:	e13ffd15 	stw	r4,-12(fp)
 8003ddc:	e17ffe15 	stw	r5,-8(fp)
 8003de0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 8003de4:	e0bffd17 	ldw	r2,-12(fp)
 8003de8:	10800017 	ldw	r2,0(r2)
 8003dec:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 8003df0:	e0bffc17 	ldw	r2,-16(fp)
 8003df4:	10800a04 	addi	r2,r2,40
 8003df8:	e1bfff17 	ldw	r6,-4(fp)
 8003dfc:	e17ffe17 	ldw	r5,-8(fp)
 8003e00:	1009883a 	mov	r4,r2
 8003e04:	80041f00 	call	80041f0 <altera_avalon_jtag_uart_ioctl>
}
 8003e08:	e037883a 	mov	sp,fp
 8003e0c:	dfc00117 	ldw	ra,4(sp)
 8003e10:	df000017 	ldw	fp,0(sp)
 8003e14:	dec00204 	addi	sp,sp,8
 8003e18:	f800283a 	ret

08003e1c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 8003e1c:	defffa04 	addi	sp,sp,-24
 8003e20:	dfc00515 	stw	ra,20(sp)
 8003e24:	df000415 	stw	fp,16(sp)
 8003e28:	df000404 	addi	fp,sp,16
 8003e2c:	e13ffd15 	stw	r4,-12(fp)
 8003e30:	e17ffe15 	stw	r5,-8(fp)
 8003e34:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8003e38:	e0bffd17 	ldw	r2,-12(fp)
 8003e3c:	00c00044 	movi	r3,1
 8003e40:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 8003e44:	e0bffd17 	ldw	r2,-12(fp)
 8003e48:	10800017 	ldw	r2,0(r2)
 8003e4c:	10800104 	addi	r2,r2,4
 8003e50:	1007883a 	mov	r3,r2
 8003e54:	e0bffd17 	ldw	r2,-12(fp)
 8003e58:	10800817 	ldw	r2,32(r2)
 8003e5c:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 8003e60:	e0bffe17 	ldw	r2,-8(fp)
 8003e64:	e0ffff17 	ldw	r3,-4(fp)
 8003e68:	d8000015 	stw	zero,0(sp)
 8003e6c:	e1fffd17 	ldw	r7,-12(fp)
 8003e70:	01820034 	movhi	r6,2048
 8003e74:	318fb704 	addi	r6,r6,16092
 8003e78:	180b883a 	mov	r5,r3
 8003e7c:	1009883a 	mov	r4,r2
 8003e80:	8005a340 	call	8005a34 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 8003e84:	e0bffd17 	ldw	r2,-12(fp)
 8003e88:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 8003e8c:	e0bffd17 	ldw	r2,-12(fp)
 8003e90:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 8003e94:	d0e6c617 	ldw	r3,-25832(gp)
 8003e98:	e1fffd17 	ldw	r7,-12(fp)
 8003e9c:	01820034 	movhi	r6,2048
 8003ea0:	31903a04 	addi	r6,r6,16616
 8003ea4:	180b883a 	mov	r5,r3
 8003ea8:	1009883a 	mov	r4,r2
 8003eac:	80056980 	call	8005698 <alt_alarm_start>
 8003eb0:	1000040e 	bge	r2,zero,8003ec4 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 8003eb4:	e0fffd17 	ldw	r3,-12(fp)
 8003eb8:	00a00034 	movhi	r2,32768
 8003ebc:	10bfffc4 	addi	r2,r2,-1
 8003ec0:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 8003ec4:	0001883a 	nop
 8003ec8:	e037883a 	mov	sp,fp
 8003ecc:	dfc00117 	ldw	ra,4(sp)
 8003ed0:	df000017 	ldw	fp,0(sp)
 8003ed4:	dec00204 	addi	sp,sp,8
 8003ed8:	f800283a 	ret

08003edc <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 8003edc:	defff804 	addi	sp,sp,-32
 8003ee0:	df000715 	stw	fp,28(sp)
 8003ee4:	df000704 	addi	fp,sp,28
 8003ee8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 8003eec:	e0bfff17 	ldw	r2,-4(fp)
 8003ef0:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 8003ef4:	e0bffb17 	ldw	r2,-20(fp)
 8003ef8:	10800017 	ldw	r2,0(r2)
 8003efc:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8003f00:	e0bffc17 	ldw	r2,-16(fp)
 8003f04:	10800104 	addi	r2,r2,4
 8003f08:	10800037 	ldwio	r2,0(r2)
 8003f0c:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 8003f10:	e0bffd17 	ldw	r2,-12(fp)
 8003f14:	1080c00c 	andi	r2,r2,768
 8003f18:	10006d26 	beq	r2,zero,80040d0 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 8003f1c:	e0bffd17 	ldw	r2,-12(fp)
 8003f20:	1080400c 	andi	r2,r2,256
 8003f24:	10003526 	beq	r2,zero,8003ffc <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 8003f28:	00800074 	movhi	r2,1
 8003f2c:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8003f30:	e0bffb17 	ldw	r2,-20(fp)
 8003f34:	10800a17 	ldw	r2,40(r2)
 8003f38:	10800044 	addi	r2,r2,1
 8003f3c:	1081ffcc 	andi	r2,r2,2047
 8003f40:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 8003f44:	e0bffb17 	ldw	r2,-20(fp)
 8003f48:	10c00b17 	ldw	r3,44(r2)
 8003f4c:	e0bffe17 	ldw	r2,-8(fp)
 8003f50:	18801526 	beq	r3,r2,8003fa8 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 8003f54:	e0bffc17 	ldw	r2,-16(fp)
 8003f58:	10800037 	ldwio	r2,0(r2)
 8003f5c:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 8003f60:	e0bff917 	ldw	r2,-28(fp)
 8003f64:	10a0000c 	andi	r2,r2,32768
 8003f68:	10001126 	beq	r2,zero,8003fb0 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 8003f6c:	e0bffb17 	ldw	r2,-20(fp)
 8003f70:	10800a17 	ldw	r2,40(r2)
 8003f74:	e0fff917 	ldw	r3,-28(fp)
 8003f78:	1809883a 	mov	r4,r3
 8003f7c:	e0fffb17 	ldw	r3,-20(fp)
 8003f80:	1885883a 	add	r2,r3,r2
 8003f84:	10800e04 	addi	r2,r2,56
 8003f88:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8003f8c:	e0bffb17 	ldw	r2,-20(fp)
 8003f90:	10800a17 	ldw	r2,40(r2)
 8003f94:	10800044 	addi	r2,r2,1
 8003f98:	10c1ffcc 	andi	r3,r2,2047
 8003f9c:	e0bffb17 	ldw	r2,-20(fp)
 8003fa0:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 8003fa4:	003fe206 	br	8003f30 <altera_avalon_jtag_uart_irq+0x54>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 8003fa8:	0001883a 	nop
 8003fac:	00000106 	br	8003fb4 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 8003fb0:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 8003fb4:	e0bff917 	ldw	r2,-28(fp)
 8003fb8:	10bfffec 	andhi	r2,r2,65535
 8003fbc:	10000f26 	beq	r2,zero,8003ffc <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8003fc0:	e0bffb17 	ldw	r2,-20(fp)
 8003fc4:	10c00817 	ldw	r3,32(r2)
 8003fc8:	00bfff84 	movi	r2,-2
 8003fcc:	1886703a 	and	r3,r3,r2
 8003fd0:	e0bffb17 	ldw	r2,-20(fp)
 8003fd4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 8003fd8:	e0bffc17 	ldw	r2,-16(fp)
 8003fdc:	10800104 	addi	r2,r2,4
 8003fe0:	1007883a 	mov	r3,r2
 8003fe4:	e0bffb17 	ldw	r2,-20(fp)
 8003fe8:	10800817 	ldw	r2,32(r2)
 8003fec:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8003ff0:	e0bffc17 	ldw	r2,-16(fp)
 8003ff4:	10800104 	addi	r2,r2,4
 8003ff8:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 8003ffc:	e0bffd17 	ldw	r2,-12(fp)
 8004000:	1080800c 	andi	r2,r2,512
 8004004:	103fbe26 	beq	r2,zero,8003f00 <altera_avalon_jtag_uart_irq+0x24>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 8004008:	e0bffd17 	ldw	r2,-12(fp)
 800400c:	1004d43a 	srli	r2,r2,16
 8004010:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 8004014:	00001406 	br	8004068 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 8004018:	e0bffc17 	ldw	r2,-16(fp)
 800401c:	e0fffb17 	ldw	r3,-20(fp)
 8004020:	18c00d17 	ldw	r3,52(r3)
 8004024:	e13ffb17 	ldw	r4,-20(fp)
 8004028:	20c7883a 	add	r3,r4,r3
 800402c:	18c20e04 	addi	r3,r3,2104
 8004030:	18c00003 	ldbu	r3,0(r3)
 8004034:	18c03fcc 	andi	r3,r3,255
 8004038:	18c0201c 	xori	r3,r3,128
 800403c:	18ffe004 	addi	r3,r3,-128
 8004040:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8004044:	e0bffb17 	ldw	r2,-20(fp)
 8004048:	10800d17 	ldw	r2,52(r2)
 800404c:	10800044 	addi	r2,r2,1
 8004050:	10c1ffcc 	andi	r3,r2,2047
 8004054:	e0bffb17 	ldw	r2,-20(fp)
 8004058:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 800405c:	e0bffa17 	ldw	r2,-24(fp)
 8004060:	10bfffc4 	addi	r2,r2,-1
 8004064:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 8004068:	e0bffa17 	ldw	r2,-24(fp)
 800406c:	10000526 	beq	r2,zero,8004084 <altera_avalon_jtag_uart_irq+0x1a8>
 8004070:	e0bffb17 	ldw	r2,-20(fp)
 8004074:	10c00d17 	ldw	r3,52(r2)
 8004078:	e0bffb17 	ldw	r2,-20(fp)
 800407c:	10800c17 	ldw	r2,48(r2)
 8004080:	18bfe51e 	bne	r3,r2,8004018 <altera_avalon_jtag_uart_irq+0x13c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 8004084:	e0bffa17 	ldw	r2,-24(fp)
 8004088:	103f9d26 	beq	r2,zero,8003f00 <altera_avalon_jtag_uart_irq+0x24>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 800408c:	e0bffb17 	ldw	r2,-20(fp)
 8004090:	10c00817 	ldw	r3,32(r2)
 8004094:	00bfff44 	movi	r2,-3
 8004098:	1886703a 	and	r3,r3,r2
 800409c:	e0bffb17 	ldw	r2,-20(fp)
 80040a0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 80040a4:	e0bffb17 	ldw	r2,-20(fp)
 80040a8:	10800017 	ldw	r2,0(r2)
 80040ac:	10800104 	addi	r2,r2,4
 80040b0:	1007883a 	mov	r3,r2
 80040b4:	e0bffb17 	ldw	r2,-20(fp)
 80040b8:	10800817 	ldw	r2,32(r2)
 80040bc:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 80040c0:	e0bffc17 	ldw	r2,-16(fp)
 80040c4:	10800104 	addi	r2,r2,4
 80040c8:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 80040cc:	003f8c06 	br	8003f00 <altera_avalon_jtag_uart_irq+0x24>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 80040d0:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 80040d4:	0001883a 	nop
 80040d8:	e037883a 	mov	sp,fp
 80040dc:	df000017 	ldw	fp,0(sp)
 80040e0:	dec00104 	addi	sp,sp,4
 80040e4:	f800283a 	ret

080040e8 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 80040e8:	defff804 	addi	sp,sp,-32
 80040ec:	df000715 	stw	fp,28(sp)
 80040f0:	df000704 	addi	fp,sp,28
 80040f4:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 80040f8:	e0bffb17 	ldw	r2,-20(fp)
 80040fc:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 8004100:	e0bff917 	ldw	r2,-28(fp)
 8004104:	10800017 	ldw	r2,0(r2)
 8004108:	10800104 	addi	r2,r2,4
 800410c:	10800037 	ldwio	r2,0(r2)
 8004110:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 8004114:	e0bffa17 	ldw	r2,-24(fp)
 8004118:	1081000c 	andi	r2,r2,1024
 800411c:	10000b26 	beq	r2,zero,800414c <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 8004120:	e0bff917 	ldw	r2,-28(fp)
 8004124:	10800017 	ldw	r2,0(r2)
 8004128:	10800104 	addi	r2,r2,4
 800412c:	1007883a 	mov	r3,r2
 8004130:	e0bff917 	ldw	r2,-28(fp)
 8004134:	10800817 	ldw	r2,32(r2)
 8004138:	10810014 	ori	r2,r2,1024
 800413c:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 8004140:	e0bff917 	ldw	r2,-28(fp)
 8004144:	10000915 	stw	zero,36(r2)
 8004148:	00000a06 	br	8004174 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 800414c:	e0bff917 	ldw	r2,-28(fp)
 8004150:	10c00917 	ldw	r3,36(r2)
 8004154:	00a00034 	movhi	r2,32768
 8004158:	10bfff04 	addi	r2,r2,-4
 800415c:	10c00536 	bltu	r2,r3,8004174 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 8004160:	e0bff917 	ldw	r2,-28(fp)
 8004164:	10800917 	ldw	r2,36(r2)
 8004168:	10c00044 	addi	r3,r2,1
 800416c:	e0bff917 	ldw	r2,-28(fp)
 8004170:	10c00915 	stw	r3,36(r2)
 8004174:	d0a6c617 	ldw	r2,-25832(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 8004178:	e037883a 	mov	sp,fp
 800417c:	df000017 	ldw	fp,0(sp)
 8004180:	dec00104 	addi	sp,sp,4
 8004184:	f800283a 	ret

08004188 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 8004188:	defffd04 	addi	sp,sp,-12
 800418c:	df000215 	stw	fp,8(sp)
 8004190:	df000204 	addi	fp,sp,8
 8004194:	e13ffe15 	stw	r4,-8(fp)
 8004198:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 800419c:	00000506 	br	80041b4 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 80041a0:	e0bfff17 	ldw	r2,-4(fp)
 80041a4:	1090000c 	andi	r2,r2,16384
 80041a8:	10000226 	beq	r2,zero,80041b4 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 80041ac:	00bffd44 	movi	r2,-11
 80041b0:	00000b06 	br	80041e0 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 80041b4:	e0bffe17 	ldw	r2,-8(fp)
 80041b8:	10c00d17 	ldw	r3,52(r2)
 80041bc:	e0bffe17 	ldw	r2,-8(fp)
 80041c0:	10800c17 	ldw	r2,48(r2)
 80041c4:	18800526 	beq	r3,r2,80041dc <altera_avalon_jtag_uart_close+0x54>
 80041c8:	e0bffe17 	ldw	r2,-8(fp)
 80041cc:	10c00917 	ldw	r3,36(r2)
 80041d0:	e0bffe17 	ldw	r2,-8(fp)
 80041d4:	10800117 	ldw	r2,4(r2)
 80041d8:	18bff136 	bltu	r3,r2,80041a0 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 80041dc:	0005883a 	mov	r2,zero
}
 80041e0:	e037883a 	mov	sp,fp
 80041e4:	df000017 	ldw	fp,0(sp)
 80041e8:	dec00104 	addi	sp,sp,4
 80041ec:	f800283a 	ret

080041f0 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 80041f0:	defffa04 	addi	sp,sp,-24
 80041f4:	df000515 	stw	fp,20(sp)
 80041f8:	df000504 	addi	fp,sp,20
 80041fc:	e13ffd15 	stw	r4,-12(fp)
 8004200:	e17ffe15 	stw	r5,-8(fp)
 8004204:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 8004208:	00bff9c4 	movi	r2,-25
 800420c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 8004210:	e0bffe17 	ldw	r2,-8(fp)
 8004214:	10da8060 	cmpeqi	r3,r2,27137
 8004218:	1800031e 	bne	r3,zero,8004228 <altera_avalon_jtag_uart_ioctl+0x38>
 800421c:	109a80a0 	cmpeqi	r2,r2,27138
 8004220:	1000181e 	bne	r2,zero,8004284 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 8004224:	00002906 	br	80042cc <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 8004228:	e0bffd17 	ldw	r2,-12(fp)
 800422c:	10c00117 	ldw	r3,4(r2)
 8004230:	00a00034 	movhi	r2,32768
 8004234:	10bfffc4 	addi	r2,r2,-1
 8004238:	18802126 	beq	r3,r2,80042c0 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 800423c:	e0bfff17 	ldw	r2,-4(fp)
 8004240:	10800017 	ldw	r2,0(r2)
 8004244:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 8004248:	e0bffc17 	ldw	r2,-16(fp)
 800424c:	10800090 	cmplti	r2,r2,2
 8004250:	1000061e 	bne	r2,zero,800426c <altera_avalon_jtag_uart_ioctl+0x7c>
 8004254:	e0fffc17 	ldw	r3,-16(fp)
 8004258:	00a00034 	movhi	r2,32768
 800425c:	10bfffc4 	addi	r2,r2,-1
 8004260:	18800226 	beq	r3,r2,800426c <altera_avalon_jtag_uart_ioctl+0x7c>
 8004264:	e0bffc17 	ldw	r2,-16(fp)
 8004268:	00000206 	br	8004274 <altera_avalon_jtag_uart_ioctl+0x84>
 800426c:	00a00034 	movhi	r2,32768
 8004270:	10bfff84 	addi	r2,r2,-2
 8004274:	e0fffd17 	ldw	r3,-12(fp)
 8004278:	18800115 	stw	r2,4(r3)
      rc = 0;
 800427c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 8004280:	00000f06 	br	80042c0 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 8004284:	e0bffd17 	ldw	r2,-12(fp)
 8004288:	10c00117 	ldw	r3,4(r2)
 800428c:	00a00034 	movhi	r2,32768
 8004290:	10bfffc4 	addi	r2,r2,-1
 8004294:	18800c26 	beq	r3,r2,80042c8 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 8004298:	e0bffd17 	ldw	r2,-12(fp)
 800429c:	10c00917 	ldw	r3,36(r2)
 80042a0:	e0bffd17 	ldw	r2,-12(fp)
 80042a4:	10800117 	ldw	r2,4(r2)
 80042a8:	1885803a 	cmpltu	r2,r3,r2
 80042ac:	10c03fcc 	andi	r3,r2,255
 80042b0:	e0bfff17 	ldw	r2,-4(fp)
 80042b4:	10c00015 	stw	r3,0(r2)
      rc = 0;
 80042b8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 80042bc:	00000206 	br	80042c8 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 80042c0:	0001883a 	nop
 80042c4:	00000106 	br	80042cc <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 80042c8:	0001883a 	nop

  default:
    break;
  }

  return rc;
 80042cc:	e0bffb17 	ldw	r2,-20(fp)
}
 80042d0:	e037883a 	mov	sp,fp
 80042d4:	df000017 	ldw	fp,0(sp)
 80042d8:	dec00104 	addi	sp,sp,4
 80042dc:	f800283a 	ret

080042e0 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 80042e0:	defff304 	addi	sp,sp,-52
 80042e4:	dfc00c15 	stw	ra,48(sp)
 80042e8:	df000b15 	stw	fp,44(sp)
 80042ec:	df000b04 	addi	fp,sp,44
 80042f0:	e13ffc15 	stw	r4,-16(fp)
 80042f4:	e17ffd15 	stw	r5,-12(fp)
 80042f8:	e1bffe15 	stw	r6,-8(fp)
 80042fc:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 8004300:	e0bffd17 	ldw	r2,-12(fp)
 8004304:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 8004308:	00004706 	br	8004428 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 800430c:	e0bffc17 	ldw	r2,-16(fp)
 8004310:	10800a17 	ldw	r2,40(r2)
 8004314:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 8004318:	e0bffc17 	ldw	r2,-16(fp)
 800431c:	10800b17 	ldw	r2,44(r2)
 8004320:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 8004324:	e0fff717 	ldw	r3,-36(fp)
 8004328:	e0bff817 	ldw	r2,-32(fp)
 800432c:	18800536 	bltu	r3,r2,8004344 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 8004330:	e0fff717 	ldw	r3,-36(fp)
 8004334:	e0bff817 	ldw	r2,-32(fp)
 8004338:	1885c83a 	sub	r2,r3,r2
 800433c:	e0bff615 	stw	r2,-40(fp)
 8004340:	00000406 	br	8004354 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 8004344:	00c20004 	movi	r3,2048
 8004348:	e0bff817 	ldw	r2,-32(fp)
 800434c:	1885c83a 	sub	r2,r3,r2
 8004350:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 8004354:	e0bff617 	ldw	r2,-40(fp)
 8004358:	10001e26 	beq	r2,zero,80043d4 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 800435c:	e0fffe17 	ldw	r3,-8(fp)
 8004360:	e0bff617 	ldw	r2,-40(fp)
 8004364:	1880022e 	bgeu	r3,r2,8004370 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 8004368:	e0bffe17 	ldw	r2,-8(fp)
 800436c:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 8004370:	e0bffc17 	ldw	r2,-16(fp)
 8004374:	10c00e04 	addi	r3,r2,56
 8004378:	e0bff817 	ldw	r2,-32(fp)
 800437c:	1885883a 	add	r2,r3,r2
 8004380:	e1bff617 	ldw	r6,-40(fp)
 8004384:	100b883a 	mov	r5,r2
 8004388:	e13ff517 	ldw	r4,-44(fp)
 800438c:	80016e40 	call	80016e4 <memcpy>
      ptr   += n;
 8004390:	e0fff517 	ldw	r3,-44(fp)
 8004394:	e0bff617 	ldw	r2,-40(fp)
 8004398:	1885883a 	add	r2,r3,r2
 800439c:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 80043a0:	e0fffe17 	ldw	r3,-8(fp)
 80043a4:	e0bff617 	ldw	r2,-40(fp)
 80043a8:	1885c83a 	sub	r2,r3,r2
 80043ac:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 80043b0:	e0fff817 	ldw	r3,-32(fp)
 80043b4:	e0bff617 	ldw	r2,-40(fp)
 80043b8:	1885883a 	add	r2,r3,r2
 80043bc:	10c1ffcc 	andi	r3,r2,2047
 80043c0:	e0bffc17 	ldw	r2,-16(fp)
 80043c4:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 80043c8:	e0bffe17 	ldw	r2,-8(fp)
 80043cc:	00bfcf16 	blt	zero,r2,800430c <altera_avalon_jtag_uart_read+0x2c>
 80043d0:	00000106 	br	80043d8 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 80043d4:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 80043d8:	e0fff517 	ldw	r3,-44(fp)
 80043dc:	e0bffd17 	ldw	r2,-12(fp)
 80043e0:	1880141e 	bne	r3,r2,8004434 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 80043e4:	e0bfff17 	ldw	r2,-4(fp)
 80043e8:	1090000c 	andi	r2,r2,16384
 80043ec:	1000131e 	bne	r2,zero,800443c <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 80043f0:	0001883a 	nop
 80043f4:	e0bffc17 	ldw	r2,-16(fp)
 80043f8:	10c00a17 	ldw	r3,40(r2)
 80043fc:	e0bff717 	ldw	r2,-36(fp)
 8004400:	1880051e 	bne	r3,r2,8004418 <altera_avalon_jtag_uart_read+0x138>
 8004404:	e0bffc17 	ldw	r2,-16(fp)
 8004408:	10c00917 	ldw	r3,36(r2)
 800440c:	e0bffc17 	ldw	r2,-16(fp)
 8004410:	10800117 	ldw	r2,4(r2)
 8004414:	18bff736 	bltu	r3,r2,80043f4 <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 8004418:	e0bffc17 	ldw	r2,-16(fp)
 800441c:	10c00a17 	ldw	r3,40(r2)
 8004420:	e0bff717 	ldw	r2,-36(fp)
 8004424:	18800726 	beq	r3,r2,8004444 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 8004428:	e0bffe17 	ldw	r2,-8(fp)
 800442c:	00bfb716 	blt	zero,r2,800430c <altera_avalon_jtag_uart_read+0x2c>
 8004430:	00000506 	br	8004448 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 8004434:	0001883a 	nop
 8004438:	00000306 	br	8004448 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 800443c:	0001883a 	nop
 8004440:	00000106 	br	8004448 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 8004444:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 8004448:	e0fff517 	ldw	r3,-44(fp)
 800444c:	e0bffd17 	ldw	r2,-12(fp)
 8004450:	18801826 	beq	r3,r2,80044b4 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8004454:	0005303a 	rdctl	r2,status
 8004458:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800445c:	e0fffb17 	ldw	r3,-20(fp)
 8004460:	00bfff84 	movi	r2,-2
 8004464:	1884703a 	and	r2,r3,r2
 8004468:	1001703a 	wrctl	status,r2
  
  return context;
 800446c:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 8004470:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8004474:	e0bffc17 	ldw	r2,-16(fp)
 8004478:	10800817 	ldw	r2,32(r2)
 800447c:	10c00054 	ori	r3,r2,1
 8004480:	e0bffc17 	ldw	r2,-16(fp)
 8004484:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8004488:	e0bffc17 	ldw	r2,-16(fp)
 800448c:	10800017 	ldw	r2,0(r2)
 8004490:	10800104 	addi	r2,r2,4
 8004494:	1007883a 	mov	r3,r2
 8004498:	e0bffc17 	ldw	r2,-16(fp)
 800449c:	10800817 	ldw	r2,32(r2)
 80044a0:	18800035 	stwio	r2,0(r3)
 80044a4:	e0bffa17 	ldw	r2,-24(fp)
 80044a8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80044ac:	e0bff917 	ldw	r2,-28(fp)
 80044b0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 80044b4:	e0fff517 	ldw	r3,-44(fp)
 80044b8:	e0bffd17 	ldw	r2,-12(fp)
 80044bc:	18800426 	beq	r3,r2,80044d0 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 80044c0:	e0fff517 	ldw	r3,-44(fp)
 80044c4:	e0bffd17 	ldw	r2,-12(fp)
 80044c8:	1885c83a 	sub	r2,r3,r2
 80044cc:	00000606 	br	80044e8 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 80044d0:	e0bfff17 	ldw	r2,-4(fp)
 80044d4:	1090000c 	andi	r2,r2,16384
 80044d8:	10000226 	beq	r2,zero,80044e4 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 80044dc:	00bffd44 	movi	r2,-11
 80044e0:	00000106 	br	80044e8 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 80044e4:	00bffec4 	movi	r2,-5
}
 80044e8:	e037883a 	mov	sp,fp
 80044ec:	dfc00117 	ldw	ra,4(sp)
 80044f0:	df000017 	ldw	fp,0(sp)
 80044f4:	dec00204 	addi	sp,sp,8
 80044f8:	f800283a 	ret

080044fc <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 80044fc:	defff304 	addi	sp,sp,-52
 8004500:	dfc00c15 	stw	ra,48(sp)
 8004504:	df000b15 	stw	fp,44(sp)
 8004508:	df000b04 	addi	fp,sp,44
 800450c:	e13ffc15 	stw	r4,-16(fp)
 8004510:	e17ffd15 	stw	r5,-12(fp)
 8004514:	e1bffe15 	stw	r6,-8(fp)
 8004518:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 800451c:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 8004520:	e0bffd17 	ldw	r2,-12(fp)
 8004524:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 8004528:	00003706 	br	8004608 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 800452c:	e0bffc17 	ldw	r2,-16(fp)
 8004530:	10800c17 	ldw	r2,48(r2)
 8004534:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 8004538:	e0bffc17 	ldw	r2,-16(fp)
 800453c:	10800d17 	ldw	r2,52(r2)
 8004540:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 8004544:	e0fff917 	ldw	r3,-28(fp)
 8004548:	e0bff517 	ldw	r2,-44(fp)
 800454c:	1880062e 	bgeu	r3,r2,8004568 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 8004550:	e0fff517 	ldw	r3,-44(fp)
 8004554:	e0bff917 	ldw	r2,-28(fp)
 8004558:	1885c83a 	sub	r2,r3,r2
 800455c:	10bfffc4 	addi	r2,r2,-1
 8004560:	e0bff615 	stw	r2,-40(fp)
 8004564:	00000b06 	br	8004594 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 8004568:	e0bff517 	ldw	r2,-44(fp)
 800456c:	10000526 	beq	r2,zero,8004584 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 8004570:	00c20004 	movi	r3,2048
 8004574:	e0bff917 	ldw	r2,-28(fp)
 8004578:	1885c83a 	sub	r2,r3,r2
 800457c:	e0bff615 	stw	r2,-40(fp)
 8004580:	00000406 	br	8004594 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 8004584:	00c1ffc4 	movi	r3,2047
 8004588:	e0bff917 	ldw	r2,-28(fp)
 800458c:	1885c83a 	sub	r2,r3,r2
 8004590:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 8004594:	e0bff617 	ldw	r2,-40(fp)
 8004598:	10001e26 	beq	r2,zero,8004614 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 800459c:	e0fffe17 	ldw	r3,-8(fp)
 80045a0:	e0bff617 	ldw	r2,-40(fp)
 80045a4:	1880022e 	bgeu	r3,r2,80045b0 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 80045a8:	e0bffe17 	ldw	r2,-8(fp)
 80045ac:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 80045b0:	e0bffc17 	ldw	r2,-16(fp)
 80045b4:	10c20e04 	addi	r3,r2,2104
 80045b8:	e0bff917 	ldw	r2,-28(fp)
 80045bc:	1885883a 	add	r2,r3,r2
 80045c0:	e1bff617 	ldw	r6,-40(fp)
 80045c4:	e17ffd17 	ldw	r5,-12(fp)
 80045c8:	1009883a 	mov	r4,r2
 80045cc:	80016e40 	call	80016e4 <memcpy>
      ptr   += n;
 80045d0:	e0fffd17 	ldw	r3,-12(fp)
 80045d4:	e0bff617 	ldw	r2,-40(fp)
 80045d8:	1885883a 	add	r2,r3,r2
 80045dc:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 80045e0:	e0fffe17 	ldw	r3,-8(fp)
 80045e4:	e0bff617 	ldw	r2,-40(fp)
 80045e8:	1885c83a 	sub	r2,r3,r2
 80045ec:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 80045f0:	e0fff917 	ldw	r3,-28(fp)
 80045f4:	e0bff617 	ldw	r2,-40(fp)
 80045f8:	1885883a 	add	r2,r3,r2
 80045fc:	10c1ffcc 	andi	r3,r2,2047
 8004600:	e0bffc17 	ldw	r2,-16(fp)
 8004604:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 8004608:	e0bffe17 	ldw	r2,-8(fp)
 800460c:	00bfc716 	blt	zero,r2,800452c <altera_avalon_jtag_uart_write+0x30>
 8004610:	00000106 	br	8004618 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 8004614:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8004618:	0005303a 	rdctl	r2,status
 800461c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8004620:	e0fffb17 	ldw	r3,-20(fp)
 8004624:	00bfff84 	movi	r2,-2
 8004628:	1884703a 	and	r2,r3,r2
 800462c:	1001703a 	wrctl	status,r2
  
  return context;
 8004630:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 8004634:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 8004638:	e0bffc17 	ldw	r2,-16(fp)
 800463c:	10800817 	ldw	r2,32(r2)
 8004640:	10c00094 	ori	r3,r2,2
 8004644:	e0bffc17 	ldw	r2,-16(fp)
 8004648:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 800464c:	e0bffc17 	ldw	r2,-16(fp)
 8004650:	10800017 	ldw	r2,0(r2)
 8004654:	10800104 	addi	r2,r2,4
 8004658:	1007883a 	mov	r3,r2
 800465c:	e0bffc17 	ldw	r2,-16(fp)
 8004660:	10800817 	ldw	r2,32(r2)
 8004664:	18800035 	stwio	r2,0(r3)
 8004668:	e0bffa17 	ldw	r2,-24(fp)
 800466c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8004670:	e0bff817 	ldw	r2,-32(fp)
 8004674:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 8004678:	e0bffe17 	ldw	r2,-8(fp)
 800467c:	0080100e 	bge	zero,r2,80046c0 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 8004680:	e0bfff17 	ldw	r2,-4(fp)
 8004684:	1090000c 	andi	r2,r2,16384
 8004688:	1000101e 	bne	r2,zero,80046cc <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 800468c:	0001883a 	nop
 8004690:	e0bffc17 	ldw	r2,-16(fp)
 8004694:	10c00d17 	ldw	r3,52(r2)
 8004698:	e0bff517 	ldw	r2,-44(fp)
 800469c:	1880051e 	bne	r3,r2,80046b4 <altera_avalon_jtag_uart_write+0x1b8>
 80046a0:	e0bffc17 	ldw	r2,-16(fp)
 80046a4:	10c00917 	ldw	r3,36(r2)
 80046a8:	e0bffc17 	ldw	r2,-16(fp)
 80046ac:	10800117 	ldw	r2,4(r2)
 80046b0:	18bff736 	bltu	r3,r2,8004690 <altera_avalon_jtag_uart_write+0x194>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 80046b4:	e0bffc17 	ldw	r2,-16(fp)
 80046b8:	10800917 	ldw	r2,36(r2)
 80046bc:	1000051e 	bne	r2,zero,80046d4 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 80046c0:	e0bffe17 	ldw	r2,-8(fp)
 80046c4:	00bfd016 	blt	zero,r2,8004608 <altera_avalon_jtag_uart_write+0x10c>
 80046c8:	00000306 	br	80046d8 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 80046cc:	0001883a 	nop
 80046d0:	00000106 	br	80046d8 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 80046d4:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 80046d8:	e0fffd17 	ldw	r3,-12(fp)
 80046dc:	e0bff717 	ldw	r2,-36(fp)
 80046e0:	18800426 	beq	r3,r2,80046f4 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 80046e4:	e0fffd17 	ldw	r3,-12(fp)
 80046e8:	e0bff717 	ldw	r2,-36(fp)
 80046ec:	1885c83a 	sub	r2,r3,r2
 80046f0:	00000606 	br	800470c <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 80046f4:	e0bfff17 	ldw	r2,-4(fp)
 80046f8:	1090000c 	andi	r2,r2,16384
 80046fc:	10000226 	beq	r2,zero,8004708 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 8004700:	00bffd44 	movi	r2,-11
 8004704:	00000106 	br	800470c <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 8004708:	00bffec4 	movi	r2,-5
}
 800470c:	e037883a 	mov	sp,fp
 8004710:	dfc00117 	ldw	ra,4(sp)
 8004714:	df000017 	ldw	fp,0(sp)
 8004718:	dec00204 	addi	sp,sp,8
 800471c:	f800283a 	ret

08004720 <alt_up_pixel_buffer_dma_open_dev>:

#include "altera_up_avalon_video_pixel_buffer_dma.h"

#define ABS(x)	((x >= 0) ? (x) : (-(x)))

alt_up_pixel_buffer_dma_dev* alt_up_pixel_buffer_dma_open_dev(const char* name) {
 8004720:	defffc04 	addi	sp,sp,-16
 8004724:	dfc00315 	stw	ra,12(sp)
 8004728:	df000215 	stw	fp,8(sp)
 800472c:	df000204 	addi	fp,sp,8
 8004730:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_pixel_buffer_dma_dev *dev = (alt_up_pixel_buffer_dma_dev*)alt_find_dev(name, &alt_dev_list);
 8004734:	d1600604 	addi	r5,gp,-32744
 8004738:	e13fff17 	ldw	r4,-4(fp)
 800473c:	80059840 	call	8005984 <alt_find_dev>
 8004740:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 8004744:	e0bffe17 	ldw	r2,-8(fp)
}
 8004748:	e037883a 	mov	sp,fp
 800474c:	dfc00117 	ldw	ra,4(sp)
 8004750:	df000017 	ldw	fp,0(sp)
 8004754:	dec00204 	addi	sp,sp,8
 8004758:	f800283a 	ret

0800475c <alt_up_pixel_buffer_dma_draw>:

int alt_up_pixel_buffer_dma_draw(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int color, unsigned int x, unsigned int y)
/* This function draws a pixel to the back buffer.
 */
{
 800475c:	defff904 	addi	sp,sp,-28
 8004760:	dfc00615 	stw	ra,24(sp)
 8004764:	df000515 	stw	fp,20(sp)
 8004768:	df000504 	addi	fp,sp,20
 800476c:	e13ffc15 	stw	r4,-16(fp)
 8004770:	e17ffd15 	stw	r5,-12(fp)
 8004774:	e1bffe15 	stw	r6,-8(fp)
 8004778:	e1ffff15 	stw	r7,-4(fp)
	// boundary check
	if (x >= pixel_buffer->x_resolution || y >= pixel_buffer->y_resolution )
 800477c:	e0bffc17 	ldw	r2,-16(fp)
 8004780:	10800f17 	ldw	r2,60(r2)
 8004784:	e0fffe17 	ldw	r3,-8(fp)
 8004788:	1880042e 	bgeu	r3,r2,800479c <alt_up_pixel_buffer_dma_draw+0x40>
 800478c:	e0bffc17 	ldw	r2,-16(fp)
 8004790:	10801017 	ldw	r2,64(r2)
 8004794:	e0ffff17 	ldw	r3,-4(fp)
 8004798:	18800236 	bltu	r3,r2,80047a4 <alt_up_pixel_buffer_dma_draw+0x48>
		return -1;
 800479c:	00bfffc4 	movi	r2,-1
 80047a0:	00005306 	br	80048f0 <alt_up_pixel_buffer_dma_draw+0x194>

	unsigned int addr = 0;
 80047a4:	e03ffb15 	stw	zero,-20(fp)
	/* Check the mode VGA Pixel Buffer is using. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 80047a8:	e0bffc17 	ldw	r2,-16(fp)
 80047ac:	10800d17 	ldw	r2,52(r2)
 80047b0:	1000151e 	bne	r2,zero,8004808 <alt_up_pixel_buffer_dma_draw+0xac>
		/* For X-Y addressing mode, the address format is | unused | Y | X |. So shift bits for coordinates X and Y into their respective locations. */
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
 80047b4:	e0bffc17 	ldw	r2,-16(fp)
 80047b8:	10c01217 	ldw	r3,72(r2)
 80047bc:	e0bffe17 	ldw	r2,-8(fp)
 80047c0:	1886703a 	and	r3,r3,r2
 80047c4:	e0bffc17 	ldw	r2,-16(fp)
 80047c8:	10801117 	ldw	r2,68(r2)
 80047cc:	1884983a 	sll	r2,r3,r2
 80047d0:	e0fffb17 	ldw	r3,-20(fp)
 80047d4:	1885883a 	add	r2,r3,r2
 80047d8:	e0bffb15 	stw	r2,-20(fp)
		addr += ((y & pixel_buffer->y_coord_mask) << pixel_buffer->y_coord_offset);
 80047dc:	e0bffc17 	ldw	r2,-16(fp)
 80047e0:	10c01417 	ldw	r3,80(r2)
 80047e4:	e0bfff17 	ldw	r2,-4(fp)
 80047e8:	1886703a 	and	r3,r3,r2
 80047ec:	e0bffc17 	ldw	r2,-16(fp)
 80047f0:	10801317 	ldw	r2,76(r2)
 80047f4:	1884983a 	sll	r2,r3,r2
 80047f8:	e0fffb17 	ldw	r3,-20(fp)
 80047fc:	1885883a 	add	r2,r3,r2
 8004800:	e0bffb15 	stw	r2,-20(fp)
 8004804:	00001a06 	br	8004870 <alt_up_pixel_buffer_dma_draw+0x114>
	} else {
		/* In a consecutive addressing mode, the pixels are stored in consecutive memory locations. So the address of a pixel at (x,y) can be computed as
		 * (y*x_resolution + x).*/
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
 8004808:	e0bffc17 	ldw	r2,-16(fp)
 800480c:	10c01217 	ldw	r3,72(r2)
 8004810:	e0bffe17 	ldw	r2,-8(fp)
 8004814:	1886703a 	and	r3,r3,r2
 8004818:	e0bffc17 	ldw	r2,-16(fp)
 800481c:	10801117 	ldw	r2,68(r2)
 8004820:	1884983a 	sll	r2,r3,r2
 8004824:	e0fffb17 	ldw	r3,-20(fp)
 8004828:	1885883a 	add	r2,r3,r2
 800482c:	e0bffb15 	stw	r2,-20(fp)
		addr += (((y & pixel_buffer->y_coord_mask) * pixel_buffer->x_resolution) << pixel_buffer->x_coord_offset);
 8004830:	e0bffc17 	ldw	r2,-16(fp)
 8004834:	10c01417 	ldw	r3,80(r2)
 8004838:	e0bfff17 	ldw	r2,-4(fp)
 800483c:	1886703a 	and	r3,r3,r2
 8004840:	e0bffc17 	ldw	r2,-16(fp)
 8004844:	10800f17 	ldw	r2,60(r2)
 8004848:	100b883a 	mov	r5,r2
 800484c:	1809883a 	mov	r4,r3
 8004850:	800306c0 	call	800306c <__mulsi3>
 8004854:	1007883a 	mov	r3,r2
 8004858:	e0bffc17 	ldw	r2,-16(fp)
 800485c:	10801117 	ldw	r2,68(r2)
 8004860:	1884983a 	sll	r2,r3,r2
 8004864:	e0fffb17 	ldw	r3,-20(fp)
 8004868:	1885883a 	add	r2,r3,r2
 800486c:	e0bffb15 	stw	r2,-20(fp)
	}
	/* Now, depending on the color depth, write the pixel color to the specified memory location. */
	if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 8004870:	e0bffc17 	ldw	r2,-16(fp)
 8004874:	10800e17 	ldw	r2,56(r2)
 8004878:	10800058 	cmpnei	r2,r2,1
 800487c:	1000081e 	bne	r2,zero,80048a0 <alt_up_pixel_buffer_dma_draw+0x144>
		IOWR_8DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
 8004880:	e0bffc17 	ldw	r2,-16(fp)
 8004884:	10c00c17 	ldw	r3,48(r2)
 8004888:	e0bffb17 	ldw	r2,-20(fp)
 800488c:	1885883a 	add	r2,r3,r2
 8004890:	1007883a 	mov	r3,r2
 8004894:	e0bffd17 	ldw	r2,-12(fp)
 8004898:	18800025 	stbio	r2,0(r3)
 800489c:	00001306 	br	80048ec <alt_up_pixel_buffer_dma_draw+0x190>
	} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 80048a0:	e0bffc17 	ldw	r2,-16(fp)
 80048a4:	10800e17 	ldw	r2,56(r2)
 80048a8:	10800098 	cmpnei	r2,r2,2
 80048ac:	1000081e 	bne	r2,zero,80048d0 <alt_up_pixel_buffer_dma_draw+0x174>
		IOWR_16DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
 80048b0:	e0bffc17 	ldw	r2,-16(fp)
 80048b4:	10c00c17 	ldw	r3,48(r2)
 80048b8:	e0bffb17 	ldw	r2,-20(fp)
 80048bc:	1885883a 	add	r2,r3,r2
 80048c0:	1007883a 	mov	r3,r2
 80048c4:	e0bffd17 	ldw	r2,-12(fp)
 80048c8:	1880002d 	sthio	r2,0(r3)
 80048cc:	00000706 	br	80048ec <alt_up_pixel_buffer_dma_draw+0x190>
	} else {
		IOWR_32DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
 80048d0:	e0bffc17 	ldw	r2,-16(fp)
 80048d4:	10c00c17 	ldw	r3,48(r2)
 80048d8:	e0bffb17 	ldw	r2,-20(fp)
 80048dc:	1885883a 	add	r2,r3,r2
 80048e0:	1007883a 	mov	r3,r2
 80048e4:	e0bffd17 	ldw	r2,-12(fp)
 80048e8:	18800035 	stwio	r2,0(r3)
	}

	return 0;
 80048ec:	0005883a 	mov	r2,zero
}
 80048f0:	e037883a 	mov	sp,fp
 80048f4:	dfc00117 	ldw	ra,4(sp)
 80048f8:	df000017 	ldw	fp,0(sp)
 80048fc:	dec00204 	addi	sp,sp,8
 8004900:	f800283a 	ret

08004904 <alt_up_pixel_buffer_dma_change_back_buffer_address>:

int alt_up_pixel_buffer_dma_change_back_buffer_address(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int new_address)
/* This function changes the memory address for the back buffer. */
{
 8004904:	defffd04 	addi	sp,sp,-12
 8004908:	df000215 	stw	fp,8(sp)
 800490c:	df000204 	addi	fp,sp,8
 8004910:	e13ffe15 	stw	r4,-8(fp)
 8004914:	e17fff15 	stw	r5,-4(fp)
	IOWR_32DIRECT(pixel_buffer->base, 4, new_address);
 8004918:	e0bffe17 	ldw	r2,-8(fp)
 800491c:	10800a17 	ldw	r2,40(r2)
 8004920:	10800104 	addi	r2,r2,4
 8004924:	1007883a 	mov	r3,r2
 8004928:	e0bfff17 	ldw	r2,-4(fp)
 800492c:	18800035 	stwio	r2,0(r3)
	pixel_buffer->back_buffer_start_address = IORD_32DIRECT(pixel_buffer->base, 4);
 8004930:	e0bffe17 	ldw	r2,-8(fp)
 8004934:	10800a17 	ldw	r2,40(r2)
 8004938:	10800104 	addi	r2,r2,4
 800493c:	10800037 	ldwio	r2,0(r2)
 8004940:	1007883a 	mov	r3,r2
 8004944:	e0bffe17 	ldw	r2,-8(fp)
 8004948:	10c00c15 	stw	r3,48(r2)
	return 0;
 800494c:	0005883a 	mov	r2,zero
}
 8004950:	e037883a 	mov	sp,fp
 8004954:	df000017 	ldw	fp,0(sp)
 8004958:	dec00104 	addi	sp,sp,4
 800495c:	f800283a 	ret

08004960 <alt_up_pixel_buffer_dma_swap_buffers>:

int alt_up_pixel_buffer_dma_swap_buffers(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function swaps the front and back buffers. At the next refresh cycle the back buffer will be drawn on the screen
 * and will become the front buffer. */
{
 8004960:	defffd04 	addi	sp,sp,-12
 8004964:	df000215 	stw	fp,8(sp)
 8004968:	dc000115 	stw	r16,4(sp)
 800496c:	df000204 	addi	fp,sp,8
 8004970:	e13ffe15 	stw	r4,-8(fp)
	register unsigned int temp = pixel_buffer->back_buffer_start_address;
 8004974:	e0bffe17 	ldw	r2,-8(fp)
 8004978:	14000c17 	ldw	r16,48(r2)
	IOWR_32DIRECT(pixel_buffer->base, 0, 1);
 800497c:	e0bffe17 	ldw	r2,-8(fp)
 8004980:	10800a17 	ldw	r2,40(r2)
 8004984:	1007883a 	mov	r3,r2
 8004988:	00800044 	movi	r2,1
 800498c:	18800035 	stwio	r2,0(r3)
	pixel_buffer->back_buffer_start_address = pixel_buffer->buffer_start_address;
 8004990:	e0bffe17 	ldw	r2,-8(fp)
 8004994:	10c00b17 	ldw	r3,44(r2)
 8004998:	e0bffe17 	ldw	r2,-8(fp)
 800499c:	10c00c15 	stw	r3,48(r2)
	pixel_buffer->buffer_start_address = temp;
 80049a0:	e0bffe17 	ldw	r2,-8(fp)
 80049a4:	14000b15 	stw	r16,44(r2)
	return 0;
 80049a8:	0005883a 	mov	r2,zero
}
 80049ac:	e6ffff04 	addi	sp,fp,-4
 80049b0:	df000117 	ldw	fp,4(sp)
 80049b4:	dc000017 	ldw	r16,0(sp)
 80049b8:	dec00204 	addi	sp,sp,8
 80049bc:	f800283a 	ret

080049c0 <alt_up_pixel_buffer_dma_check_swap_buffers_status>:
int alt_up_pixel_buffer_dma_check_swap_buffers_status(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function checks if the buffer swap has occured. Since the buffer swap only happens after an entire screen is drawn,
 * it is important to wait for this function to return 0 before proceeding to draw on either buffer. When both front and the back buffers
 * have the same address calling the alt_up_pixel_buffer_dma_swap_buffers(...) function and then waiting for this function to return 0, causes your program to
 * wait for the screen to refresh. */
{
 80049c0:	defffe04 	addi	sp,sp,-8
 80049c4:	df000115 	stw	fp,4(sp)
 80049c8:	df000104 	addi	fp,sp,4
 80049cc:	e13fff15 	stw	r4,-4(fp)
	return (IORD_32DIRECT(pixel_buffer->base, 12) & 0x1);
 80049d0:	e0bfff17 	ldw	r2,-4(fp)
 80049d4:	10800a17 	ldw	r2,40(r2)
 80049d8:	10800304 	addi	r2,r2,12
 80049dc:	10800037 	ldwio	r2,0(r2)
 80049e0:	1080004c 	andi	r2,r2,1
}
 80049e4:	e037883a 	mov	sp,fp
 80049e8:	df000017 	ldw	fp,0(sp)
 80049ec:	dec00104 	addi	sp,sp,4
 80049f0:	f800283a 	ret

080049f4 <alt_up_pixel_buffer_dma_clear_screen>:

void alt_up_pixel_buffer_dma_clear_screen(alt_up_pixel_buffer_dma_dev *pixel_buffer, int backbuffer)
/* This function clears the screen by setting each pixel to a black color. */
{
 80049f4:	defff604 	addi	sp,sp,-40
 80049f8:	dfc00915 	stw	ra,36(sp)
 80049fc:	df000815 	stw	fp,32(sp)
 8004a00:	dd400715 	stw	r21,28(sp)
 8004a04:	dd000615 	stw	r20,24(sp)
 8004a08:	dcc00515 	stw	r19,20(sp)
 8004a0c:	dc800415 	stw	r18,16(sp)
 8004a10:	dc400315 	stw	r17,12(sp)
 8004a14:	dc000215 	stw	r16,8(sp)
 8004a18:	df000804 	addi	fp,sp,32
 8004a1c:	e13ff815 	stw	r4,-32(fp)
 8004a20:	e17ff915 	stw	r5,-28(fp)
	register unsigned int addr;
	register unsigned int limit_x, limit_y;
	
	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
 8004a24:	e0bff917 	ldw	r2,-28(fp)
 8004a28:	10800058 	cmpnei	r2,r2,1
 8004a2c:	1000031e 	bne	r2,zero,8004a3c <alt_up_pixel_buffer_dma_clear_screen+0x48>
		addr = pixel_buffer->back_buffer_start_address;
 8004a30:	e0bff817 	ldw	r2,-32(fp)
 8004a34:	14400c17 	ldw	r17,48(r2)
 8004a38:	00000206 	br	8004a44 <alt_up_pixel_buffer_dma_clear_screen+0x50>
	else
		addr = pixel_buffer->buffer_start_address;
 8004a3c:	e0bff817 	ldw	r2,-32(fp)
 8004a40:	14400b17 	ldw	r17,44(r2)
	limit_x = pixel_buffer->x_resolution;
 8004a44:	e0bff817 	ldw	r2,-32(fp)
 8004a48:	14000f17 	ldw	r16,60(r2)
	/* In 16 and 32-bit color modes we use twice or four times more memory for the display buffer.*/
	if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 8004a4c:	e0bff817 	ldw	r2,-32(fp)
 8004a50:	10800e17 	ldw	r2,56(r2)
 8004a54:	10800098 	cmpnei	r2,r2,2
 8004a58:	1000031e 	bne	r2,zero,8004a68 <alt_up_pixel_buffer_dma_clear_screen+0x74>
		limit_x = limit_x << 1;
 8004a5c:	8405883a 	add	r2,r16,r16
 8004a60:	1021883a 	mov	r16,r2
 8004a64:	00000306 	br	8004a74 <alt_up_pixel_buffer_dma_clear_screen+0x80>
	} else {
		limit_x = limit_x << 2;
 8004a68:	8405883a 	add	r2,r16,r16
 8004a6c:	1085883a 	add	r2,r2,r2
 8004a70:	1021883a 	mov	r16,r2
	}	
	limit_y = pixel_buffer->y_resolution;
 8004a74:	e0bff817 	ldw	r2,-32(fp)
 8004a78:	14c01017 	ldw	r19,64(r2)

	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 8004a7c:	e0bff817 	ldw	r2,-32(fp)
 8004a80:	10800d17 	ldw	r2,52(r2)
 8004a84:	1000111e 	bne	r2,zero,8004acc <alt_up_pixel_buffer_dma_clear_screen+0xd8>
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
 8004a88:	e0bff817 	ldw	r2,-32(fp)
 8004a8c:	15401317 	ldw	r21,76(r2)

		for (y = 0; y < limit_y; y++)
 8004a90:	0029883a 	mov	r20,zero
 8004a94:	00000b06 	br	8004ac4 <alt_up_pixel_buffer_dma_clear_screen+0xd0>
		{
			for (x = 0; x < limit_x; x = x + 4)
 8004a98:	0025883a 	mov	r18,zero
 8004a9c:	00000406 	br	8004ab0 <alt_up_pixel_buffer_dma_clear_screen+0xbc>
			{
				IOWR_32DIRECT(addr, x, 0);
 8004aa0:	9445883a 	add	r2,r18,r17
 8004aa4:	0007883a 	mov	r3,zero
 8004aa8:	10c00035 	stwio	r3,0(r2)
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
		{
			for (x = 0; x < limit_x; x = x + 4)
 8004aac:	94800104 	addi	r18,r18,4
 8004ab0:	943ffb36 	bltu	r18,r16,8004aa0 <alt_up_pixel_buffer_dma_clear_screen+0xac>
			{
				IOWR_32DIRECT(addr, x, 0);
			}
			addr = addr + (1 << offset_y);
 8004ab4:	00800044 	movi	r2,1
 8004ab8:	1544983a 	sll	r2,r2,r21
 8004abc:	88a3883a 	add	r17,r17,r2
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
 8004ac0:	a5000044 	addi	r20,r20,1
 8004ac4:	a4fff436 	bltu	r20,r19,8004a98 <alt_up_pixel_buffer_dma_clear_screen+0xa4>
		for (x = 0; x < limit_y; x = x + 4)
		{
			IOWR_32DIRECT(addr, x, 0);
		}
	}
}
 8004ac8:	00000d06 	br	8004b00 <alt_up_pixel_buffer_dma_clear_screen+0x10c>
			addr = addr + (1 << offset_y);
		}
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	
 8004acc:	800b883a 	mov	r5,r16
 8004ad0:	9809883a 	mov	r4,r19
 8004ad4:	800306c0 	call	800306c <__mulsi3>
 8004ad8:	1027883a 	mov	r19,r2

		for (x = 0; x < limit_y; x = x + 4)
 8004adc:	0021883a 	mov	r16,zero
 8004ae0:	00000506 	br	8004af8 <alt_up_pixel_buffer_dma_clear_screen+0x104>
		{
			IOWR_32DIRECT(addr, x, 0);
 8004ae4:	8005883a 	mov	r2,r16
 8004ae8:	1445883a 	add	r2,r2,r17
 8004aec:	0007883a 	mov	r3,zero
 8004af0:	10c00035 	stwio	r3,0(r2)
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	

		for (x = 0; x < limit_y; x = x + 4)
 8004af4:	84000104 	addi	r16,r16,4
 8004af8:	8005883a 	mov	r2,r16
 8004afc:	14fff936 	bltu	r2,r19,8004ae4 <alt_up_pixel_buffer_dma_clear_screen+0xf0>
		{
			IOWR_32DIRECT(addr, x, 0);
		}
	}
}
 8004b00:	0001883a 	nop
 8004b04:	e6fffa04 	addi	sp,fp,-24
 8004b08:	dfc00717 	ldw	ra,28(sp)
 8004b0c:	df000617 	ldw	fp,24(sp)
 8004b10:	dd400517 	ldw	r21,20(sp)
 8004b14:	dd000417 	ldw	r20,16(sp)
 8004b18:	dcc00317 	ldw	r19,12(sp)
 8004b1c:	dc800217 	ldw	r18,8(sp)
 8004b20:	dc400117 	ldw	r17,4(sp)
 8004b24:	dc000017 	ldw	r16,0(sp)
 8004b28:	dec00804 	addi	sp,sp,32
 8004b2c:	f800283a 	ret

08004b30 <alt_up_pixel_buffer_dma_draw_box>:

void alt_up_pixel_buffer_dma_draw_box(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a filled box. */
{
 8004b30:	defff204 	addi	sp,sp,-56
 8004b34:	dfc00d15 	stw	ra,52(sp)
 8004b38:	df000c15 	stw	fp,48(sp)
 8004b3c:	ddc00b15 	stw	r23,44(sp)
 8004b40:	dd800a15 	stw	r22,40(sp)
 8004b44:	dd400915 	stw	r21,36(sp)
 8004b48:	dd000815 	stw	r20,32(sp)
 8004b4c:	dcc00715 	stw	r19,28(sp)
 8004b50:	dc800615 	stw	r18,24(sp)
 8004b54:	dc400515 	stw	r17,20(sp)
 8004b58:	dc000415 	stw	r16,16(sp)
 8004b5c:	df000c04 	addi	fp,sp,48
 8004b60:	e13ff415 	stw	r4,-48(fp)
 8004b64:	e17ff515 	stw	r5,-44(fp)
 8004b68:	e1bff615 	stw	r6,-40(fp)
 8004b6c:	e1fff715 	stw	r7,-36(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
 8004b70:	e0bff417 	ldw	r2,-48(fp)
 8004b74:	14800f17 	ldw	r18,60(r2)
	register unsigned int limit_y = pixel_buffer->y_resolution;
 8004b78:	e0bff417 	ldw	r2,-48(fp)
 8004b7c:	14001017 	ldw	r16,64(r2)
	register unsigned int temp;
	register unsigned int l_x = x0;
 8004b80:	e5bff517 	ldw	r22,-44(fp)
	register unsigned int r_x = x1;
 8004b84:	e53ff717 	ldw	r20,-36(fp)
	register unsigned int t_y = y0;
 8004b88:	e47ff617 	ldw	r17,-40(fp)
	register unsigned int b_y = y1;
 8004b8c:	e4c00217 	ldw	r19,8(fp)
	register unsigned int local_color = color;
 8004b90:	e5c00317 	ldw	r23,12(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
 8004b94:	a580032e 	bgeu	r20,r22,8004ba4 <alt_up_pixel_buffer_dma_draw_box+0x74>
	{
		temp = l_x;
 8004b98:	b02b883a 	mov	r21,r22
		l_x = r_x;
 8004b9c:	a02d883a 	mov	r22,r20
		r_x = temp;
 8004ba0:	a829883a 	mov	r20,r21
	}
	if (t_y > b_y)
 8004ba4:	9c40032e 	bgeu	r19,r17,8004bb4 <alt_up_pixel_buffer_dma_draw_box+0x84>
	{
		temp = t_y;
 8004ba8:	882b883a 	mov	r21,r17
		t_y = b_y;
 8004bac:	9823883a 	mov	r17,r19
		b_y = temp;
 8004bb0:	a827883a 	mov	r19,r21
	}
	if ((l_x >= limit_x) || (t_y >= limit_y) || (r_x < 0) || (b_y < 0))
 8004bb4:	b4808f2e 	bgeu	r22,r18,8004df4 <alt_up_pixel_buffer_dma_draw_box+0x2c4>
 8004bb8:	8c008e2e 	bgeu	r17,r16,8004df4 <alt_up_pixel_buffer_dma_draw_box+0x2c4>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
 8004bbc:	a4800136 	bltu	r20,r18,8004bc4 <alt_up_pixel_buffer_dma_draw_box+0x94>
	{
		r_x = limit_x - 1;
 8004bc0:	953fffc4 	addi	r20,r18,-1
	}
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
 8004bc4:	9c000136 	bltu	r19,r16,8004bcc <alt_up_pixel_buffer_dma_draw_box+0x9c>
	{
		b_y = limit_y - 1;
 8004bc8:	84ffffc4 	addi	r19,r16,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
 8004bcc:	e0800417 	ldw	r2,16(fp)
 8004bd0:	10800058 	cmpnei	r2,r2,1
 8004bd4:	1000031e 	bne	r2,zero,8004be4 <alt_up_pixel_buffer_dma_draw_box+0xb4>
		addr = pixel_buffer->back_buffer_start_address;
 8004bd8:	e0bff417 	ldw	r2,-48(fp)
 8004bdc:	14000c17 	ldw	r16,48(r2)
 8004be0:	00000206 	br	8004bec <alt_up_pixel_buffer_dma_draw_box+0xbc>
	else
		addr = pixel_buffer->buffer_start_address;
 8004be4:	e0bff417 	ldw	r2,-48(fp)
 8004be8:	14000b17 	ldw	r16,44(r2)

	/* Draw the box using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 8004bec:	e0bff417 	ldw	r2,-48(fp)
 8004bf0:	10800d17 	ldw	r2,52(r2)
 8004bf4:	10003c1e 	bne	r2,zero,8004ce8 <alt_up_pixel_buffer_dma_draw_box+0x1b8>
		/* Draw a box of a given color on the screen using the XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
 8004bf8:	e0bff417 	ldw	r2,-48(fp)
 8004bfc:	15401317 	ldw	r21,76(r2)
		addr = addr + (t_y << offset_y);
 8004c00:	8d44983a 	sll	r2,r17,r21
 8004c04:	80a1883a 	add	r16,r16,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 8004c08:	e0bff417 	ldw	r2,-48(fp)
 8004c0c:	10800e17 	ldw	r2,56(r2)
 8004c10:	10800058 	cmpnei	r2,r2,1
 8004c14:	10000f1e 	bne	r2,zero,8004c54 <alt_up_pixel_buffer_dma_draw_box+0x124>
			for (y = t_y; y <= b_y; y++)
 8004c18:	8825883a 	mov	r18,r17
 8004c1c:	00000b06 	br	8004c4c <alt_up_pixel_buffer_dma_draw_box+0x11c>
			{
				for (x = l_x; x <= r_x; x++)
 8004c20:	b023883a 	mov	r17,r22
 8004c24:	00000406 	br	8004c38 <alt_up_pixel_buffer_dma_draw_box+0x108>
				{
					IOWR_8DIRECT(addr, x, local_color);
 8004c28:	8c05883a 	add	r2,r17,r16
 8004c2c:	b807883a 	mov	r3,r23
 8004c30:	10c00025 	stbio	r3,0(r2)
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 8004c34:	8c400044 	addi	r17,r17,1
 8004c38:	a47ffb2e 	bgeu	r20,r17,8004c28 <alt_up_pixel_buffer_dma_draw_box+0xf8>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
 8004c3c:	00800044 	movi	r2,1
 8004c40:	1544983a 	sll	r2,r2,r21
 8004c44:	80a1883a 	add	r16,r16,r2
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 8004c48:	94800044 	addi	r18,r18,1
 8004c4c:	9cbff42e 	bgeu	r19,r18,8004c20 <alt_up_pixel_buffer_dma_draw_box+0xf0>
 8004c50:	00006906 	br	8004df8 <alt_up_pixel_buffer_dma_draw_box+0x2c8>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 8004c54:	e0bff417 	ldw	r2,-48(fp)
 8004c58:	10800e17 	ldw	r2,56(r2)
 8004c5c:	10800098 	cmpnei	r2,r2,2
 8004c60:	1000101e 	bne	r2,zero,8004ca4 <alt_up_pixel_buffer_dma_draw_box+0x174>
			for (y = t_y; y <= b_y; y++)
 8004c64:	8825883a 	mov	r18,r17
 8004c68:	00000c06 	br	8004c9c <alt_up_pixel_buffer_dma_draw_box+0x16c>
			{
				for (x = l_x; x <= r_x; x++)
 8004c6c:	b023883a 	mov	r17,r22
 8004c70:	00000506 	br	8004c88 <alt_up_pixel_buffer_dma_draw_box+0x158>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
 8004c74:	8c45883a 	add	r2,r17,r17
 8004c78:	1405883a 	add	r2,r2,r16
 8004c7c:	b807883a 	mov	r3,r23
 8004c80:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 8004c84:	8c400044 	addi	r17,r17,1
 8004c88:	a47ffa2e 	bgeu	r20,r17,8004c74 <alt_up_pixel_buffer_dma_draw_box+0x144>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + (1 << offset_y);
 8004c8c:	00800044 	movi	r2,1
 8004c90:	1544983a 	sll	r2,r2,r21
 8004c94:	80a1883a 	add	r16,r16,r2
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 8004c98:	94800044 	addi	r18,r18,1
 8004c9c:	9cbff32e 	bgeu	r19,r18,8004c6c <alt_up_pixel_buffer_dma_draw_box+0x13c>
 8004ca0:	00005506 	br	8004df8 <alt_up_pixel_buffer_dma_draw_box+0x2c8>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
 8004ca4:	8825883a 	mov	r18,r17
 8004ca8:	00000d06 	br	8004ce0 <alt_up_pixel_buffer_dma_draw_box+0x1b0>
			{
				for (x = l_x; x <= r_x; x++)
 8004cac:	b023883a 	mov	r17,r22
 8004cb0:	00000606 	br	8004ccc <alt_up_pixel_buffer_dma_draw_box+0x19c>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
 8004cb4:	8c45883a 	add	r2,r17,r17
 8004cb8:	1085883a 	add	r2,r2,r2
 8004cbc:	1405883a 	add	r2,r2,r16
 8004cc0:	b807883a 	mov	r3,r23
 8004cc4:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 8004cc8:	8c400044 	addi	r17,r17,1
 8004ccc:	a47ff92e 	bgeu	r20,r17,8004cb4 <alt_up_pixel_buffer_dma_draw_box+0x184>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + (1 << offset_y);
 8004cd0:	00800044 	movi	r2,1
 8004cd4:	1544983a 	sll	r2,r2,r21
 8004cd8:	80a1883a 	add	r16,r16,r2
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
 8004cdc:	94800044 	addi	r18,r18,1
 8004ce0:	9cbff22e 	bgeu	r19,r18,8004cac <alt_up_pixel_buffer_dma_draw_box+0x17c>
 8004ce4:	00004406 	br	8004df8 <alt_up_pixel_buffer_dma_draw_box+0x2c8>
	} else {
		/* Draw a box of a given color on the screen using the linear addressing mode. */
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 8004ce8:	e0bff417 	ldw	r2,-48(fp)
 8004cec:	10800e17 	ldw	r2,56(r2)
 8004cf0:	10800058 	cmpnei	r2,r2,1
 8004cf4:	1000111e 	bne	r2,zero,8004d3c <alt_up_pixel_buffer_dma_draw_box+0x20c>
			addr = addr + t_y * limit_x;
 8004cf8:	900b883a 	mov	r5,r18
 8004cfc:	8809883a 	mov	r4,r17
 8004d00:	800306c0 	call	800306c <__mulsi3>
 8004d04:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
 8004d08:	882b883a 	mov	r21,r17
 8004d0c:	00000906 	br	8004d34 <alt_up_pixel_buffer_dma_draw_box+0x204>
			{
				for (x = l_x; x <= r_x; x++)
 8004d10:	b023883a 	mov	r17,r22
 8004d14:	00000406 	br	8004d28 <alt_up_pixel_buffer_dma_draw_box+0x1f8>
				{
					IOWR_8DIRECT(addr, x, local_color);
 8004d18:	8c05883a 	add	r2,r17,r16
 8004d1c:	b807883a 	mov	r3,r23
 8004d20:	10c00025 	stbio	r3,0(r2)
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 8004d24:	8c400044 	addi	r17,r17,1
 8004d28:	a47ffb2e 	bgeu	r20,r17,8004d18 <alt_up_pixel_buffer_dma_draw_box+0x1e8>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
 8004d2c:	84a1883a 	add	r16,r16,r18
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 8004d30:	ad400044 	addi	r21,r21,1
 8004d34:	9d7ff62e 	bgeu	r19,r21,8004d10 <alt_up_pixel_buffer_dma_draw_box+0x1e0>
 8004d38:	00002f06 	br	8004df8 <alt_up_pixel_buffer_dma_draw_box+0x2c8>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 8004d3c:	e0bff417 	ldw	r2,-48(fp)
 8004d40:	10800e17 	ldw	r2,56(r2)
 8004d44:	10800098 	cmpnei	r2,r2,2
 8004d48:	1000141e 	bne	r2,zero,8004d9c <alt_up_pixel_buffer_dma_draw_box+0x26c>
			limit_x = limit_x << 1;
 8004d4c:	9485883a 	add	r2,r18,r18
 8004d50:	1025883a 	mov	r18,r2
			addr = addr + t_y * limit_x;
 8004d54:	900b883a 	mov	r5,r18
 8004d58:	8809883a 	mov	r4,r17
 8004d5c:	800306c0 	call	800306c <__mulsi3>
 8004d60:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
 8004d64:	882b883a 	mov	r21,r17
 8004d68:	00000a06 	br	8004d94 <alt_up_pixel_buffer_dma_draw_box+0x264>
			{
				for (x = l_x; x <= r_x; x++)
 8004d6c:	b023883a 	mov	r17,r22
 8004d70:	00000506 	br	8004d88 <alt_up_pixel_buffer_dma_draw_box+0x258>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
 8004d74:	8c45883a 	add	r2,r17,r17
 8004d78:	1405883a 	add	r2,r2,r16
 8004d7c:	b807883a 	mov	r3,r23
 8004d80:	10c0002d 	sthio	r3,0(r2)
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 8004d84:	8c400044 	addi	r17,r17,1
 8004d88:	a47ffa2e 	bgeu	r20,r17,8004d74 <alt_up_pixel_buffer_dma_draw_box+0x244>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + limit_x;
 8004d8c:	84a1883a 	add	r16,r16,r18
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 8004d90:	ad400044 	addi	r21,r21,1
 8004d94:	9d7ff52e 	bgeu	r19,r21,8004d6c <alt_up_pixel_buffer_dma_draw_box+0x23c>
 8004d98:	00001706 	br	8004df8 <alt_up_pixel_buffer_dma_draw_box+0x2c8>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
 8004d9c:	9485883a 	add	r2,r18,r18
 8004da0:	1085883a 	add	r2,r2,r2
 8004da4:	1025883a 	mov	r18,r2
			addr = addr + t_y * limit_x;
 8004da8:	900b883a 	mov	r5,r18
 8004dac:	8809883a 	mov	r4,r17
 8004db0:	800306c0 	call	800306c <__mulsi3>
 8004db4:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
 8004db8:	882b883a 	mov	r21,r17
 8004dbc:	00000b06 	br	8004dec <alt_up_pixel_buffer_dma_draw_box+0x2bc>
			{
				for (x = l_x; x <= r_x; x++)
 8004dc0:	b023883a 	mov	r17,r22
 8004dc4:	00000606 	br	8004de0 <alt_up_pixel_buffer_dma_draw_box+0x2b0>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
 8004dc8:	8c45883a 	add	r2,r17,r17
 8004dcc:	1085883a 	add	r2,r2,r2
 8004dd0:	1405883a 	add	r2,r2,r16
 8004dd4:	b807883a 	mov	r3,r23
 8004dd8:	10c00035 	stwio	r3,0(r2)
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 8004ddc:	8c400044 	addi	r17,r17,1
 8004de0:	a47ff92e 	bgeu	r20,r17,8004dc8 <alt_up_pixel_buffer_dma_draw_box+0x298>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + limit_x;
 8004de4:	84a1883a 	add	r16,r16,r18
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 8004de8:	ad400044 	addi	r21,r21,1
 8004dec:	9d7ff42e 	bgeu	r19,r21,8004dc0 <alt_up_pixel_buffer_dma_draw_box+0x290>
 8004df0:	00000106 	br	8004df8 <alt_up_pixel_buffer_dma_draw_box+0x2c8>
		b_y = temp;
	}
	if ((l_x >= limit_x) || (t_y >= limit_y) || (r_x < 0) || (b_y < 0))
	{
		/* Drawing outside of the window, so don't bother. */
		return;
 8004df4:	0001883a 	nop
				}
				addr = addr + limit_x;
			}
		}
	}
}
 8004df8:	e6fff804 	addi	sp,fp,-32
 8004dfc:	dfc00917 	ldw	ra,36(sp)
 8004e00:	df000817 	ldw	fp,32(sp)
 8004e04:	ddc00717 	ldw	r23,28(sp)
 8004e08:	dd800617 	ldw	r22,24(sp)
 8004e0c:	dd400517 	ldw	r21,20(sp)
 8004e10:	dd000417 	ldw	r20,16(sp)
 8004e14:	dcc00317 	ldw	r19,12(sp)
 8004e18:	dc800217 	ldw	r18,8(sp)
 8004e1c:	dc400117 	ldw	r17,4(sp)
 8004e20:	dc000017 	ldw	r16,0(sp)
 8004e24:	dec00a04 	addi	sp,sp,40
 8004e28:	f800283a 	ret

08004e2c <alt_up_pixel_buffer_dma_draw_hline>:

void alt_up_pixel_buffer_dma_draw_hline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int x1, int y, int color, int backbuffer)
/* This method draws a horizontal line. This method is faster than using the line method because we know the direction of the line. */
{
 8004e2c:	defff304 	addi	sp,sp,-52
 8004e30:	dfc00c15 	stw	ra,48(sp)
 8004e34:	df000b15 	stw	fp,44(sp)
 8004e38:	dd800a15 	stw	r22,40(sp)
 8004e3c:	dd400915 	stw	r21,36(sp)
 8004e40:	dd000815 	stw	r20,32(sp)
 8004e44:	dcc00715 	stw	r19,28(sp)
 8004e48:	dc800615 	stw	r18,24(sp)
 8004e4c:	dc400515 	stw	r17,20(sp)
 8004e50:	dc000415 	stw	r16,16(sp)
 8004e54:	df000b04 	addi	fp,sp,44
 8004e58:	e13ff515 	stw	r4,-44(fp)
 8004e5c:	e17ff615 	stw	r5,-40(fp)
 8004e60:	e1bff715 	stw	r6,-36(fp)
 8004e64:	e1fff815 	stw	r7,-32(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
 8004e68:	e0bff517 	ldw	r2,-44(fp)
 8004e6c:	14c00f17 	ldw	r19,60(r2)
	register unsigned int limit_y = pixel_buffer->y_resolution;
 8004e70:	e0bff517 	ldw	r2,-44(fp)
 8004e74:	14001017 	ldw	r16,64(r2)
	register unsigned int temp;
	register unsigned int l_x = x0;
 8004e78:	e47ff617 	ldw	r17,-40(fp)
	register unsigned int r_x = x1;
 8004e7c:	e4bff717 	ldw	r18,-36(fp)
	register unsigned int line_y = y;
 8004e80:	e53ff817 	ldw	r20,-32(fp)
	register unsigned int local_color = color;
 8004e84:	e5400217 	ldw	r21,8(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
 8004e88:	9440032e 	bgeu	r18,r17,8004e98 <alt_up_pixel_buffer_dma_draw_hline+0x6c>
	{
		temp = l_x;
 8004e8c:	882d883a 	mov	r22,r17
		l_x = r_x;
 8004e90:	9023883a 	mov	r17,r18
		r_x = temp;
 8004e94:	b025883a 	mov	r18,r22
	}
	if ((l_x >= limit_x) || (line_y >= limit_y) || (r_x < 0) || (line_y < 0))
 8004e98:	8cc0632e 	bgeu	r17,r19,8005028 <alt_up_pixel_buffer_dma_draw_hline+0x1fc>
 8004e9c:	a400622e 	bgeu	r20,r16,8005028 <alt_up_pixel_buffer_dma_draw_hline+0x1fc>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
 8004ea0:	94c00136 	bltu	r18,r19,8004ea8 <alt_up_pixel_buffer_dma_draw_hline+0x7c>
	{
		r_x = limit_x - 1;
 8004ea4:	9cbfffc4 	addi	r18,r19,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
 8004ea8:	e0800317 	ldw	r2,12(fp)
 8004eac:	10800058 	cmpnei	r2,r2,1
 8004eb0:	1000031e 	bne	r2,zero,8004ec0 <alt_up_pixel_buffer_dma_draw_hline+0x94>
		addr = pixel_buffer->back_buffer_start_address;
 8004eb4:	e0bff517 	ldw	r2,-44(fp)
 8004eb8:	14000c17 	ldw	r16,48(r2)
 8004ebc:	00000206 	br	8004ec8 <alt_up_pixel_buffer_dma_draw_hline+0x9c>
	else
		addr = pixel_buffer->buffer_start_address;
 8004ec0:	e0bff517 	ldw	r2,-44(fp)
 8004ec4:	14000b17 	ldw	r16,44(r2)

	/* Draw a horizontal line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 8004ec8:	e0bff517 	ldw	r2,-44(fp)
 8004ecc:	10800d17 	ldw	r2,52(r2)
 8004ed0:	1000231e 	bne	r2,zero,8004f60 <alt_up_pixel_buffer_dma_draw_hline+0x134>
		/* Draw a horizontal line of a given color on the screen using the XY addressing mode. */
		register unsigned int x;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
 8004ed4:	e0bff517 	ldw	r2,-44(fp)
 8004ed8:	14c01317 	ldw	r19,76(r2)
		addr = addr + (line_y << offset_y);
 8004edc:	a4c4983a 	sll	r2,r20,r19
 8004ee0:	80a1883a 	add	r16,r16,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 8004ee4:	e0bff517 	ldw	r2,-44(fp)
 8004ee8:	10800e17 	ldw	r2,56(r2)
 8004eec:	10800058 	cmpnei	r2,r2,1
 8004ef0:	1000071e 	bne	r2,zero,8004f10 <alt_up_pixel_buffer_dma_draw_hline+0xe4>
			for (x = l_x; x <= r_x; x++)
 8004ef4:	00000406 	br	8004f08 <alt_up_pixel_buffer_dma_draw_hline+0xdc>
			{
				IOWR_8DIRECT(addr, x, local_color);
 8004ef8:	8c05883a 	add	r2,r17,r16
 8004efc:	a807883a 	mov	r3,r21
 8004f00:	10c00025 	stbio	r3,0(r2)
		addr = addr + (line_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
 8004f04:	8c400044 	addi	r17,r17,1
 8004f08:	947ffb2e 	bgeu	r18,r17,8004ef8 <alt_up_pixel_buffer_dma_draw_hline+0xcc>
 8004f0c:	00004706 	br	800502c <alt_up_pixel_buffer_dma_draw_hline+0x200>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 8004f10:	e0bff517 	ldw	r2,-44(fp)
 8004f14:	10800e17 	ldw	r2,56(r2)
 8004f18:	10800098 	cmpnei	r2,r2,2
 8004f1c:	10000e1e 	bne	r2,zero,8004f58 <alt_up_pixel_buffer_dma_draw_hline+0x12c>
			for (x = l_x; x <= r_x; x++)
 8004f20:	00000506 	br	8004f38 <alt_up_pixel_buffer_dma_draw_hline+0x10c>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
 8004f24:	8c45883a 	add	r2,r17,r17
 8004f28:	1405883a 	add	r2,r2,r16
 8004f2c:	a807883a 	mov	r3,r21
 8004f30:	10c0002d 	sthio	r3,0(r2)
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
 8004f34:	8c400044 	addi	r17,r17,1
 8004f38:	947ffa2e 	bgeu	r18,r17,8004f24 <alt_up_pixel_buffer_dma_draw_hline+0xf8>
 8004f3c:	00003b06 	br	800502c <alt_up_pixel_buffer_dma_draw_hline+0x200>
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
 8004f40:	8c45883a 	add	r2,r17,r17
 8004f44:	1085883a 	add	r2,r2,r2
 8004f48:	1405883a 	add	r2,r2,r16
 8004f4c:	a807883a 	mov	r3,r21
 8004f50:	10c00035 	stwio	r3,0(r2)
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
 8004f54:	8c400044 	addi	r17,r17,1
 8004f58:	947ff92e 	bgeu	r18,r17,8004f40 <alt_up_pixel_buffer_dma_draw_hline+0x114>
 8004f5c:	00003306 	br	800502c <alt_up_pixel_buffer_dma_draw_hline+0x200>
	} else {
		/* Draw a horizontal line of a given color on the screen using the linear addressing mode. */
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 8004f60:	e0bff517 	ldw	r2,-44(fp)
 8004f64:	10800e17 	ldw	r2,56(r2)
 8004f68:	10800058 	cmpnei	r2,r2,1
 8004f6c:	10000b1e 	bne	r2,zero,8004f9c <alt_up_pixel_buffer_dma_draw_hline+0x170>
			addr = addr + line_y * limit_x;
 8004f70:	980b883a 	mov	r5,r19
 8004f74:	a009883a 	mov	r4,r20
 8004f78:	800306c0 	call	800306c <__mulsi3>
 8004f7c:	80a1883a 	add	r16,r16,r2
			for (x = l_x; x <= r_x; x++)
 8004f80:	00000406 	br	8004f94 <alt_up_pixel_buffer_dma_draw_hline+0x168>
			{
				IOWR_8DIRECT(addr, x, local_color);
 8004f84:	8c05883a 	add	r2,r17,r16
 8004f88:	a807883a 	mov	r3,r21
 8004f8c:	10c00025 	stbio	r3,0(r2)
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
 8004f90:	8c400044 	addi	r17,r17,1
 8004f94:	947ffb2e 	bgeu	r18,r17,8004f84 <alt_up_pixel_buffer_dma_draw_hline+0x158>
 8004f98:	00002406 	br	800502c <alt_up_pixel_buffer_dma_draw_hline+0x200>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 8004f9c:	e0bff517 	ldw	r2,-44(fp)
 8004fa0:	10800e17 	ldw	r2,56(r2)
 8004fa4:	10800098 	cmpnei	r2,r2,2
 8004fa8:	10000e1e 	bne	r2,zero,8004fe4 <alt_up_pixel_buffer_dma_draw_hline+0x1b8>
			limit_x = limit_x << 1;
 8004fac:	9cc5883a 	add	r2,r19,r19
 8004fb0:	1027883a 	mov	r19,r2
			addr = addr + line_y * limit_x;
 8004fb4:	980b883a 	mov	r5,r19
 8004fb8:	a009883a 	mov	r4,r20
 8004fbc:	800306c0 	call	800306c <__mulsi3>
 8004fc0:	80a1883a 	add	r16,r16,r2
			for (x = l_x; x <= r_x; x++)
 8004fc4:	00000506 	br	8004fdc <alt_up_pixel_buffer_dma_draw_hline+0x1b0>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
 8004fc8:	8c45883a 	add	r2,r17,r17
 8004fcc:	1405883a 	add	r2,r2,r16
 8004fd0:	a807883a 	mov	r3,r21
 8004fd4:	10c0002d 	sthio	r3,0(r2)
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
 8004fd8:	8c400044 	addi	r17,r17,1
 8004fdc:	947ffa2e 	bgeu	r18,r17,8004fc8 <alt_up_pixel_buffer_dma_draw_hline+0x19c>
 8004fe0:	00001206 	br	800502c <alt_up_pixel_buffer_dma_draw_hline+0x200>
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			limit_x = limit_x << 2;
 8004fe4:	9cc5883a 	add	r2,r19,r19
 8004fe8:	1085883a 	add	r2,r2,r2
 8004fec:	1027883a 	mov	r19,r2
			addr = addr + line_y * limit_x;
 8004ff0:	980b883a 	mov	r5,r19
 8004ff4:	a009883a 	mov	r4,r20
 8004ff8:	800306c0 	call	800306c <__mulsi3>
 8004ffc:	80a1883a 	add	r16,r16,r2
			for (x = l_x; x <= r_x; x++)
 8005000:	00000606 	br	800501c <alt_up_pixel_buffer_dma_draw_hline+0x1f0>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
 8005004:	8c45883a 	add	r2,r17,r17
 8005008:	1085883a 	add	r2,r2,r2
 800500c:	1405883a 	add	r2,r2,r16
 8005010:	a807883a 	mov	r3,r21
 8005014:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
 8005018:	8c400044 	addi	r17,r17,1
 800501c:	947ff92e 	bgeu	r18,r17,8005004 <alt_up_pixel_buffer_dma_draw_hline+0x1d8>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
			}
			addr = addr + limit_x;
 8005020:	84e1883a 	add	r16,r16,r19
 8005024:	00000106 	br	800502c <alt_up_pixel_buffer_dma_draw_hline+0x200>
		r_x = temp;
	}
	if ((l_x >= limit_x) || (line_y >= limit_y) || (r_x < 0) || (line_y < 0))
	{
		/* Drawing outside of the window, so don't bother. */
		return;
 8005028:	0001883a 	nop
				IOWR_32DIRECT(addr, x << 2, local_color);
			}
			addr = addr + limit_x;
		}
	}
}
 800502c:	e6fff904 	addi	sp,fp,-28
 8005030:	dfc00817 	ldw	ra,32(sp)
 8005034:	df000717 	ldw	fp,28(sp)
 8005038:	dd800617 	ldw	r22,24(sp)
 800503c:	dd400517 	ldw	r21,20(sp)
 8005040:	dd000417 	ldw	r20,16(sp)
 8005044:	dcc00317 	ldw	r19,12(sp)
 8005048:	dc800217 	ldw	r18,8(sp)
 800504c:	dc400117 	ldw	r17,4(sp)
 8005050:	dc000017 	ldw	r16,0(sp)
 8005054:	dec00904 	addi	sp,sp,36
 8005058:	f800283a 	ret

0800505c <alt_up_pixel_buffer_dma_draw_vline>:


void alt_up_pixel_buffer_dma_draw_vline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x, int y0, int y1, int color, int backbuffer)
/* This method draws a vertical line. This method is faster than using the line method because we know the direction of the line. */

{
 800505c:	defff304 	addi	sp,sp,-52
 8005060:	dfc00c15 	stw	ra,48(sp)
 8005064:	df000b15 	stw	fp,44(sp)
 8005068:	dd800a15 	stw	r22,40(sp)
 800506c:	dd400915 	stw	r21,36(sp)
 8005070:	dd000815 	stw	r20,32(sp)
 8005074:	dcc00715 	stw	r19,28(sp)
 8005078:	dc800615 	stw	r18,24(sp)
 800507c:	dc400515 	stw	r17,20(sp)
 8005080:	dc000415 	stw	r16,16(sp)
 8005084:	df000b04 	addi	fp,sp,44
 8005088:	e13ff515 	stw	r4,-44(fp)
 800508c:	e17ff615 	stw	r5,-40(fp)
 8005090:	e1bff715 	stw	r6,-36(fp)
 8005094:	e1fff815 	stw	r7,-32(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
 8005098:	e0bff517 	ldw	r2,-44(fp)
 800509c:	14c00f17 	ldw	r19,60(r2)
	register unsigned int limit_y = pixel_buffer->y_resolution;
 80050a0:	e0bff517 	ldw	r2,-44(fp)
 80050a4:	14001017 	ldw	r16,64(r2)
	register unsigned int temp;
	register unsigned int line_x = x;
 80050a8:	e47ff617 	ldw	r17,-40(fp)
	register unsigned int t_y = y0;
 80050ac:	e53ff717 	ldw	r20,-36(fp)
	register unsigned int b_y = y1;
 80050b0:	e4bff817 	ldw	r18,-32(fp)
	register unsigned int local_color = color;
 80050b4:	e5800217 	ldw	r22,8(fp)
	
	/* Check coordinates */
	if (t_y > b_y)
 80050b8:	9500032e 	bgeu	r18,r20,80050c8 <alt_up_pixel_buffer_dma_draw_vline+0x6c>
	{
		temp = t_y;
 80050bc:	a02b883a 	mov	r21,r20
		t_y = b_y;
 80050c0:	9029883a 	mov	r20,r18
		b_y = temp;
 80050c4:	a825883a 	mov	r18,r21
	}
	if ((line_x >= limit_x) || (t_y >= limit_y) || (line_x < 0) || (b_y < 0))
 80050c8:	8cc0722e 	bgeu	r17,r19,8005294 <alt_up_pixel_buffer_dma_draw_vline+0x238>
 80050cc:	a400712e 	bgeu	r20,r16,8005294 <alt_up_pixel_buffer_dma_draw_vline+0x238>
	/* Clip the box and draw only within the confines of the screen. */
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
 80050d0:	94000136 	bltu	r18,r16,80050d8 <alt_up_pixel_buffer_dma_draw_vline+0x7c>
	{
		b_y = limit_y - 1;
 80050d4:	84bfffc4 	addi	r18,r16,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
 80050d8:	e0800317 	ldw	r2,12(fp)
 80050dc:	10800058 	cmpnei	r2,r2,1
 80050e0:	1000031e 	bne	r2,zero,80050f0 <alt_up_pixel_buffer_dma_draw_vline+0x94>
		addr = pixel_buffer->back_buffer_start_address;
 80050e4:	e0bff517 	ldw	r2,-44(fp)
 80050e8:	14000c17 	ldw	r16,48(r2)
 80050ec:	00000206 	br	80050f8 <alt_up_pixel_buffer_dma_draw_vline+0x9c>
	else
		addr = pixel_buffer->buffer_start_address;
 80050f0:	e0bff517 	ldw	r2,-44(fp)
 80050f4:	14000b17 	ldw	r16,44(r2)

	/* Draw the vertical line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 80050f8:	e0bff517 	ldw	r2,-44(fp)
 80050fc:	10800d17 	ldw	r2,52(r2)
 8005100:	1000301e 	bne	r2,zero,80051c4 <alt_up_pixel_buffer_dma_draw_vline+0x168>
		/* Draw a vertical line of a given color on the screen using the XY addressing mode. */
		register unsigned int y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
 8005104:	e0bff517 	ldw	r2,-44(fp)
 8005108:	15401317 	ldw	r21,76(r2)
		addr = addr + (t_y << offset_y);
 800510c:	a544983a 	sll	r2,r20,r21
 8005110:	80a1883a 	add	r16,r16,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 8005114:	e0bff517 	ldw	r2,-44(fp)
 8005118:	10800e17 	ldw	r2,56(r2)
 800511c:	10800058 	cmpnei	r2,r2,1
 8005120:	10000b1e 	bne	r2,zero,8005150 <alt_up_pixel_buffer_dma_draw_vline+0xf4>
			for (y = t_y; y <= b_y; y++)
 8005124:	a027883a 	mov	r19,r20
 8005128:	00000706 	br	8005148 <alt_up_pixel_buffer_dma_draw_vline+0xec>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
 800512c:	8c05883a 	add	r2,r17,r16
 8005130:	b007883a 	mov	r3,r22
 8005134:	10c00025 	stbio	r3,0(r2)
				addr = addr + (1 << offset_y);
 8005138:	00800044 	movi	r2,1
 800513c:	1544983a 	sll	r2,r2,r21
 8005140:	80a1883a 	add	r16,r16,r2
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 8005144:	9cc00044 	addi	r19,r19,1
 8005148:	94fff82e 	bgeu	r18,r19,800512c <alt_up_pixel_buffer_dma_draw_vline+0xd0>
 800514c:	00005206 	br	8005298 <alt_up_pixel_buffer_dma_draw_vline+0x23c>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 8005150:	e0bff517 	ldw	r2,-44(fp)
 8005154:	10800e17 	ldw	r2,56(r2)
 8005158:	10800098 	cmpnei	r2,r2,2
 800515c:	10000c1e 	bne	r2,zero,8005190 <alt_up_pixel_buffer_dma_draw_vline+0x134>
			for (y = t_y; y <= b_y; y++)
 8005160:	a027883a 	mov	r19,r20
 8005164:	00000806 	br	8005188 <alt_up_pixel_buffer_dma_draw_vline+0x12c>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
 8005168:	8c45883a 	add	r2,r17,r17
 800516c:	1405883a 	add	r2,r2,r16
 8005170:	b007883a 	mov	r3,r22
 8005174:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
 8005178:	00800044 	movi	r2,1
 800517c:	1544983a 	sll	r2,r2,r21
 8005180:	80a1883a 	add	r16,r16,r2
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 8005184:	9cc00044 	addi	r19,r19,1
 8005188:	94fff72e 	bgeu	r18,r19,8005168 <alt_up_pixel_buffer_dma_draw_vline+0x10c>
 800518c:	00004206 	br	8005298 <alt_up_pixel_buffer_dma_draw_vline+0x23c>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
 8005190:	a027883a 	mov	r19,r20
 8005194:	00000906 	br	80051bc <alt_up_pixel_buffer_dma_draw_vline+0x160>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
 8005198:	8c45883a 	add	r2,r17,r17
 800519c:	1085883a 	add	r2,r2,r2
 80051a0:	1405883a 	add	r2,r2,r16
 80051a4:	b007883a 	mov	r3,r22
 80051a8:	10c00035 	stwio	r3,0(r2)
				addr = addr + (1 << offset_y);
 80051ac:	00800044 	movi	r2,1
 80051b0:	1544983a 	sll	r2,r2,r21
 80051b4:	80a1883a 	add	r16,r16,r2
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
 80051b8:	9cc00044 	addi	r19,r19,1
 80051bc:	94fff62e 	bgeu	r18,r19,8005198 <alt_up_pixel_buffer_dma_draw_vline+0x13c>
 80051c0:	00003506 	br	8005298 <alt_up_pixel_buffer_dma_draw_vline+0x23c>
	} else {
		/* Draw a vertical line of a given color on the screen using the linear addressing mode. */
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 80051c4:	e0bff517 	ldw	r2,-44(fp)
 80051c8:	10800e17 	ldw	r2,56(r2)
 80051cc:	10800058 	cmpnei	r2,r2,1
 80051d0:	10000c1e 	bne	r2,zero,8005204 <alt_up_pixel_buffer_dma_draw_vline+0x1a8>
			addr = addr + t_y * limit_x;
 80051d4:	980b883a 	mov	r5,r19
 80051d8:	a009883a 	mov	r4,r20
 80051dc:	800306c0 	call	800306c <__mulsi3>
 80051e0:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
 80051e4:	00000506 	br	80051fc <alt_up_pixel_buffer_dma_draw_vline+0x1a0>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
 80051e8:	8c05883a 	add	r2,r17,r16
 80051ec:	b007883a 	mov	r3,r22
 80051f0:	10c00025 	stbio	r3,0(r2)
				addr = addr + limit_x;
 80051f4:	84e1883a 	add	r16,r16,r19
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 80051f8:	a5000044 	addi	r20,r20,1
 80051fc:	953ffa2e 	bgeu	r18,r20,80051e8 <alt_up_pixel_buffer_dma_draw_vline+0x18c>
 8005200:	00002506 	br	8005298 <alt_up_pixel_buffer_dma_draw_vline+0x23c>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 8005204:	e0bff517 	ldw	r2,-44(fp)
 8005208:	10800e17 	ldw	r2,56(r2)
 800520c:	10800098 	cmpnei	r2,r2,2
 8005210:	10000f1e 	bne	r2,zero,8005250 <alt_up_pixel_buffer_dma_draw_vline+0x1f4>
			limit_x = limit_x << 1;
 8005214:	9cc5883a 	add	r2,r19,r19
 8005218:	1027883a 	mov	r19,r2
			addr = addr + t_y * limit_x;
 800521c:	980b883a 	mov	r5,r19
 8005220:	a009883a 	mov	r4,r20
 8005224:	800306c0 	call	800306c <__mulsi3>
 8005228:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
 800522c:	00000606 	br	8005248 <alt_up_pixel_buffer_dma_draw_vline+0x1ec>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
 8005230:	8c45883a 	add	r2,r17,r17
 8005234:	1405883a 	add	r2,r2,r16
 8005238:	b007883a 	mov	r3,r22
 800523c:	10c0002d 	sthio	r3,0(r2)
				addr = addr + limit_x;
 8005240:	84e1883a 	add	r16,r16,r19
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 8005244:	a5000044 	addi	r20,r20,1
 8005248:	953ff92e 	bgeu	r18,r20,8005230 <alt_up_pixel_buffer_dma_draw_vline+0x1d4>
 800524c:	00001206 	br	8005298 <alt_up_pixel_buffer_dma_draw_vline+0x23c>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
 8005250:	9cc5883a 	add	r2,r19,r19
 8005254:	1085883a 	add	r2,r2,r2
 8005258:	1027883a 	mov	r19,r2
			addr = addr + t_y * limit_x;
 800525c:	980b883a 	mov	r5,r19
 8005260:	a009883a 	mov	r4,r20
 8005264:	800306c0 	call	800306c <__mulsi3>
 8005268:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
 800526c:	00000706 	br	800528c <alt_up_pixel_buffer_dma_draw_vline+0x230>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
 8005270:	8c45883a 	add	r2,r17,r17
 8005274:	1085883a 	add	r2,r2,r2
 8005278:	1405883a 	add	r2,r2,r16
 800527c:	b007883a 	mov	r3,r22
 8005280:	10c00035 	stwio	r3,0(r2)
				addr = addr + limit_x;
 8005284:	84e1883a 	add	r16,r16,r19
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 8005288:	a5000044 	addi	r20,r20,1
 800528c:	953ff82e 	bgeu	r18,r20,8005270 <alt_up_pixel_buffer_dma_draw_vline+0x214>
 8005290:	00000106 	br	8005298 <alt_up_pixel_buffer_dma_draw_vline+0x23c>
		b_y = temp;
	}
	if ((line_x >= limit_x) || (t_y >= limit_y) || (line_x < 0) || (b_y < 0))
	{
		/* Drawing outside of the window, so don't bother. */
		return;
 8005294:	0001883a 	nop
				IOWR_32DIRECT(addr, line_x << 2, local_color);
				addr = addr + limit_x;
			}
		}
	}
}
 8005298:	e6fff904 	addi	sp,fp,-28
 800529c:	dfc00817 	ldw	ra,32(sp)
 80052a0:	df000717 	ldw	fp,28(sp)
 80052a4:	dd800617 	ldw	r22,24(sp)
 80052a8:	dd400517 	ldw	r21,20(sp)
 80052ac:	dd000417 	ldw	r20,16(sp)
 80052b0:	dcc00317 	ldw	r19,12(sp)
 80052b4:	dc800217 	ldw	r18,8(sp)
 80052b8:	dc400117 	ldw	r17,4(sp)
 80052bc:	dc000017 	ldw	r16,0(sp)
 80052c0:	dec00904 	addi	sp,sp,36
 80052c4:	f800283a 	ret

080052c8 <alt_up_pixel_buffer_dma_draw_rectangle>:

void alt_up_pixel_buffer_dma_draw_rectangle(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
{
 80052c8:	defff804 	addi	sp,sp,-32
 80052cc:	dfc00715 	stw	ra,28(sp)
 80052d0:	df000615 	stw	fp,24(sp)
 80052d4:	df000604 	addi	fp,sp,24
 80052d8:	e13ffc15 	stw	r4,-16(fp)
 80052dc:	e17ffd15 	stw	r5,-12(fp)
 80052e0:	e1bffe15 	stw	r6,-8(fp)
 80052e4:	e1ffff15 	stw	r7,-4(fp)
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y0, color, backbuffer);
 80052e8:	e0800417 	ldw	r2,16(fp)
 80052ec:	d8800115 	stw	r2,4(sp)
 80052f0:	e0800317 	ldw	r2,12(fp)
 80052f4:	d8800015 	stw	r2,0(sp)
 80052f8:	e1fffe17 	ldw	r7,-8(fp)
 80052fc:	e1bfff17 	ldw	r6,-4(fp)
 8005300:	e17ffd17 	ldw	r5,-12(fp)
 8005304:	e13ffc17 	ldw	r4,-16(fp)
 8005308:	8004e2c0 	call	8004e2c <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y1, color, backbuffer);
 800530c:	e0800417 	ldw	r2,16(fp)
 8005310:	d8800115 	stw	r2,4(sp)
 8005314:	e0800317 	ldw	r2,12(fp)
 8005318:	d8800015 	stw	r2,0(sp)
 800531c:	e1c00217 	ldw	r7,8(fp)
 8005320:	e1bfff17 	ldw	r6,-4(fp)
 8005324:	e17ffd17 	ldw	r5,-12(fp)
 8005328:	e13ffc17 	ldw	r4,-16(fp)
 800532c:	8004e2c0 	call	8004e2c <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x0, y0, y1, color, backbuffer);
 8005330:	e0800417 	ldw	r2,16(fp)
 8005334:	d8800115 	stw	r2,4(sp)
 8005338:	e0800317 	ldw	r2,12(fp)
 800533c:	d8800015 	stw	r2,0(sp)
 8005340:	e1c00217 	ldw	r7,8(fp)
 8005344:	e1bffe17 	ldw	r6,-8(fp)
 8005348:	e17ffd17 	ldw	r5,-12(fp)
 800534c:	e13ffc17 	ldw	r4,-16(fp)
 8005350:	800505c0 	call	800505c <alt_up_pixel_buffer_dma_draw_vline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x1, y0, y1, color, backbuffer);
 8005354:	e0800417 	ldw	r2,16(fp)
 8005358:	d8800115 	stw	r2,4(sp)
 800535c:	e0800317 	ldw	r2,12(fp)
 8005360:	d8800015 	stw	r2,0(sp)
 8005364:	e1c00217 	ldw	r7,8(fp)
 8005368:	e1bffe17 	ldw	r6,-8(fp)
 800536c:	e17fff17 	ldw	r5,-4(fp)
 8005370:	e13ffc17 	ldw	r4,-16(fp)
 8005374:	800505c0 	call	800505c <alt_up_pixel_buffer_dma_draw_vline>
}
 8005378:	0001883a 	nop
 800537c:	e037883a 	mov	sp,fp
 8005380:	dfc00117 	ldw	ra,4(sp)
 8005384:	df000017 	ldw	fp,0(sp)
 8005388:	dec00204 	addi	sp,sp,8
 800538c:	f800283a 	ret

08005390 <helper_plot_pixel>:

void helper_plot_pixel(register unsigned int buffer_start, register int line_size, register int x, register int y, register int color, register int mode)
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
 8005390:	defffb04 	addi	sp,sp,-20
 8005394:	dfc00415 	stw	ra,16(sp)
 8005398:	df000315 	stw	fp,12(sp)
 800539c:	dc800215 	stw	r18,8(sp)
 80053a0:	dc400115 	stw	r17,4(sp)
 80053a4:	dc000015 	stw	r16,0(sp)
 80053a8:	df000304 	addi	fp,sp,12
 80053ac:	2021883a 	mov	r16,r4
 80053b0:	2807883a 	mov	r3,r5
 80053b4:	3023883a 	mov	r17,r6
 80053b8:	3809883a 	mov	r4,r7
 80053bc:	e4800217 	ldw	r18,8(fp)
 80053c0:	e0800317 	ldw	r2,12(fp)
	if (mode == 0)
 80053c4:	1000071e 	bne	r2,zero,80053e4 <helper_plot_pixel+0x54>
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
 80053c8:	200b883a 	mov	r5,r4
 80053cc:	1809883a 	mov	r4,r3
 80053d0:	800306c0 	call	800306c <__mulsi3>
 80053d4:	1445883a 	add	r2,r2,r17
 80053d8:	1405883a 	add	r2,r2,r16
 80053dc:	14800025 	stbio	r18,0(r2)
	else if (mode == 1)
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
}
 80053e0:	00001206 	br	800542c <helper_plot_pixel+0x9c>
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
	if (mode == 0)
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
	else if (mode == 1)
 80053e4:	10800058 	cmpnei	r2,r2,1
 80053e8:	1000081e 	bne	r2,zero,800540c <helper_plot_pixel+0x7c>
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
 80053ec:	200b883a 	mov	r5,r4
 80053f0:	1809883a 	mov	r4,r3
 80053f4:	800306c0 	call	800306c <__mulsi3>
 80053f8:	1445883a 	add	r2,r2,r17
 80053fc:	1085883a 	add	r2,r2,r2
 8005400:	1405883a 	add	r2,r2,r16
 8005404:	1480002d 	sthio	r18,0(r2)
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
}
 8005408:	00000806 	br	800542c <helper_plot_pixel+0x9c>
	if (mode == 0)
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
	else if (mode == 1)
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
 800540c:	200b883a 	mov	r5,r4
 8005410:	1809883a 	mov	r4,r3
 8005414:	800306c0 	call	800306c <__mulsi3>
 8005418:	1445883a 	add	r2,r2,r17
 800541c:	1085883a 	add	r2,r2,r2
 8005420:	1085883a 	add	r2,r2,r2
 8005424:	1405883a 	add	r2,r2,r16
 8005428:	14800035 	stwio	r18,0(r2)
}
 800542c:	0001883a 	nop
 8005430:	e6fffd04 	addi	sp,fp,-12
 8005434:	dfc00417 	ldw	ra,16(sp)
 8005438:	df000317 	ldw	fp,12(sp)
 800543c:	dc800217 	ldw	r18,8(sp)
 8005440:	dc400117 	ldw	r17,4(sp)
 8005444:	dc000017 	ldw	r16,0(sp)
 8005448:	dec00504 	addi	sp,sp,20
 800544c:	f800283a 	ret

08005450 <alt_up_pixel_buffer_dma_draw_line>:

void alt_up_pixel_buffer_dma_draw_line(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a line between points (x0, y0) and (x1, y1). The function does not check if it draws a pixel within screen boundaries.
 * users should ensure that the line is drawn within the screen boundaries. */
{
 8005450:	deffeb04 	addi	sp,sp,-84
 8005454:	dfc01415 	stw	ra,80(sp)
 8005458:	df001315 	stw	fp,76(sp)
 800545c:	ddc01215 	stw	r23,72(sp)
 8005460:	dd801115 	stw	r22,68(sp)
 8005464:	dd401015 	stw	r21,64(sp)
 8005468:	dd000f15 	stw	r20,60(sp)
 800546c:	dcc00e15 	stw	r19,56(sp)
 8005470:	dc800d15 	stw	r18,52(sp)
 8005474:	dc400c15 	stw	r17,48(sp)
 8005478:	dc000b15 	stw	r16,44(sp)
 800547c:	df001304 	addi	fp,sp,76
 8005480:	e13fef15 	stw	r4,-68(fp)
 8005484:	e17ff015 	stw	r5,-64(fp)
 8005488:	e1bff115 	stw	r6,-60(fp)
 800548c:	e1fff215 	stw	r7,-56(fp)
	register int x_0 = x0;
 8005490:	e47ff017 	ldw	r17,-64(fp)
	register int y_0 = y0;
 8005494:	e4fff117 	ldw	r19,-60(fp)
	register int x_1 = x1;
 8005498:	e4bff217 	ldw	r18,-56(fp)
	register int y_1 = y1;
 800549c:	e5000217 	ldw	r20,8(fp)
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
 80054a0:	a4c5c83a 	sub	r2,r20,r19
 80054a4:	1000010e 	bge	r2,zero,80054ac <alt_up_pixel_buffer_dma_draw_line+0x5c>
 80054a8:	0085c83a 	sub	r2,zero,r2
 80054ac:	1007883a 	mov	r3,r2
 80054b0:	9445c83a 	sub	r2,r18,r17
 80054b4:	1000010e 	bge	r2,zero,80054bc <alt_up_pixel_buffer_dma_draw_line+0x6c>
 80054b8:	0085c83a 	sub	r2,zero,r2
 80054bc:	10c4803a 	cmplt	r2,r2,r3
 80054c0:	e0bff305 	stb	r2,-52(fp)
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
 80054c4:	e0bfef17 	ldw	r2,-68(fp)
 80054c8:	10800e17 	ldw	r2,56(r2)
 80054cc:	10800060 	cmpeqi	r2,r2,1
 80054d0:	1000081e 	bne	r2,zero,80054f4 <alt_up_pixel_buffer_dma_draw_line+0xa4>
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
 80054d4:	e0bfef17 	ldw	r2,-68(fp)
 80054d8:	10800e17 	ldw	r2,56(r2)
 80054dc:	10800098 	cmpnei	r2,r2,2
 80054e0:	1000021e 	bne	r2,zero,80054ec <alt_up_pixel_buffer_dma_draw_line+0x9c>
 80054e4:	00800044 	movi	r2,1
 80054e8:	00000306 	br	80054f8 <alt_up_pixel_buffer_dma_draw_line+0xa8>
 80054ec:	00800084 	movi	r2,2
 80054f0:	00000106 	br	80054f8 <alt_up_pixel_buffer_dma_draw_line+0xa8>
	register int y_0 = y0;
	register int x_1 = x1;
	register int y_1 = y1;
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
 80054f4:	0005883a 	mov	r2,zero
 80054f8:	e0bff415 	stw	r2,-48(fp)
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
	register int line_color = color;
 80054fc:	e0800317 	ldw	r2,12(fp)
 8005500:	e0bff515 	stw	r2,-44(fp)
	register unsigned int buffer_start;
	register int line_size = (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) ? (1 << (pixel_buffer->y_coord_offset-color_mode)) : pixel_buffer->x_resolution;
 8005504:	e0bfef17 	ldw	r2,-68(fp)
 8005508:	10800d17 	ldw	r2,52(r2)
 800550c:	1000071e 	bne	r2,zero,800552c <alt_up_pixel_buffer_dma_draw_line+0xdc>
 8005510:	e0bfef17 	ldw	r2,-68(fp)
 8005514:	10801317 	ldw	r2,76(r2)
 8005518:	e0fff417 	ldw	r3,-48(fp)
 800551c:	10c5c83a 	sub	r2,r2,r3
 8005520:	00c00044 	movi	r3,1
 8005524:	1884983a 	sll	r2,r3,r2
 8005528:	00000206 	br	8005534 <alt_up_pixel_buffer_dma_draw_line+0xe4>
 800552c:	e0bfef17 	ldw	r2,-68(fp)
 8005530:	10800f17 	ldw	r2,60(r2)
 8005534:	e0bff615 	stw	r2,-40(fp)

	if (backbuffer == 1)
 8005538:	e0800417 	ldw	r2,16(fp)
 800553c:	10800058 	cmpnei	r2,r2,1
 8005540:	1000031e 	bne	r2,zero,8005550 <alt_up_pixel_buffer_dma_draw_line+0x100>
		buffer_start = pixel_buffer->back_buffer_start_address;
 8005544:	e0bfef17 	ldw	r2,-68(fp)
 8005548:	15c00c17 	ldw	r23,48(r2)
 800554c:	00000206 	br	8005558 <alt_up_pixel_buffer_dma_draw_line+0x108>
	else
		buffer_start = pixel_buffer->buffer_start_address;
 8005550:	e0bfef17 	ldw	r2,-68(fp)
 8005554:	15c00b17 	ldw	r23,44(r2)

	/* Preprocessing inputs */
	if (steep > 0) {
 8005558:	e0bff307 	ldb	r2,-52(fp)
 800555c:	0080060e 	bge	zero,r2,8005578 <alt_up_pixel_buffer_dma_draw_line+0x128>
		// Swap x_0 and y_0
		error = x_0;
 8005560:	8821883a 	mov	r16,r17
		x_0 = y_0;
 8005564:	9823883a 	mov	r17,r19
		y_0 = error;
 8005568:	8027883a 	mov	r19,r16
		// Swap x_1 and y_1
		error = x_1;
 800556c:	9021883a 	mov	r16,r18
		x_1 = y_1;
 8005570:	a025883a 	mov	r18,r20
		y_1 = error;
 8005574:	8029883a 	mov	r20,r16
	}
	if (x_0 > x_1) {
 8005578:	9440060e 	bge	r18,r17,8005594 <alt_up_pixel_buffer_dma_draw_line+0x144>
		// Swap x_0 and x_1
		error = x_0;
 800557c:	8821883a 	mov	r16,r17
		x_0 = x_1;
 8005580:	9023883a 	mov	r17,r18
		x_1 = error;
 8005584:	8025883a 	mov	r18,r16
		// Swap y_0 and y_1
		error = y_0;
 8005588:	9821883a 	mov	r16,r19
		y_0 = y_1;
 800558c:	a027883a 	mov	r19,r20
		y_1 = error;
 8005590:	8029883a 	mov	r20,r16
	}

	/* Setup local variables */
	deltax = x_1 - x_0;
 8005594:	946bc83a 	sub	r21,r18,r17
	deltay = ABS(y_1 - y_0);
 8005598:	a4c5c83a 	sub	r2,r20,r19
 800559c:	1000010e 	bge	r2,zero,80055a4 <alt_up_pixel_buffer_dma_draw_line+0x154>
 80055a0:	0085c83a 	sub	r2,zero,r2
 80055a4:	e0bff715 	stw	r2,-36(fp)
	error = -(deltax / 2); 
 80055a8:	a804d7fa 	srli	r2,r21,31
 80055ac:	1545883a 	add	r2,r2,r21
 80055b0:	1005d07a 	srai	r2,r2,1
 80055b4:	00a1c83a 	sub	r16,zero,r2
	y = y_0;
 80055b8:	982d883a 	mov	r22,r19
	if (y_0 < y_1)
 80055bc:	9d00020e 	bge	r19,r20,80055c8 <alt_up_pixel_buffer_dma_draw_line+0x178>
		ystep = 1;
 80055c0:	04c00044 	movi	r19,1
 80055c4:	00000106 	br	80055cc <alt_up_pixel_buffer_dma_draw_line+0x17c>
	else
		ystep = -1;
 80055c8:	04ffffc4 	movi	r19,-1

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
 80055cc:	e0bff307 	ldb	r2,-52(fp)
 80055d0:	10800058 	cmpnei	r2,r2,1
 80055d4:	1000211e 	bne	r2,zero,800565c <alt_up_pixel_buffer_dma_draw_line+0x20c>
	{
		for (x=x_0; x <= x_1; x++) {
 80055d8:	00000f06 	br	8005618 <alt_up_pixel_buffer_dma_draw_line+0x1c8>
			helper_plot_pixel(buffer_start, line_size, y, x, line_color, color_mode);
 80055dc:	e0bff417 	ldw	r2,-48(fp)
 80055e0:	d8800115 	stw	r2,4(sp)
 80055e4:	e0bff517 	ldw	r2,-44(fp)
 80055e8:	d8800015 	stw	r2,0(sp)
 80055ec:	880f883a 	mov	r7,r17
 80055f0:	b00d883a 	mov	r6,r22
 80055f4:	e17ff617 	ldw	r5,-40(fp)
 80055f8:	b809883a 	mov	r4,r23
 80055fc:	80053900 	call	8005390 <helper_plot_pixel>
			error = error + deltay;
 8005600:	e0bff717 	ldw	r2,-36(fp)
 8005604:	80a1883a 	add	r16,r16,r2
			if (error > 0) {
 8005608:	0400020e 	bge	zero,r16,8005614 <alt_up_pixel_buffer_dma_draw_line+0x1c4>
				y = y + ystep;
 800560c:	b4ed883a 	add	r22,r22,r19
				error = error - deltax;
 8005610:	8561c83a 	sub	r16,r16,r21

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
 8005614:	8c400044 	addi	r17,r17,1
 8005618:	947ff00e 	bge	r18,r17,80055dc <alt_up_pixel_buffer_dma_draw_line+0x18c>
				y = y + ystep;
				error = error - deltax;
			}
		}
	}
}
 800561c:	00001006 	br	8005660 <alt_up_pixel_buffer_dma_draw_line+0x210>
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
			helper_plot_pixel(buffer_start, line_size, x, y, line_color, color_mode);
 8005620:	e0bff417 	ldw	r2,-48(fp)
 8005624:	d8800115 	stw	r2,4(sp)
 8005628:	e0bff517 	ldw	r2,-44(fp)
 800562c:	d8800015 	stw	r2,0(sp)
 8005630:	b00f883a 	mov	r7,r22
 8005634:	880d883a 	mov	r6,r17
 8005638:	e17ff617 	ldw	r5,-40(fp)
 800563c:	b809883a 	mov	r4,r23
 8005640:	80053900 	call	8005390 <helper_plot_pixel>
			error = error + deltay;
 8005644:	e0bff717 	ldw	r2,-36(fp)
 8005648:	80a1883a 	add	r16,r16,r2
			if (error > 0) {
 800564c:	0400020e 	bge	zero,r16,8005658 <alt_up_pixel_buffer_dma_draw_line+0x208>
				y = y + ystep;
 8005650:	b4ed883a 	add	r22,r22,r19
				error = error - deltax;
 8005654:	8561c83a 	sub	r16,r16,r21
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
 8005658:	8c400044 	addi	r17,r17,1
 800565c:	947ff00e 	bge	r18,r17,8005620 <alt_up_pixel_buffer_dma_draw_line+0x1d0>
				y = y + ystep;
				error = error - deltax;
			}
		}
	}
}
 8005660:	0001883a 	nop
 8005664:	e6fff804 	addi	sp,fp,-32
 8005668:	dfc00917 	ldw	ra,36(sp)
 800566c:	df000817 	ldw	fp,32(sp)
 8005670:	ddc00717 	ldw	r23,28(sp)
 8005674:	dd800617 	ldw	r22,24(sp)
 8005678:	dd400517 	ldw	r21,20(sp)
 800567c:	dd000417 	ldw	r20,16(sp)
 8005680:	dcc00317 	ldw	r19,12(sp)
 8005684:	dc800217 	ldw	r18,8(sp)
 8005688:	dc400117 	ldw	r17,4(sp)
 800568c:	dc000017 	ldw	r16,0(sp)
 8005690:	dec00a04 	addi	sp,sp,40
 8005694:	f800283a 	ret

08005698 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 8005698:	defff504 	addi	sp,sp,-44
 800569c:	df000a15 	stw	fp,40(sp)
 80056a0:	df000a04 	addi	fp,sp,40
 80056a4:	e13ffc15 	stw	r4,-16(fp)
 80056a8:	e17ffd15 	stw	r5,-12(fp)
 80056ac:	e1bffe15 	stw	r6,-8(fp)
 80056b0:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 80056b4:	e03ff615 	stw	zero,-40(fp)
 80056b8:	d0a6c617 	ldw	r2,-25832(gp)
  
  if (alt_ticks_per_second ())
 80056bc:	10003c26 	beq	r2,zero,80057b0 <alt_alarm_start+0x118>
  {
    if (alarm)
 80056c0:	e0bffc17 	ldw	r2,-16(fp)
 80056c4:	10003826 	beq	r2,zero,80057a8 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 80056c8:	e0bffc17 	ldw	r2,-16(fp)
 80056cc:	e0fffe17 	ldw	r3,-8(fp)
 80056d0:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 80056d4:	e0bffc17 	ldw	r2,-16(fp)
 80056d8:	e0ffff17 	ldw	r3,-4(fp)
 80056dc:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80056e0:	0005303a 	rdctl	r2,status
 80056e4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80056e8:	e0fff917 	ldw	r3,-28(fp)
 80056ec:	00bfff84 	movi	r2,-2
 80056f0:	1884703a 	and	r2,r3,r2
 80056f4:	1001703a 	wrctl	status,r2
  
  return context;
 80056f8:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 80056fc:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 8005700:	d0a6c717 	ldw	r2,-25828(gp)
      
      current_nticks = alt_nticks();
 8005704:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 8005708:	e0fffd17 	ldw	r3,-12(fp)
 800570c:	e0bff617 	ldw	r2,-40(fp)
 8005710:	1885883a 	add	r2,r3,r2
 8005714:	10c00044 	addi	r3,r2,1
 8005718:	e0bffc17 	ldw	r2,-16(fp)
 800571c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 8005720:	e0bffc17 	ldw	r2,-16(fp)
 8005724:	10c00217 	ldw	r3,8(r2)
 8005728:	e0bff617 	ldw	r2,-40(fp)
 800572c:	1880042e 	bgeu	r3,r2,8005740 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 8005730:	e0bffc17 	ldw	r2,-16(fp)
 8005734:	00c00044 	movi	r3,1
 8005738:	10c00405 	stb	r3,16(r2)
 800573c:	00000206 	br	8005748 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 8005740:	e0bffc17 	ldw	r2,-16(fp)
 8005744:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 8005748:	e0bffc17 	ldw	r2,-16(fp)
 800574c:	d0e00c04 	addi	r3,gp,-32720
 8005750:	e0fffa15 	stw	r3,-24(fp)
 8005754:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 8005758:	e0bffb17 	ldw	r2,-20(fp)
 800575c:	e0fffa17 	ldw	r3,-24(fp)
 8005760:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 8005764:	e0bffa17 	ldw	r2,-24(fp)
 8005768:	10c00017 	ldw	r3,0(r2)
 800576c:	e0bffb17 	ldw	r2,-20(fp)
 8005770:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 8005774:	e0bffa17 	ldw	r2,-24(fp)
 8005778:	10800017 	ldw	r2,0(r2)
 800577c:	e0fffb17 	ldw	r3,-20(fp)
 8005780:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 8005784:	e0bffa17 	ldw	r2,-24(fp)
 8005788:	e0fffb17 	ldw	r3,-20(fp)
 800578c:	10c00015 	stw	r3,0(r2)
 8005790:	e0bff817 	ldw	r2,-32(fp)
 8005794:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8005798:	e0bff717 	ldw	r2,-36(fp)
 800579c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 80057a0:	0005883a 	mov	r2,zero
 80057a4:	00000306 	br	80057b4 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 80057a8:	00bffa84 	movi	r2,-22
 80057ac:	00000106 	br	80057b4 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 80057b0:	00bfde84 	movi	r2,-134
  }
}
 80057b4:	e037883a 	mov	sp,fp
 80057b8:	df000017 	ldw	fp,0(sp)
 80057bc:	dec00104 	addi	sp,sp,4
 80057c0:	f800283a 	ret

080057c4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 80057c4:	deffff04 	addi	sp,sp,-4
 80057c8:	df000015 	stw	fp,0(sp)
 80057cc:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 80057d0:	0001883a 	nop
 80057d4:	e037883a 	mov	sp,fp
 80057d8:	df000017 	ldw	fp,0(sp)
 80057dc:	dec00104 	addi	sp,sp,4
 80057e0:	f800283a 	ret

080057e4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 80057e4:	defffe04 	addi	sp,sp,-8
 80057e8:	dfc00115 	stw	ra,4(sp)
 80057ec:	df000015 	stw	fp,0(sp)
 80057f0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 80057f4:	d0a00917 	ldw	r2,-32732(gp)
 80057f8:	10000326 	beq	r2,zero,8005808 <alt_get_errno+0x24>
 80057fc:	d0a00917 	ldw	r2,-32732(gp)
 8005800:	103ee83a 	callr	r2
 8005804:	00000106 	br	800580c <alt_get_errno+0x28>
 8005808:	d0a6c104 	addi	r2,gp,-25852
}
 800580c:	e037883a 	mov	sp,fp
 8005810:	dfc00117 	ldw	ra,4(sp)
 8005814:	df000017 	ldw	fp,0(sp)
 8005818:	dec00204 	addi	sp,sp,8
 800581c:	f800283a 	ret

08005820 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 8005820:	defffa04 	addi	sp,sp,-24
 8005824:	dfc00515 	stw	ra,20(sp)
 8005828:	df000415 	stw	fp,16(sp)
 800582c:	df000404 	addi	fp,sp,16
 8005830:	e13ffe15 	stw	r4,-8(fp)
 8005834:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 8005838:	e0bffe17 	ldw	r2,-8(fp)
 800583c:	10000326 	beq	r2,zero,800584c <alt_dev_llist_insert+0x2c>
 8005840:	e0bffe17 	ldw	r2,-8(fp)
 8005844:	10800217 	ldw	r2,8(r2)
 8005848:	1000061e 	bne	r2,zero,8005864 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 800584c:	80057e40 	call	80057e4 <alt_get_errno>
 8005850:	1007883a 	mov	r3,r2
 8005854:	00800584 	movi	r2,22
 8005858:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 800585c:	00bffa84 	movi	r2,-22
 8005860:	00001306 	br	80058b0 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 8005864:	e0bffe17 	ldw	r2,-8(fp)
 8005868:	e0ffff17 	ldw	r3,-4(fp)
 800586c:	e0fffc15 	stw	r3,-16(fp)
 8005870:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 8005874:	e0bffd17 	ldw	r2,-12(fp)
 8005878:	e0fffc17 	ldw	r3,-16(fp)
 800587c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 8005880:	e0bffc17 	ldw	r2,-16(fp)
 8005884:	10c00017 	ldw	r3,0(r2)
 8005888:	e0bffd17 	ldw	r2,-12(fp)
 800588c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 8005890:	e0bffc17 	ldw	r2,-16(fp)
 8005894:	10800017 	ldw	r2,0(r2)
 8005898:	e0fffd17 	ldw	r3,-12(fp)
 800589c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 80058a0:	e0bffc17 	ldw	r2,-16(fp)
 80058a4:	e0fffd17 	ldw	r3,-12(fp)
 80058a8:	10c00015 	stw	r3,0(r2)

  return 0;  
 80058ac:	0005883a 	mov	r2,zero
}
 80058b0:	e037883a 	mov	sp,fp
 80058b4:	dfc00117 	ldw	ra,4(sp)
 80058b8:	df000017 	ldw	fp,0(sp)
 80058bc:	dec00204 	addi	sp,sp,8
 80058c0:	f800283a 	ret

080058c4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 80058c4:	defffd04 	addi	sp,sp,-12
 80058c8:	dfc00215 	stw	ra,8(sp)
 80058cc:	df000115 	stw	fp,4(sp)
 80058d0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 80058d4:	00820034 	movhi	r2,2048
 80058d8:	1099f704 	addi	r2,r2,26588
 80058dc:	e0bfff15 	stw	r2,-4(fp)
 80058e0:	00000606 	br	80058fc <_do_ctors+0x38>
        (*ctor) (); 
 80058e4:	e0bfff17 	ldw	r2,-4(fp)
 80058e8:	10800017 	ldw	r2,0(r2)
 80058ec:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 80058f0:	e0bfff17 	ldw	r2,-4(fp)
 80058f4:	10bfff04 	addi	r2,r2,-4
 80058f8:	e0bfff15 	stw	r2,-4(fp)
 80058fc:	e0ffff17 	ldw	r3,-4(fp)
 8005900:	00820034 	movhi	r2,2048
 8005904:	1099f804 	addi	r2,r2,26592
 8005908:	18bff62e 	bgeu	r3,r2,80058e4 <_do_ctors+0x20>
        (*ctor) (); 
}
 800590c:	0001883a 	nop
 8005910:	e037883a 	mov	sp,fp
 8005914:	dfc00117 	ldw	ra,4(sp)
 8005918:	df000017 	ldw	fp,0(sp)
 800591c:	dec00204 	addi	sp,sp,8
 8005920:	f800283a 	ret

08005924 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 8005924:	defffd04 	addi	sp,sp,-12
 8005928:	dfc00215 	stw	ra,8(sp)
 800592c:	df000115 	stw	fp,4(sp)
 8005930:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 8005934:	00820034 	movhi	r2,2048
 8005938:	1099f704 	addi	r2,r2,26588
 800593c:	e0bfff15 	stw	r2,-4(fp)
 8005940:	00000606 	br	800595c <_do_dtors+0x38>
        (*dtor) (); 
 8005944:	e0bfff17 	ldw	r2,-4(fp)
 8005948:	10800017 	ldw	r2,0(r2)
 800594c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 8005950:	e0bfff17 	ldw	r2,-4(fp)
 8005954:	10bfff04 	addi	r2,r2,-4
 8005958:	e0bfff15 	stw	r2,-4(fp)
 800595c:	e0ffff17 	ldw	r3,-4(fp)
 8005960:	00820034 	movhi	r2,2048
 8005964:	1099f804 	addi	r2,r2,26592
 8005968:	18bff62e 	bgeu	r3,r2,8005944 <_do_dtors+0x20>
        (*dtor) (); 
}
 800596c:	0001883a 	nop
 8005970:	e037883a 	mov	sp,fp
 8005974:	dfc00117 	ldw	ra,4(sp)
 8005978:	df000017 	ldw	fp,0(sp)
 800597c:	dec00204 	addi	sp,sp,8
 8005980:	f800283a 	ret

08005984 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 8005984:	defffa04 	addi	sp,sp,-24
 8005988:	dfc00515 	stw	ra,20(sp)
 800598c:	df000415 	stw	fp,16(sp)
 8005990:	df000404 	addi	fp,sp,16
 8005994:	e13ffe15 	stw	r4,-8(fp)
 8005998:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 800599c:	e0bfff17 	ldw	r2,-4(fp)
 80059a0:	10800017 	ldw	r2,0(r2)
 80059a4:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 80059a8:	e13ffe17 	ldw	r4,-8(fp)
 80059ac:	800035c0 	call	800035c <strlen>
 80059b0:	10800044 	addi	r2,r2,1
 80059b4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 80059b8:	00000d06 	br	80059f0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 80059bc:	e0bffc17 	ldw	r2,-16(fp)
 80059c0:	10800217 	ldw	r2,8(r2)
 80059c4:	e0fffd17 	ldw	r3,-12(fp)
 80059c8:	180d883a 	mov	r6,r3
 80059cc:	e17ffe17 	ldw	r5,-8(fp)
 80059d0:	1009883a 	mov	r4,r2
 80059d4:	80064980 	call	8006498 <memcmp>
 80059d8:	1000021e 	bne	r2,zero,80059e4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 80059dc:	e0bffc17 	ldw	r2,-16(fp)
 80059e0:	00000706 	br	8005a00 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 80059e4:	e0bffc17 	ldw	r2,-16(fp)
 80059e8:	10800017 	ldw	r2,0(r2)
 80059ec:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 80059f0:	e0fffc17 	ldw	r3,-16(fp)
 80059f4:	e0bfff17 	ldw	r2,-4(fp)
 80059f8:	18bff01e 	bne	r3,r2,80059bc <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 80059fc:	0005883a 	mov	r2,zero
}
 8005a00:	e037883a 	mov	sp,fp
 8005a04:	dfc00117 	ldw	ra,4(sp)
 8005a08:	df000017 	ldw	fp,0(sp)
 8005a0c:	dec00204 	addi	sp,sp,8
 8005a10:	f800283a 	ret

08005a14 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 8005a14:	deffff04 	addi	sp,sp,-4
 8005a18:	df000015 	stw	fp,0(sp)
 8005a1c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 8005a20:	0001883a 	nop
 8005a24:	e037883a 	mov	sp,fp
 8005a28:	df000017 	ldw	fp,0(sp)
 8005a2c:	dec00104 	addi	sp,sp,4
 8005a30:	f800283a 	ret

08005a34 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 8005a34:	defff904 	addi	sp,sp,-28
 8005a38:	dfc00615 	stw	ra,24(sp)
 8005a3c:	df000515 	stw	fp,20(sp)
 8005a40:	df000504 	addi	fp,sp,20
 8005a44:	e13ffc15 	stw	r4,-16(fp)
 8005a48:	e17ffd15 	stw	r5,-12(fp)
 8005a4c:	e1bffe15 	stw	r6,-8(fp)
 8005a50:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 8005a54:	e0800217 	ldw	r2,8(fp)
 8005a58:	d8800015 	stw	r2,0(sp)
 8005a5c:	e1ffff17 	ldw	r7,-4(fp)
 8005a60:	e1bffe17 	ldw	r6,-8(fp)
 8005a64:	e17ffd17 	ldw	r5,-12(fp)
 8005a68:	e13ffc17 	ldw	r4,-16(fp)
 8005a6c:	8005be40 	call	8005be4 <alt_iic_isr_register>
}  
 8005a70:	e037883a 	mov	sp,fp
 8005a74:	dfc00117 	ldw	ra,4(sp)
 8005a78:	df000017 	ldw	fp,0(sp)
 8005a7c:	dec00204 	addi	sp,sp,8
 8005a80:	f800283a 	ret

08005a84 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 8005a84:	defff904 	addi	sp,sp,-28
 8005a88:	df000615 	stw	fp,24(sp)
 8005a8c:	df000604 	addi	fp,sp,24
 8005a90:	e13ffe15 	stw	r4,-8(fp)
 8005a94:	e17fff15 	stw	r5,-4(fp)
 8005a98:	e0bfff17 	ldw	r2,-4(fp)
 8005a9c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8005aa0:	0005303a 	rdctl	r2,status
 8005aa4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8005aa8:	e0fffb17 	ldw	r3,-20(fp)
 8005aac:	00bfff84 	movi	r2,-2
 8005ab0:	1884703a 	and	r2,r3,r2
 8005ab4:	1001703a 	wrctl	status,r2
  
  return context;
 8005ab8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 8005abc:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 8005ac0:	00c00044 	movi	r3,1
 8005ac4:	e0bffa17 	ldw	r2,-24(fp)
 8005ac8:	1884983a 	sll	r2,r3,r2
 8005acc:	1007883a 	mov	r3,r2
 8005ad0:	d0a6c517 	ldw	r2,-25836(gp)
 8005ad4:	1884b03a 	or	r2,r3,r2
 8005ad8:	d0a6c515 	stw	r2,-25836(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 8005adc:	d0a6c517 	ldw	r2,-25836(gp)
 8005ae0:	100170fa 	wrctl	ienable,r2
 8005ae4:	e0bffc17 	ldw	r2,-16(fp)
 8005ae8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8005aec:	e0bffd17 	ldw	r2,-12(fp)
 8005af0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 8005af4:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 8005af8:	0001883a 	nop
}
 8005afc:	e037883a 	mov	sp,fp
 8005b00:	df000017 	ldw	fp,0(sp)
 8005b04:	dec00104 	addi	sp,sp,4
 8005b08:	f800283a 	ret

08005b0c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 8005b0c:	defff904 	addi	sp,sp,-28
 8005b10:	df000615 	stw	fp,24(sp)
 8005b14:	df000604 	addi	fp,sp,24
 8005b18:	e13ffe15 	stw	r4,-8(fp)
 8005b1c:	e17fff15 	stw	r5,-4(fp)
 8005b20:	e0bfff17 	ldw	r2,-4(fp)
 8005b24:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8005b28:	0005303a 	rdctl	r2,status
 8005b2c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8005b30:	e0fffb17 	ldw	r3,-20(fp)
 8005b34:	00bfff84 	movi	r2,-2
 8005b38:	1884703a 	and	r2,r3,r2
 8005b3c:	1001703a 	wrctl	status,r2
  
  return context;
 8005b40:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 8005b44:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 8005b48:	00c00044 	movi	r3,1
 8005b4c:	e0bffa17 	ldw	r2,-24(fp)
 8005b50:	1884983a 	sll	r2,r3,r2
 8005b54:	0084303a 	nor	r2,zero,r2
 8005b58:	1007883a 	mov	r3,r2
 8005b5c:	d0a6c517 	ldw	r2,-25836(gp)
 8005b60:	1884703a 	and	r2,r3,r2
 8005b64:	d0a6c515 	stw	r2,-25836(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 8005b68:	d0a6c517 	ldw	r2,-25836(gp)
 8005b6c:	100170fa 	wrctl	ienable,r2
 8005b70:	e0bffc17 	ldw	r2,-16(fp)
 8005b74:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8005b78:	e0bffd17 	ldw	r2,-12(fp)
 8005b7c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 8005b80:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 8005b84:	0001883a 	nop
}
 8005b88:	e037883a 	mov	sp,fp
 8005b8c:	df000017 	ldw	fp,0(sp)
 8005b90:	dec00104 	addi	sp,sp,4
 8005b94:	f800283a 	ret

08005b98 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 8005b98:	defffc04 	addi	sp,sp,-16
 8005b9c:	df000315 	stw	fp,12(sp)
 8005ba0:	df000304 	addi	fp,sp,12
 8005ba4:	e13ffe15 	stw	r4,-8(fp)
 8005ba8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 8005bac:	000530fa 	rdctl	r2,ienable
 8005bb0:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 8005bb4:	00c00044 	movi	r3,1
 8005bb8:	e0bfff17 	ldw	r2,-4(fp)
 8005bbc:	1884983a 	sll	r2,r3,r2
 8005bc0:	1007883a 	mov	r3,r2
 8005bc4:	e0bffd17 	ldw	r2,-12(fp)
 8005bc8:	1884703a 	and	r2,r3,r2
 8005bcc:	1004c03a 	cmpne	r2,r2,zero
 8005bd0:	10803fcc 	andi	r2,r2,255
}
 8005bd4:	e037883a 	mov	sp,fp
 8005bd8:	df000017 	ldw	fp,0(sp)
 8005bdc:	dec00104 	addi	sp,sp,4
 8005be0:	f800283a 	ret

08005be4 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 8005be4:	defff504 	addi	sp,sp,-44
 8005be8:	dfc00a15 	stw	ra,40(sp)
 8005bec:	df000915 	stw	fp,36(sp)
 8005bf0:	df000904 	addi	fp,sp,36
 8005bf4:	e13ffc15 	stw	r4,-16(fp)
 8005bf8:	e17ffd15 	stw	r5,-12(fp)
 8005bfc:	e1bffe15 	stw	r6,-8(fp)
 8005c00:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 8005c04:	00bffa84 	movi	r2,-22
 8005c08:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 8005c0c:	e0bffd17 	ldw	r2,-12(fp)
 8005c10:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 8005c14:	e0bff817 	ldw	r2,-32(fp)
 8005c18:	10800808 	cmpgei	r2,r2,32
 8005c1c:	1000271e 	bne	r2,zero,8005cbc <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8005c20:	0005303a 	rdctl	r2,status
 8005c24:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8005c28:	e0fffb17 	ldw	r3,-20(fp)
 8005c2c:	00bfff84 	movi	r2,-2
 8005c30:	1884703a 	and	r2,r3,r2
 8005c34:	1001703a 	wrctl	status,r2
  
  return context;
 8005c38:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 8005c3c:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 8005c40:	00820074 	movhi	r2,2049
 8005c44:	10a79004 	addi	r2,r2,-25024
 8005c48:	e0fff817 	ldw	r3,-32(fp)
 8005c4c:	180690fa 	slli	r3,r3,3
 8005c50:	10c5883a 	add	r2,r2,r3
 8005c54:	e0fffe17 	ldw	r3,-8(fp)
 8005c58:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 8005c5c:	00820074 	movhi	r2,2049
 8005c60:	10a79004 	addi	r2,r2,-25024
 8005c64:	e0fff817 	ldw	r3,-32(fp)
 8005c68:	180690fa 	slli	r3,r3,3
 8005c6c:	10c5883a 	add	r2,r2,r3
 8005c70:	10800104 	addi	r2,r2,4
 8005c74:	e0ffff17 	ldw	r3,-4(fp)
 8005c78:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 8005c7c:	e0bffe17 	ldw	r2,-8(fp)
 8005c80:	10000526 	beq	r2,zero,8005c98 <alt_iic_isr_register+0xb4>
 8005c84:	e0bff817 	ldw	r2,-32(fp)
 8005c88:	100b883a 	mov	r5,r2
 8005c8c:	e13ffc17 	ldw	r4,-16(fp)
 8005c90:	8005a840 	call	8005a84 <alt_ic_irq_enable>
 8005c94:	00000406 	br	8005ca8 <alt_iic_isr_register+0xc4>
 8005c98:	e0bff817 	ldw	r2,-32(fp)
 8005c9c:	100b883a 	mov	r5,r2
 8005ca0:	e13ffc17 	ldw	r4,-16(fp)
 8005ca4:	8005b0c0 	call	8005b0c <alt_ic_irq_disable>
 8005ca8:	e0bff715 	stw	r2,-36(fp)
 8005cac:	e0bffa17 	ldw	r2,-24(fp)
 8005cb0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8005cb4:	e0bff917 	ldw	r2,-28(fp)
 8005cb8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 8005cbc:	e0bff717 	ldw	r2,-36(fp)
}
 8005cc0:	e037883a 	mov	sp,fp
 8005cc4:	dfc00117 	ldw	ra,4(sp)
 8005cc8:	df000017 	ldw	fp,0(sp)
 8005ccc:	dec00204 	addi	sp,sp,8
 8005cd0:	f800283a 	ret

08005cd4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 8005cd4:	defff804 	addi	sp,sp,-32
 8005cd8:	dfc00715 	stw	ra,28(sp)
 8005cdc:	df000615 	stw	fp,24(sp)
 8005ce0:	dc000515 	stw	r16,20(sp)
 8005ce4:	df000604 	addi	fp,sp,24
 8005ce8:	e13ffb15 	stw	r4,-20(fp)
 8005cec:	e17ffc15 	stw	r5,-16(fp)
 8005cf0:	e1bffd15 	stw	r6,-12(fp)
 8005cf4:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
 8005cf8:	e1bffe17 	ldw	r6,-8(fp)
 8005cfc:	e17ffd17 	ldw	r5,-12(fp)
 8005d00:	e13ffc17 	ldw	r4,-16(fp)
 8005d04:	8005f5c0 	call	8005f5c <open>
 8005d08:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
 8005d0c:	e0bffa17 	ldw	r2,-24(fp)
 8005d10:	10002216 	blt	r2,zero,8005d9c <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
 8005d14:	04020034 	movhi	r16,2048
 8005d18:	841c3104 	addi	r16,r16,28868
 8005d1c:	e0bffa17 	ldw	r2,-24(fp)
 8005d20:	01400304 	movi	r5,12
 8005d24:	1009883a 	mov	r4,r2
 8005d28:	800306c0 	call	800306c <__mulsi3>
 8005d2c:	8085883a 	add	r2,r16,r2
 8005d30:	10c00017 	ldw	r3,0(r2)
 8005d34:	e0bffb17 	ldw	r2,-20(fp)
 8005d38:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 8005d3c:	04020034 	movhi	r16,2048
 8005d40:	841c3104 	addi	r16,r16,28868
 8005d44:	e0bffa17 	ldw	r2,-24(fp)
 8005d48:	01400304 	movi	r5,12
 8005d4c:	1009883a 	mov	r4,r2
 8005d50:	800306c0 	call	800306c <__mulsi3>
 8005d54:	8085883a 	add	r2,r16,r2
 8005d58:	10800104 	addi	r2,r2,4
 8005d5c:	10c00017 	ldw	r3,0(r2)
 8005d60:	e0bffb17 	ldw	r2,-20(fp)
 8005d64:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 8005d68:	04020034 	movhi	r16,2048
 8005d6c:	841c3104 	addi	r16,r16,28868
 8005d70:	e0bffa17 	ldw	r2,-24(fp)
 8005d74:	01400304 	movi	r5,12
 8005d78:	1009883a 	mov	r4,r2
 8005d7c:	800306c0 	call	800306c <__mulsi3>
 8005d80:	8085883a 	add	r2,r16,r2
 8005d84:	10800204 	addi	r2,r2,8
 8005d88:	10c00017 	ldw	r3,0(r2)
 8005d8c:	e0bffb17 	ldw	r2,-20(fp)
 8005d90:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 8005d94:	e13ffa17 	ldw	r4,-24(fp)
 8005d98:	80037b80 	call	80037b8 <alt_release_fd>
  }
} 
 8005d9c:	0001883a 	nop
 8005da0:	e6ffff04 	addi	sp,fp,-4
 8005da4:	dfc00217 	ldw	ra,8(sp)
 8005da8:	df000117 	ldw	fp,4(sp)
 8005dac:	dc000017 	ldw	r16,0(sp)
 8005db0:	dec00304 	addi	sp,sp,12
 8005db4:	f800283a 	ret

08005db8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 8005db8:	defffb04 	addi	sp,sp,-20
 8005dbc:	dfc00415 	stw	ra,16(sp)
 8005dc0:	df000315 	stw	fp,12(sp)
 8005dc4:	df000304 	addi	fp,sp,12
 8005dc8:	e13ffd15 	stw	r4,-12(fp)
 8005dcc:	e17ffe15 	stw	r5,-8(fp)
 8005dd0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 8005dd4:	01c07fc4 	movi	r7,511
 8005dd8:	01800044 	movi	r6,1
 8005ddc:	e17ffd17 	ldw	r5,-12(fp)
 8005de0:	01020034 	movhi	r4,2048
 8005de4:	211c3404 	addi	r4,r4,28880
 8005de8:	8005cd40 	call	8005cd4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 8005dec:	01c07fc4 	movi	r7,511
 8005df0:	000d883a 	mov	r6,zero
 8005df4:	e17ffe17 	ldw	r5,-8(fp)
 8005df8:	01020034 	movhi	r4,2048
 8005dfc:	211c3104 	addi	r4,r4,28868
 8005e00:	8005cd40 	call	8005cd4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 8005e04:	01c07fc4 	movi	r7,511
 8005e08:	01800044 	movi	r6,1
 8005e0c:	e17fff17 	ldw	r5,-4(fp)
 8005e10:	01020034 	movhi	r4,2048
 8005e14:	211c3704 	addi	r4,r4,28892
 8005e18:	8005cd40 	call	8005cd4 <alt_open_fd>
}  
 8005e1c:	0001883a 	nop
 8005e20:	e037883a 	mov	sp,fp
 8005e24:	dfc00117 	ldw	ra,4(sp)
 8005e28:	df000017 	ldw	fp,0(sp)
 8005e2c:	dec00204 	addi	sp,sp,8
 8005e30:	f800283a 	ret

08005e34 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8005e34:	defffe04 	addi	sp,sp,-8
 8005e38:	dfc00115 	stw	ra,4(sp)
 8005e3c:	df000015 	stw	fp,0(sp)
 8005e40:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8005e44:	d0a00917 	ldw	r2,-32732(gp)
 8005e48:	10000326 	beq	r2,zero,8005e58 <alt_get_errno+0x24>
 8005e4c:	d0a00917 	ldw	r2,-32732(gp)
 8005e50:	103ee83a 	callr	r2
 8005e54:	00000106 	br	8005e5c <alt_get_errno+0x28>
 8005e58:	d0a6c104 	addi	r2,gp,-25852
}
 8005e5c:	e037883a 	mov	sp,fp
 8005e60:	dfc00117 	ldw	ra,4(sp)
 8005e64:	df000017 	ldw	fp,0(sp)
 8005e68:	dec00204 	addi	sp,sp,8
 8005e6c:	f800283a 	ret

08005e70 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 8005e70:	defffb04 	addi	sp,sp,-20
 8005e74:	dfc00415 	stw	ra,16(sp)
 8005e78:	df000315 	stw	fp,12(sp)
 8005e7c:	dc000215 	stw	r16,8(sp)
 8005e80:	df000304 	addi	fp,sp,12
 8005e84:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 8005e88:	e0bffe17 	ldw	r2,-8(fp)
 8005e8c:	10800217 	ldw	r2,8(r2)
 8005e90:	10d00034 	orhi	r3,r2,16384
 8005e94:	e0bffe17 	ldw	r2,-8(fp)
 8005e98:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 8005e9c:	e03ffd15 	stw	zero,-12(fp)
 8005ea0:	00002306 	br	8005f30 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 8005ea4:	04020034 	movhi	r16,2048
 8005ea8:	841c3104 	addi	r16,r16,28868
 8005eac:	e0bffd17 	ldw	r2,-12(fp)
 8005eb0:	01400304 	movi	r5,12
 8005eb4:	1009883a 	mov	r4,r2
 8005eb8:	800306c0 	call	800306c <__mulsi3>
 8005ebc:	8085883a 	add	r2,r16,r2
 8005ec0:	10c00017 	ldw	r3,0(r2)
 8005ec4:	e0bffe17 	ldw	r2,-8(fp)
 8005ec8:	10800017 	ldw	r2,0(r2)
 8005ecc:	1880151e 	bne	r3,r2,8005f24 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 8005ed0:	04020034 	movhi	r16,2048
 8005ed4:	841c3104 	addi	r16,r16,28868
 8005ed8:	e0bffd17 	ldw	r2,-12(fp)
 8005edc:	01400304 	movi	r5,12
 8005ee0:	1009883a 	mov	r4,r2
 8005ee4:	800306c0 	call	800306c <__mulsi3>
 8005ee8:	8085883a 	add	r2,r16,r2
 8005eec:	10800204 	addi	r2,r2,8
 8005ef0:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 8005ef4:	10000b0e 	bge	r2,zero,8005f24 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 8005ef8:	01400304 	movi	r5,12
 8005efc:	e13ffd17 	ldw	r4,-12(fp)
 8005f00:	800306c0 	call	800306c <__mulsi3>
 8005f04:	1007883a 	mov	r3,r2
 8005f08:	00820034 	movhi	r2,2048
 8005f0c:	109c3104 	addi	r2,r2,28868
 8005f10:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 8005f14:	e0bffe17 	ldw	r2,-8(fp)
 8005f18:	18800226 	beq	r3,r2,8005f24 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 8005f1c:	00bffcc4 	movi	r2,-13
 8005f20:	00000806 	br	8005f44 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 8005f24:	e0bffd17 	ldw	r2,-12(fp)
 8005f28:	10800044 	addi	r2,r2,1
 8005f2c:	e0bffd15 	stw	r2,-12(fp)
 8005f30:	d0a00817 	ldw	r2,-32736(gp)
 8005f34:	1007883a 	mov	r3,r2
 8005f38:	e0bffd17 	ldw	r2,-12(fp)
 8005f3c:	18bfd92e 	bgeu	r3,r2,8005ea4 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 8005f40:	0005883a 	mov	r2,zero
}
 8005f44:	e6ffff04 	addi	sp,fp,-4
 8005f48:	dfc00217 	ldw	ra,8(sp)
 8005f4c:	df000117 	ldw	fp,4(sp)
 8005f50:	dc000017 	ldw	r16,0(sp)
 8005f54:	dec00304 	addi	sp,sp,12
 8005f58:	f800283a 	ret

08005f5c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 8005f5c:	defff604 	addi	sp,sp,-40
 8005f60:	dfc00915 	stw	ra,36(sp)
 8005f64:	df000815 	stw	fp,32(sp)
 8005f68:	df000804 	addi	fp,sp,32
 8005f6c:	e13ffd15 	stw	r4,-12(fp)
 8005f70:	e17ffe15 	stw	r5,-8(fp)
 8005f74:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 8005f78:	00bfffc4 	movi	r2,-1
 8005f7c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 8005f80:	00bffb44 	movi	r2,-19
 8005f84:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 8005f88:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 8005f8c:	d1600604 	addi	r5,gp,-32744
 8005f90:	e13ffd17 	ldw	r4,-12(fp)
 8005f94:	80059840 	call	8005984 <alt_find_dev>
 8005f98:	e0bff815 	stw	r2,-32(fp)
 8005f9c:	e0bff817 	ldw	r2,-32(fp)
 8005fa0:	1000051e 	bne	r2,zero,8005fb8 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 8005fa4:	e13ffd17 	ldw	r4,-12(fp)
 8005fa8:	80062800 	call	8006280 <alt_find_file>
 8005fac:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 8005fb0:	00800044 	movi	r2,1
 8005fb4:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 8005fb8:	e0bff817 	ldw	r2,-32(fp)
 8005fbc:	10002b26 	beq	r2,zero,800606c <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
 8005fc0:	e13ff817 	ldw	r4,-32(fp)
 8005fc4:	80063880 	call	8006388 <alt_get_fd>
 8005fc8:	e0bff915 	stw	r2,-28(fp)
 8005fcc:	e0bff917 	ldw	r2,-28(fp)
 8005fd0:	1000030e 	bge	r2,zero,8005fe0 <open+0x84>
    {
      status = index;
 8005fd4:	e0bff917 	ldw	r2,-28(fp)
 8005fd8:	e0bffa15 	stw	r2,-24(fp)
 8005fdc:	00002506 	br	8006074 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
 8005fe0:	01400304 	movi	r5,12
 8005fe4:	e13ff917 	ldw	r4,-28(fp)
 8005fe8:	800306c0 	call	800306c <__mulsi3>
 8005fec:	1007883a 	mov	r3,r2
 8005ff0:	00820034 	movhi	r2,2048
 8005ff4:	109c3104 	addi	r2,r2,28868
 8005ff8:	1885883a 	add	r2,r3,r2
 8005ffc:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 8006000:	e0fffe17 	ldw	r3,-8(fp)
 8006004:	00900034 	movhi	r2,16384
 8006008:	10bfffc4 	addi	r2,r2,-1
 800600c:	1886703a 	and	r3,r3,r2
 8006010:	e0bffc17 	ldw	r2,-16(fp)
 8006014:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 8006018:	e0bffb17 	ldw	r2,-20(fp)
 800601c:	1000051e 	bne	r2,zero,8006034 <open+0xd8>
 8006020:	e13ffc17 	ldw	r4,-16(fp)
 8006024:	8005e700 	call	8005e70 <alt_file_locked>
 8006028:	e0bffa15 	stw	r2,-24(fp)
 800602c:	e0bffa17 	ldw	r2,-24(fp)
 8006030:	10001016 	blt	r2,zero,8006074 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 8006034:	e0bff817 	ldw	r2,-32(fp)
 8006038:	10800317 	ldw	r2,12(r2)
 800603c:	10000826 	beq	r2,zero,8006060 <open+0x104>
 8006040:	e0bff817 	ldw	r2,-32(fp)
 8006044:	10800317 	ldw	r2,12(r2)
 8006048:	e1ffff17 	ldw	r7,-4(fp)
 800604c:	e1bffe17 	ldw	r6,-8(fp)
 8006050:	e17ffd17 	ldw	r5,-12(fp)
 8006054:	e13ffc17 	ldw	r4,-16(fp)
 8006058:	103ee83a 	callr	r2
 800605c:	00000106 	br	8006064 <open+0x108>
 8006060:	0005883a 	mov	r2,zero
 8006064:	e0bffa15 	stw	r2,-24(fp)
 8006068:	00000206 	br	8006074 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
 800606c:	00bffb44 	movi	r2,-19
 8006070:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 8006074:	e0bffa17 	ldw	r2,-24(fp)
 8006078:	1000090e 	bge	r2,zero,80060a0 <open+0x144>
  {
    alt_release_fd (index);  
 800607c:	e13ff917 	ldw	r4,-28(fp)
 8006080:	80037b80 	call	80037b8 <alt_release_fd>
    ALT_ERRNO = -status;
 8006084:	8005e340 	call	8005e34 <alt_get_errno>
 8006088:	1007883a 	mov	r3,r2
 800608c:	e0bffa17 	ldw	r2,-24(fp)
 8006090:	0085c83a 	sub	r2,zero,r2
 8006094:	18800015 	stw	r2,0(r3)
    return -1;
 8006098:	00bfffc4 	movi	r2,-1
 800609c:	00000106 	br	80060a4 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
 80060a0:	e0bff917 	ldw	r2,-28(fp)
}
 80060a4:	e037883a 	mov	sp,fp
 80060a8:	dfc00117 	ldw	ra,4(sp)
 80060ac:	df000017 	ldw	fp,0(sp)
 80060b0:	dec00204 	addi	sp,sp,8
 80060b4:	f800283a 	ret

080060b8 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 80060b8:	defffa04 	addi	sp,sp,-24
 80060bc:	df000515 	stw	fp,20(sp)
 80060c0:	df000504 	addi	fp,sp,20
 80060c4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80060c8:	0005303a 	rdctl	r2,status
 80060cc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80060d0:	e0fffc17 	ldw	r3,-16(fp)
 80060d4:	00bfff84 	movi	r2,-2
 80060d8:	1884703a 	and	r2,r3,r2
 80060dc:	1001703a 	wrctl	status,r2
  
  return context;
 80060e0:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 80060e4:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 80060e8:	e0bfff17 	ldw	r2,-4(fp)
 80060ec:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 80060f0:	e0bffd17 	ldw	r2,-12(fp)
 80060f4:	10800017 	ldw	r2,0(r2)
 80060f8:	e0fffd17 	ldw	r3,-12(fp)
 80060fc:	18c00117 	ldw	r3,4(r3)
 8006100:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 8006104:	e0bffd17 	ldw	r2,-12(fp)
 8006108:	10800117 	ldw	r2,4(r2)
 800610c:	e0fffd17 	ldw	r3,-12(fp)
 8006110:	18c00017 	ldw	r3,0(r3)
 8006114:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 8006118:	e0bffd17 	ldw	r2,-12(fp)
 800611c:	e0fffd17 	ldw	r3,-12(fp)
 8006120:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 8006124:	e0bffd17 	ldw	r2,-12(fp)
 8006128:	e0fffd17 	ldw	r3,-12(fp)
 800612c:	10c00015 	stw	r3,0(r2)
 8006130:	e0bffb17 	ldw	r2,-20(fp)
 8006134:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8006138:	e0bffe17 	ldw	r2,-8(fp)
 800613c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 8006140:	0001883a 	nop
 8006144:	e037883a 	mov	sp,fp
 8006148:	df000017 	ldw	fp,0(sp)
 800614c:	dec00104 	addi	sp,sp,4
 8006150:	f800283a 	ret

08006154 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 8006154:	defffb04 	addi	sp,sp,-20
 8006158:	dfc00415 	stw	ra,16(sp)
 800615c:	df000315 	stw	fp,12(sp)
 8006160:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 8006164:	d0a00c17 	ldw	r2,-32720(gp)
 8006168:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 800616c:	d0a6c717 	ldw	r2,-25828(gp)
 8006170:	10800044 	addi	r2,r2,1
 8006174:	d0a6c715 	stw	r2,-25828(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 8006178:	00002e06 	br	8006234 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 800617c:	e0bffd17 	ldw	r2,-12(fp)
 8006180:	10800017 	ldw	r2,0(r2)
 8006184:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 8006188:	e0bffd17 	ldw	r2,-12(fp)
 800618c:	10800403 	ldbu	r2,16(r2)
 8006190:	10803fcc 	andi	r2,r2,255
 8006194:	10000426 	beq	r2,zero,80061a8 <alt_tick+0x54>
 8006198:	d0a6c717 	ldw	r2,-25828(gp)
 800619c:	1000021e 	bne	r2,zero,80061a8 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 80061a0:	e0bffd17 	ldw	r2,-12(fp)
 80061a4:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 80061a8:	e0bffd17 	ldw	r2,-12(fp)
 80061ac:	10800217 	ldw	r2,8(r2)
 80061b0:	d0e6c717 	ldw	r3,-25828(gp)
 80061b4:	18801d36 	bltu	r3,r2,800622c <alt_tick+0xd8>
 80061b8:	e0bffd17 	ldw	r2,-12(fp)
 80061bc:	10800403 	ldbu	r2,16(r2)
 80061c0:	10803fcc 	andi	r2,r2,255
 80061c4:	1000191e 	bne	r2,zero,800622c <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 80061c8:	e0bffd17 	ldw	r2,-12(fp)
 80061cc:	10800317 	ldw	r2,12(r2)
 80061d0:	e0fffd17 	ldw	r3,-12(fp)
 80061d4:	18c00517 	ldw	r3,20(r3)
 80061d8:	1809883a 	mov	r4,r3
 80061dc:	103ee83a 	callr	r2
 80061e0:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 80061e4:	e0bfff17 	ldw	r2,-4(fp)
 80061e8:	1000031e 	bne	r2,zero,80061f8 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 80061ec:	e13ffd17 	ldw	r4,-12(fp)
 80061f0:	80060b80 	call	80060b8 <alt_alarm_stop>
 80061f4:	00000d06 	br	800622c <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 80061f8:	e0bffd17 	ldw	r2,-12(fp)
 80061fc:	10c00217 	ldw	r3,8(r2)
 8006200:	e0bfff17 	ldw	r2,-4(fp)
 8006204:	1887883a 	add	r3,r3,r2
 8006208:	e0bffd17 	ldw	r2,-12(fp)
 800620c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 8006210:	e0bffd17 	ldw	r2,-12(fp)
 8006214:	10c00217 	ldw	r3,8(r2)
 8006218:	d0a6c717 	ldw	r2,-25828(gp)
 800621c:	1880032e 	bgeu	r3,r2,800622c <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 8006220:	e0bffd17 	ldw	r2,-12(fp)
 8006224:	00c00044 	movi	r3,1
 8006228:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 800622c:	e0bffe17 	ldw	r2,-8(fp)
 8006230:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 8006234:	e0fffd17 	ldw	r3,-12(fp)
 8006238:	d0a00c04 	addi	r2,gp,-32720
 800623c:	18bfcf1e 	bne	r3,r2,800617c <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 8006240:	0001883a 	nop
}
 8006244:	0001883a 	nop
 8006248:	e037883a 	mov	sp,fp
 800624c:	dfc00117 	ldw	ra,4(sp)
 8006250:	df000017 	ldw	fp,0(sp)
 8006254:	dec00204 	addi	sp,sp,8
 8006258:	f800283a 	ret

0800625c <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
 800625c:	deffff04 	addi	sp,sp,-4
 8006260:	df000015 	stw	fp,0(sp)
 8006264:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 8006268:	000170fa 	wrctl	ienable,zero
}
 800626c:	0001883a 	nop
 8006270:	e037883a 	mov	sp,fp
 8006274:	df000017 	ldw	fp,0(sp)
 8006278:	dec00104 	addi	sp,sp,4
 800627c:	f800283a 	ret

08006280 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 8006280:	defffb04 	addi	sp,sp,-20
 8006284:	dfc00415 	stw	ra,16(sp)
 8006288:	df000315 	stw	fp,12(sp)
 800628c:	df000304 	addi	fp,sp,12
 8006290:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 8006294:	d0a00417 	ldw	r2,-32752(gp)
 8006298:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 800629c:	00003106 	br	8006364 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 80062a0:	e0bffd17 	ldw	r2,-12(fp)
 80062a4:	10800217 	ldw	r2,8(r2)
 80062a8:	1009883a 	mov	r4,r2
 80062ac:	800035c0 	call	800035c <strlen>
 80062b0:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 80062b4:	e0bffd17 	ldw	r2,-12(fp)
 80062b8:	10c00217 	ldw	r3,8(r2)
 80062bc:	e0bffe17 	ldw	r2,-8(fp)
 80062c0:	10bfffc4 	addi	r2,r2,-1
 80062c4:	1885883a 	add	r2,r3,r2
 80062c8:	10800003 	ldbu	r2,0(r2)
 80062cc:	10803fcc 	andi	r2,r2,255
 80062d0:	1080201c 	xori	r2,r2,128
 80062d4:	10bfe004 	addi	r2,r2,-128
 80062d8:	10800bd8 	cmpnei	r2,r2,47
 80062dc:	1000031e 	bne	r2,zero,80062ec <alt_find_file+0x6c>
    {
      len -= 1;
 80062e0:	e0bffe17 	ldw	r2,-8(fp)
 80062e4:	10bfffc4 	addi	r2,r2,-1
 80062e8:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 80062ec:	e0bffe17 	ldw	r2,-8(fp)
 80062f0:	e0ffff17 	ldw	r3,-4(fp)
 80062f4:	1885883a 	add	r2,r3,r2
 80062f8:	10800003 	ldbu	r2,0(r2)
 80062fc:	10803fcc 	andi	r2,r2,255
 8006300:	1080201c 	xori	r2,r2,128
 8006304:	10bfe004 	addi	r2,r2,-128
 8006308:	10800be0 	cmpeqi	r2,r2,47
 800630c:	1000081e 	bne	r2,zero,8006330 <alt_find_file+0xb0>
 8006310:	e0bffe17 	ldw	r2,-8(fp)
 8006314:	e0ffff17 	ldw	r3,-4(fp)
 8006318:	1885883a 	add	r2,r3,r2
 800631c:	10800003 	ldbu	r2,0(r2)
 8006320:	10803fcc 	andi	r2,r2,255
 8006324:	1080201c 	xori	r2,r2,128
 8006328:	10bfe004 	addi	r2,r2,-128
 800632c:	10000a1e 	bne	r2,zero,8006358 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 8006330:	e0bffd17 	ldw	r2,-12(fp)
 8006334:	10800217 	ldw	r2,8(r2)
 8006338:	e0fffe17 	ldw	r3,-8(fp)
 800633c:	180d883a 	mov	r6,r3
 8006340:	e17fff17 	ldw	r5,-4(fp)
 8006344:	1009883a 	mov	r4,r2
 8006348:	80064980 	call	8006498 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 800634c:	1000021e 	bne	r2,zero,8006358 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 8006350:	e0bffd17 	ldw	r2,-12(fp)
 8006354:	00000706 	br	8006374 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 8006358:	e0bffd17 	ldw	r2,-12(fp)
 800635c:	10800017 	ldw	r2,0(r2)
 8006360:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 8006364:	e0fffd17 	ldw	r3,-12(fp)
 8006368:	d0a00404 	addi	r2,gp,-32752
 800636c:	18bfcc1e 	bne	r3,r2,80062a0 <alt_find_file+0x20>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 8006370:	0005883a 	mov	r2,zero
}
 8006374:	e037883a 	mov	sp,fp
 8006378:	dfc00117 	ldw	ra,4(sp)
 800637c:	df000017 	ldw	fp,0(sp)
 8006380:	dec00204 	addi	sp,sp,8
 8006384:	f800283a 	ret

08006388 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 8006388:	defffa04 	addi	sp,sp,-24
 800638c:	dfc00515 	stw	ra,20(sp)
 8006390:	df000415 	stw	fp,16(sp)
 8006394:	dc000315 	stw	r16,12(sp)
 8006398:	df000404 	addi	fp,sp,16
 800639c:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
 80063a0:	00bffa04 	movi	r2,-24
 80063a4:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 80063a8:	e03ffc15 	stw	zero,-16(fp)
 80063ac:	00001d06 	br	8006424 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
 80063b0:	04020034 	movhi	r16,2048
 80063b4:	841c3104 	addi	r16,r16,28868
 80063b8:	e0bffc17 	ldw	r2,-16(fp)
 80063bc:	01400304 	movi	r5,12
 80063c0:	1009883a 	mov	r4,r2
 80063c4:	800306c0 	call	800306c <__mulsi3>
 80063c8:	8085883a 	add	r2,r16,r2
 80063cc:	10800017 	ldw	r2,0(r2)
 80063d0:	1000111e 	bne	r2,zero,8006418 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
 80063d4:	04020034 	movhi	r16,2048
 80063d8:	841c3104 	addi	r16,r16,28868
 80063dc:	e0bffc17 	ldw	r2,-16(fp)
 80063e0:	01400304 	movi	r5,12
 80063e4:	1009883a 	mov	r4,r2
 80063e8:	800306c0 	call	800306c <__mulsi3>
 80063ec:	8085883a 	add	r2,r16,r2
 80063f0:	e0fffe17 	ldw	r3,-8(fp)
 80063f4:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 80063f8:	d0e00817 	ldw	r3,-32736(gp)
 80063fc:	e0bffc17 	ldw	r2,-16(fp)
 8006400:	1880020e 	bge	r3,r2,800640c <alt_get_fd+0x84>
      {
        alt_max_fd = i;
 8006404:	e0bffc17 	ldw	r2,-16(fp)
 8006408:	d0a00815 	stw	r2,-32736(gp)
      }
      rc = i;
 800640c:	e0bffc17 	ldw	r2,-16(fp)
 8006410:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 8006414:	00000606 	br	8006430 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 8006418:	e0bffc17 	ldw	r2,-16(fp)
 800641c:	10800044 	addi	r2,r2,1
 8006420:	e0bffc15 	stw	r2,-16(fp)
 8006424:	e0bffc17 	ldw	r2,-16(fp)
 8006428:	10800810 	cmplti	r2,r2,32
 800642c:	103fe01e 	bne	r2,zero,80063b0 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 8006430:	e0bffd17 	ldw	r2,-12(fp)
}
 8006434:	e6ffff04 	addi	sp,fp,-4
 8006438:	dfc00217 	ldw	ra,8(sp)
 800643c:	df000117 	ldw	fp,4(sp)
 8006440:	dc000017 	ldw	r16,0(sp)
 8006444:	dec00304 	addi	sp,sp,12
 8006448:	f800283a 	ret

0800644c <atexit>:
 800644c:	200b883a 	mov	r5,r4
 8006450:	000f883a 	mov	r7,zero
 8006454:	000d883a 	mov	r6,zero
 8006458:	0009883a 	mov	r4,zero
 800645c:	80065141 	jmpi	8006514 <__register_exitproc>

08006460 <exit>:
 8006460:	defffe04 	addi	sp,sp,-8
 8006464:	000b883a 	mov	r5,zero
 8006468:	dc000015 	stw	r16,0(sp)
 800646c:	dfc00115 	stw	ra,4(sp)
 8006470:	2021883a 	mov	r16,r4
 8006474:	800662c0 	call	800662c <__call_exitprocs>
 8006478:	00820074 	movhi	r2,2049
 800647c:	10a0be04 	addi	r2,r2,-32008
 8006480:	11000017 	ldw	r4,0(r2)
 8006484:	20800f17 	ldw	r2,60(r4)
 8006488:	10000126 	beq	r2,zero,8006490 <exit+0x30>
 800648c:	103ee83a 	callr	r2
 8006490:	8009883a 	mov	r4,r16
 8006494:	80067ac0 	call	80067ac <_exit>

08006498 <memcmp>:
 8006498:	01c000c4 	movi	r7,3
 800649c:	3980192e 	bgeu	r7,r6,8006504 <memcmp+0x6c>
 80064a0:	2144b03a 	or	r2,r4,r5
 80064a4:	11c4703a 	and	r2,r2,r7
 80064a8:	10000f26 	beq	r2,zero,80064e8 <memcmp+0x50>
 80064ac:	20800003 	ldbu	r2,0(r4)
 80064b0:	28c00003 	ldbu	r3,0(r5)
 80064b4:	10c0151e 	bne	r2,r3,800650c <memcmp+0x74>
 80064b8:	31bfff84 	addi	r6,r6,-2
 80064bc:	01ffffc4 	movi	r7,-1
 80064c0:	00000406 	br	80064d4 <memcmp+0x3c>
 80064c4:	20800003 	ldbu	r2,0(r4)
 80064c8:	28c00003 	ldbu	r3,0(r5)
 80064cc:	31bfffc4 	addi	r6,r6,-1
 80064d0:	10c00e1e 	bne	r2,r3,800650c <memcmp+0x74>
 80064d4:	21000044 	addi	r4,r4,1
 80064d8:	29400044 	addi	r5,r5,1
 80064dc:	31fff91e 	bne	r6,r7,80064c4 <memcmp+0x2c>
 80064e0:	0005883a 	mov	r2,zero
 80064e4:	f800283a 	ret
 80064e8:	20c00017 	ldw	r3,0(r4)
 80064ec:	28800017 	ldw	r2,0(r5)
 80064f0:	18bfee1e 	bne	r3,r2,80064ac <memcmp+0x14>
 80064f4:	31bfff04 	addi	r6,r6,-4
 80064f8:	21000104 	addi	r4,r4,4
 80064fc:	29400104 	addi	r5,r5,4
 8006500:	39bff936 	bltu	r7,r6,80064e8 <memcmp+0x50>
 8006504:	303fe91e 	bne	r6,zero,80064ac <memcmp+0x14>
 8006508:	003ff506 	br	80064e0 <memcmp+0x48>
 800650c:	10c5c83a 	sub	r2,r2,r3
 8006510:	f800283a 	ret

08006514 <__register_exitproc>:
 8006514:	defffa04 	addi	sp,sp,-24
 8006518:	dc000315 	stw	r16,12(sp)
 800651c:	04020074 	movhi	r16,2049
 8006520:	8420be04 	addi	r16,r16,-32008
 8006524:	80c00017 	ldw	r3,0(r16)
 8006528:	dc400415 	stw	r17,16(sp)
 800652c:	dfc00515 	stw	ra,20(sp)
 8006530:	18805217 	ldw	r2,328(r3)
 8006534:	2023883a 	mov	r17,r4
 8006538:	10003726 	beq	r2,zero,8006618 <__register_exitproc+0x104>
 800653c:	10c00117 	ldw	r3,4(r2)
 8006540:	010007c4 	movi	r4,31
 8006544:	20c00e16 	blt	r4,r3,8006580 <__register_exitproc+0x6c>
 8006548:	1a000044 	addi	r8,r3,1
 800654c:	8800221e 	bne	r17,zero,80065d8 <__register_exitproc+0xc4>
 8006550:	18c00084 	addi	r3,r3,2
 8006554:	18c7883a 	add	r3,r3,r3
 8006558:	18c7883a 	add	r3,r3,r3
 800655c:	12000115 	stw	r8,4(r2)
 8006560:	10c7883a 	add	r3,r2,r3
 8006564:	19400015 	stw	r5,0(r3)
 8006568:	0005883a 	mov	r2,zero
 800656c:	dfc00517 	ldw	ra,20(sp)
 8006570:	dc400417 	ldw	r17,16(sp)
 8006574:	dc000317 	ldw	r16,12(sp)
 8006578:	dec00604 	addi	sp,sp,24
 800657c:	f800283a 	ret
 8006580:	00800034 	movhi	r2,0
 8006584:	10800004 	addi	r2,r2,0
 8006588:	10002626 	beq	r2,zero,8006624 <__register_exitproc+0x110>
 800658c:	01006404 	movi	r4,400
 8006590:	d9400015 	stw	r5,0(sp)
 8006594:	d9800115 	stw	r6,4(sp)
 8006598:	d9c00215 	stw	r7,8(sp)
 800659c:	00000000 	call	0 <__alt_mem_new_sdram_controller_0-0x8000000>
 80065a0:	d9400017 	ldw	r5,0(sp)
 80065a4:	d9800117 	ldw	r6,4(sp)
 80065a8:	d9c00217 	ldw	r7,8(sp)
 80065ac:	10001d26 	beq	r2,zero,8006624 <__register_exitproc+0x110>
 80065b0:	81000017 	ldw	r4,0(r16)
 80065b4:	10000115 	stw	zero,4(r2)
 80065b8:	02000044 	movi	r8,1
 80065bc:	22405217 	ldw	r9,328(r4)
 80065c0:	0007883a 	mov	r3,zero
 80065c4:	12400015 	stw	r9,0(r2)
 80065c8:	20805215 	stw	r2,328(r4)
 80065cc:	10006215 	stw	zero,392(r2)
 80065d0:	10006315 	stw	zero,396(r2)
 80065d4:	883fde26 	beq	r17,zero,8006550 <__register_exitproc+0x3c>
 80065d8:	18c9883a 	add	r4,r3,r3
 80065dc:	2109883a 	add	r4,r4,r4
 80065e0:	1109883a 	add	r4,r2,r4
 80065e4:	21802215 	stw	r6,136(r4)
 80065e8:	01800044 	movi	r6,1
 80065ec:	12406217 	ldw	r9,392(r2)
 80065f0:	30cc983a 	sll	r6,r6,r3
 80065f4:	4992b03a 	or	r9,r9,r6
 80065f8:	12406215 	stw	r9,392(r2)
 80065fc:	21c04215 	stw	r7,264(r4)
 8006600:	01000084 	movi	r4,2
 8006604:	893fd21e 	bne	r17,r4,8006550 <__register_exitproc+0x3c>
 8006608:	11006317 	ldw	r4,396(r2)
 800660c:	218cb03a 	or	r6,r4,r6
 8006610:	11806315 	stw	r6,396(r2)
 8006614:	003fce06 	br	8006550 <__register_exitproc+0x3c>
 8006618:	18805304 	addi	r2,r3,332
 800661c:	18805215 	stw	r2,328(r3)
 8006620:	003fc606 	br	800653c <__register_exitproc+0x28>
 8006624:	00bfffc4 	movi	r2,-1
 8006628:	003fd006 	br	800656c <__register_exitproc+0x58>

0800662c <__call_exitprocs>:
 800662c:	defff504 	addi	sp,sp,-44
 8006630:	df000915 	stw	fp,36(sp)
 8006634:	dd400615 	stw	r21,24(sp)
 8006638:	dc800315 	stw	r18,12(sp)
 800663c:	dfc00a15 	stw	ra,40(sp)
 8006640:	ddc00815 	stw	r23,32(sp)
 8006644:	dd800715 	stw	r22,28(sp)
 8006648:	dd000515 	stw	r20,20(sp)
 800664c:	dcc00415 	stw	r19,16(sp)
 8006650:	dc400215 	stw	r17,8(sp)
 8006654:	dc000115 	stw	r16,4(sp)
 8006658:	d9000015 	stw	r4,0(sp)
 800665c:	2839883a 	mov	fp,r5
 8006660:	04800044 	movi	r18,1
 8006664:	057fffc4 	movi	r21,-1
 8006668:	00820074 	movhi	r2,2049
 800666c:	10a0be04 	addi	r2,r2,-32008
 8006670:	12000017 	ldw	r8,0(r2)
 8006674:	45005217 	ldw	r20,328(r8)
 8006678:	44c05204 	addi	r19,r8,328
 800667c:	a0001c26 	beq	r20,zero,80066f0 <__call_exitprocs+0xc4>
 8006680:	a0800117 	ldw	r2,4(r20)
 8006684:	15ffffc4 	addi	r23,r2,-1
 8006688:	b8000d16 	blt	r23,zero,80066c0 <__call_exitprocs+0x94>
 800668c:	14000044 	addi	r16,r2,1
 8006690:	8421883a 	add	r16,r16,r16
 8006694:	8421883a 	add	r16,r16,r16
 8006698:	84402004 	addi	r17,r16,128
 800669c:	a463883a 	add	r17,r20,r17
 80066a0:	a421883a 	add	r16,r20,r16
 80066a4:	e0001e26 	beq	fp,zero,8006720 <__call_exitprocs+0xf4>
 80066a8:	80804017 	ldw	r2,256(r16)
 80066ac:	e0801c26 	beq	fp,r2,8006720 <__call_exitprocs+0xf4>
 80066b0:	bdffffc4 	addi	r23,r23,-1
 80066b4:	843fff04 	addi	r16,r16,-4
 80066b8:	8c7fff04 	addi	r17,r17,-4
 80066bc:	bd7ff91e 	bne	r23,r21,80066a4 <__call_exitprocs+0x78>
 80066c0:	00800034 	movhi	r2,0
 80066c4:	10800004 	addi	r2,r2,0
 80066c8:	10000926 	beq	r2,zero,80066f0 <__call_exitprocs+0xc4>
 80066cc:	a0800117 	ldw	r2,4(r20)
 80066d0:	1000301e 	bne	r2,zero,8006794 <__call_exitprocs+0x168>
 80066d4:	a0800017 	ldw	r2,0(r20)
 80066d8:	10003226 	beq	r2,zero,80067a4 <__call_exitprocs+0x178>
 80066dc:	a009883a 	mov	r4,r20
 80066e0:	98800015 	stw	r2,0(r19)
 80066e4:	00000000 	call	0 <__alt_mem_new_sdram_controller_0-0x8000000>
 80066e8:	9d000017 	ldw	r20,0(r19)
 80066ec:	a03fe41e 	bne	r20,zero,8006680 <__call_exitprocs+0x54>
 80066f0:	dfc00a17 	ldw	ra,40(sp)
 80066f4:	df000917 	ldw	fp,36(sp)
 80066f8:	ddc00817 	ldw	r23,32(sp)
 80066fc:	dd800717 	ldw	r22,28(sp)
 8006700:	dd400617 	ldw	r21,24(sp)
 8006704:	dd000517 	ldw	r20,20(sp)
 8006708:	dcc00417 	ldw	r19,16(sp)
 800670c:	dc800317 	ldw	r18,12(sp)
 8006710:	dc400217 	ldw	r17,8(sp)
 8006714:	dc000117 	ldw	r16,4(sp)
 8006718:	dec00b04 	addi	sp,sp,44
 800671c:	f800283a 	ret
 8006720:	a0800117 	ldw	r2,4(r20)
 8006724:	80c00017 	ldw	r3,0(r16)
 8006728:	10bfffc4 	addi	r2,r2,-1
 800672c:	15c01426 	beq	r2,r23,8006780 <__call_exitprocs+0x154>
 8006730:	80000015 	stw	zero,0(r16)
 8006734:	183fde26 	beq	r3,zero,80066b0 <__call_exitprocs+0x84>
 8006738:	95c8983a 	sll	r4,r18,r23
 800673c:	a0806217 	ldw	r2,392(r20)
 8006740:	a5800117 	ldw	r22,4(r20)
 8006744:	2084703a 	and	r2,r4,r2
 8006748:	10000b26 	beq	r2,zero,8006778 <__call_exitprocs+0x14c>
 800674c:	a0806317 	ldw	r2,396(r20)
 8006750:	2088703a 	and	r4,r4,r2
 8006754:	20000c1e 	bne	r4,zero,8006788 <__call_exitprocs+0x15c>
 8006758:	89400017 	ldw	r5,0(r17)
 800675c:	d9000017 	ldw	r4,0(sp)
 8006760:	183ee83a 	callr	r3
 8006764:	a0800117 	ldw	r2,4(r20)
 8006768:	15bfbf1e 	bne	r2,r22,8006668 <__call_exitprocs+0x3c>
 800676c:	98800017 	ldw	r2,0(r19)
 8006770:	153fcf26 	beq	r2,r20,80066b0 <__call_exitprocs+0x84>
 8006774:	003fbc06 	br	8006668 <__call_exitprocs+0x3c>
 8006778:	183ee83a 	callr	r3
 800677c:	003ff906 	br	8006764 <__call_exitprocs+0x138>
 8006780:	a5c00115 	stw	r23,4(r20)
 8006784:	003feb06 	br	8006734 <__call_exitprocs+0x108>
 8006788:	89000017 	ldw	r4,0(r17)
 800678c:	183ee83a 	callr	r3
 8006790:	003ff406 	br	8006764 <__call_exitprocs+0x138>
 8006794:	a0800017 	ldw	r2,0(r20)
 8006798:	a027883a 	mov	r19,r20
 800679c:	1029883a 	mov	r20,r2
 80067a0:	003fb606 	br	800667c <__call_exitprocs+0x50>
 80067a4:	0005883a 	mov	r2,zero
 80067a8:	003ffb06 	br	8006798 <__call_exitprocs+0x16c>

080067ac <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 80067ac:	defffd04 	addi	sp,sp,-12
 80067b0:	df000215 	stw	fp,8(sp)
 80067b4:	df000204 	addi	fp,sp,8
 80067b8:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 80067bc:	0001883a 	nop
 80067c0:	e0bfff17 	ldw	r2,-4(fp)
 80067c4:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 80067c8:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 80067cc:	10000226 	beq	r2,zero,80067d8 <_exit+0x2c>
    ALT_SIM_FAIL();
 80067d0:	002af070 	cmpltui	zero,zero,43969
 80067d4:	00000106 	br	80067dc <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 80067d8:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 80067dc:	003fff06 	br	80067dc <_exit+0x30>
